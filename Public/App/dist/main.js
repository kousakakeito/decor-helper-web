/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./Public/App/src/FurnitureBottomLeftCheckSquareModule.js":
/*!****************************************************************!*\
  !*** ./Public/App/src/FurnitureBottomLeftCheckSquareModule.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function bottomLeftCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle1.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n        const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n        const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    \r\n        const clear = [minX, minY+1, maxX - minX, maxY - minY];\r\n    \r\n        console.log(clear);\r\n    \r\n        context.clearRect(...clear);\r\n    \r\n        shape.clear = clear;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle1.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#8b4513', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#8b4513', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureBottomLeftCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureBottomLeftCheckTriangleModule.js":
/*!******************************************************************!*\
  !*** ./Public/App/src/FurnitureBottomLeftCheckTriangleModule.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function bottomLeftCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n     function handleConfirm13(){\r\n\r\n\r\n\r\n        const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1, y1+1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3+1];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n        layer.add(customShape);\r\n        layer.draw();\r\n\r\n      circle1.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n      dashedLine7.destroy();\r\n      dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n     \r\n     function handleConfirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         \r\n          const customShape = new Konva.Shape({\r\n\r\n            sceneFunc: function (context, shape) {\r\n          \r\n              const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n              const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n              const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n              const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n              const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n              const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n              const clearLine1 = [x1, y1+1];\r\n              const clearLine2 = [x2, y2];\r\n              const clearLine3 = [x3, y3+1];\r\n  \r\n              context.beginPath();\r\n              context.moveTo(...clearLine1);\r\n              context.lineTo(...clearLine2);\r\n              context.lineTo(...clearLine3);\r\n              context.closePath();\r\n          \r\n              // 三角形のパスをクリアする\r\n              context.globalCompositeOperation = 'destination-out';\r\n              context.fill();\r\n              context.globalCompositeOperation = 'source-over';\r\n          \r\n              shape.clearLine1 = clearLine1;\r\n              shape.clearLine2 = clearLine2;\r\n              shape.clearLine3 = clearLine3;\r\n          \r\n            },\r\n          \r\n            \r\n          });\r\n          \r\n        layer.add(customShape);\r\n        layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1, y1+1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3+1];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 下に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#8b4513', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#8b4513', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle1.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureBottomLeftCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureBottomLeftLengthModule.js":
/*!***********************************************************!*\
  !*** ./Public/App/src/FurnitureBottomLeftLengthModule.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function bottomLeftLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm6){\r\n\r\n  if(Number.isNaN(size3Num)){\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";\r\n   } else{\r\n\r\n    // 長さを格納する変数\r\nlet length2 = size3Num; \r\n\r\ncircle2.destroy();\r\nmidRect.destroy();\r\ndashedLine5.destroy();\r\n\r\n// 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\nconst newLeftCircleX = rectangle.x() + length2;\r\n\r\n// 左の丸い点の座標を更新\r\ncircle1.x(newLeftCircleX);\r\nlayer.draw();\r\n\r\n\r\n // 丸い点の座標を取得\r\n const x = circle1.x();\r\n const y = circle1.y();\r\n\r\n // 破線を作成\r\n const dashedLine6 = new Konva.Line({\r\n   points: [x, y, x + length, y], // 例としてX座標から100ピクセル右に破線を表示\r\n   stroke: 'red',\r\n   strokeWidth: 2,\r\n   lineCap: 'round',\r\n   dash: [5, 10],\r\n });\r\n\r\n // 新しい丸い点を作成\r\n const newCircle = new Konva.Circle({\r\n   x: dashedLine6.points()[2], // 破線の一番右端のX座標を取得\r\n   y: dashedLine6.points()[3], // 破線の一番右端のY座標を取得\r\n   radius: 5,\r\n   fill: 'red',\r\n });\r\n\r\n\r\n const x2 = newCircle.x();\r\n const y2 = newCircle.y();\r\n\r\n const newRectX = (x + x2) / 2;\r\n const newRectY = (y + y2) / 2;\r\n const newRect = new Konva.Rect({\r\n   x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n   y: newRectY - 5,\r\n   width: 10,\r\n   height: 10,\r\n   fill: 'red',\r\n });\r\n\r\n layer.add(dashedLine6);\r\n layer.add(newCircle); \r\n layer.add(newRect);\r\n layer.draw();\r\n\r\n\r\n\r\nconst paturnText = document.createElement('p');\r\npaturnText.classList.add(\"paturn-text\");\r\n\r\nconst check1 = document.createElement('input');\r\ncheck1.type = \"checkbox\";\r\ncheck1.classList.add(\"check1\");\r\ncheck1.name = \"check\";\r\n\r\nconst check2 = document.createElement('input');\r\ncheck2.type = \"checkbox\";\r\ncheck2.classList.add(\"check2\");\r\ncheck2.name = \"check\";\r\n\r\nconst paturn1 = document.createElement('img');\r\npaturn1.src = \"/images/paturn1.png\";\r\npaturn1.classList.add(\"paturn1\");\r\n\r\nconst paturn2 = document.createElement('img');\r\npaturn2.src = \"/images/paturn2.png\";\r\npaturn2.classList.add(\"paturn2\");\r\n\r\nconst rectAngleSizeForm28 = document.createElement('input');\r\nrectAngleSizeForm28.type = \"text\";\r\nrectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\nrectAngleSizeForm28.placeholder = \"上方向に縮める長さを入力\";\r\n\r\nconst rectAngleSizeForm29 = document.createElement('input');\r\nrectAngleSizeForm29.type = \"text\";\r\nrectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\nrectAngleSizeForm29.placeholder = \"下方向に伸ばす長さを入力\";\r\n\r\nconst rectAngleConfirm11 = document.createElement('button');\r\nrectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\nrectAngleConfirm11.append(\"決定\");\r\n\r\nconst div22 = document.createElement(\"div\");\r\ndiv22.classList.add(\"div22\");\r\n\r\nconst div21 = document.createElement(\"div\");\r\ndiv21.classList.add(\"div21\");\r\n\r\nconst note13 = document.createElement(\"p\");\r\nnote13.classList.add(\"note13\");\r\n\r\ndiv22.append(note13);\r\ndiv22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\ndiv21.append(div22);\r\nfurniturecenterInner.append(div21);\r\n\r\ndocument.querySelector(\".note13\").textContent = \"上方向または下方向のどちらかを入力してください\";\r\ndocument.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\nconst check = document.querySelectorAll(\"[name=check\");\r\nfor(let i = 0; i < 2; i++){\r\ncheck[i].addEventListener(\"click\",function(){\r\n  const currentItem = this;\r\n  if(currentItem.checked){\r\n    check[0].checked = false;\r\n    check[1].checked = false;\r\n    currentItem.checked = true;\r\n  };\r\n});\r\n};\r\n\r\ndocument.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\ndocument.querySelector(\".rectAngle-confirm6\").removeEventListener(\"click\",handleConfirm6);\r\n\r\n\r\n\r\nwhile (document.querySelector(\".div11\").lastChild) {\r\n  document.querySelector(\".div11\").removeChild(document.querySelector(\".div11\").lastChild);\r\n  console.log(\"while\");\r\n }\r\n\r\n document.querySelector(\".div11\").parentNode.removeChild(document.querySelector(\".div11\"));\r\n\r\n\r\n\r\n\r\n\r\nfunction handleConfirm11(){\r\n\r\nif(check[0].checked){\r\n\r\n  const  bottomLeftCheckTriangle  = __webpack_require__(/*! src/FurnitureBottomLeftCheckTriangleModule */ \"./Public/App/src/FurnitureBottomLeftCheckTriangleModule.js\");\r\n  const bottomLeftCheckTriangle2 = () =>{\r\n\r\n    bottomLeftCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n  };\r\n\r\n  bottomLeftCheckTriangle2();\r\n\r\n\r\n\r\n}else if(check[1].checked){\r\n\r\n  const  bottomLeftCheckSquare  = __webpack_require__(/*! src/FurnitureBottomLeftCheckSquareModule */ \"./Public/App/src/FurnitureBottomLeftCheckSquareModule.js\");\r\n  const bottomLeftCheckSquare2 = () =>{\r\n\r\n    bottomLeftCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n  };\r\n\r\n  bottomLeftCheckSquare2();\r\n\r\n\r\n\r\n}else{\r\n\r\n  const sizeFormError7 = document.createElement(\"p\");\r\n  sizeFormError7.classList.add(\"size-form-error7\");\r\n  div22.append(sizeFormError7);\r\n  document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n}\r\n\r\n};\r\n};\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureBottomLeftLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureBottomRightCheckSquareModule.js":
/*!*****************************************************************!*\
  !*** ./Public/App/src/FurnitureBottomRightCheckSquareModule.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function bottomRightCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle2.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n        const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n        const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    \r\n        const clear = [minX, minY+1, maxX - minX, maxY - minY];\r\n    \r\n        console.log(clear);\r\n    \r\n        context.clearRect(...clear);\r\n    \r\n        shape.clear = clear;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle2.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#8b4513', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#8b4513', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureBottomRightCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureBottomRightCheckTriangleModule.js":
/*!*******************************************************************!*\
  !*** ./Public/App/src/FurnitureBottomRightCheckTriangleModule.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function bottomRightCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n     function handleConfirm13(){\r\n\r\n      const customShape = new Konva.Shape({\r\n\r\n        sceneFunc: function (context, shape) {\r\n      \r\n          const x1 = circleX1; // 三角形の頂点1の X 座標\r\n          const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n          const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n          const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n          const x3 = circleX2; // 三角形の頂点3の X 座標\r\n          const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n          const clearLine1 = [x1, y1+1];\r\n          const clearLine2 = [x2, y2];\r\n          const clearLine3 = [x3, y3+1];\r\n\r\n          context.beginPath();\r\n          context.moveTo(...clearLine1);\r\n          context.lineTo(...clearLine2);\r\n          context.lineTo(...clearLine3);\r\n          context.closePath();\r\n      \r\n          // 三角形のパスをクリアする\r\n          context.globalCompositeOperation = 'destination-out';\r\n          context.fill();\r\n          context.globalCompositeOperation = 'source-over';\r\n      \r\n          shape.clearLine1 = clearLine1;\r\n          shape.clearLine2 = clearLine2;\r\n          shape.clearLine3 = clearLine3;\r\n      \r\n        },\r\n      \r\n        \r\n      });\r\n      \r\n      layer.add(customShape);\r\n      layer.draw();\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n      dashedLine7.destroy();\r\n      dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n     \r\n     function handleConfirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1, y1+1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3+1];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1, y1+1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3+1];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n\r\n        };\r\n       };\r\n\r\n     };\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 下に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#8b4513', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#8b4513', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureBottomRightCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureBottomRightLengthModule.js":
/*!************************************************************!*\
  !*** ./Public/App/src/FurnitureBottomRightLengthModule.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function bottomRightLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm6){\r\n\r\n  if(Number.isNaN(size2Num)){\r\n\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError3);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n   } else{\r\n     console.log(\"A\");\r\n\r\n  // 長さを格納する変数\r\n  let length2 = size2Num; \r\n\r\n  circle1.destroy();\r\n  midRect.destroy();\r\n  dashedLine5.destroy();\r\n\r\n  // 図形の上辺の右端から指定した距離の位置を計算して新しい右の丸い点のX座標を設定\r\n  const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n\r\n  // 右の丸い点の座標を更新\r\n  circle2.x(newRightCircleX);\r\n  layer.draw();\r\n\r\n  \r\n    // 丸い点の座標を取得\r\n    const x = circle2.x();\r\n    const y = circle2.y();\r\n\r\n    // 破線を作成\r\n    const dashedLine6 = new Konva.Line({\r\n      points: [x, y, x - length, y], // 例としてX座標から100ピクセル右に破線を表示\r\n      stroke: 'red',\r\n      strokeWidth: 2,\r\n      lineCap: 'round',\r\n      dash: [5, 10],\r\n    });\r\n\r\n    // 新しい丸い点を作成\r\n    const newCircle = new Konva.Circle({\r\n      x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n      y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n      radius: 5,\r\n      fill: 'red',\r\n    });\r\n\r\n    const x2 = newCircle.x();\r\n    const y2 = newCircle.y();\r\n\r\n    const newRectX = (x + x2) / 2;\r\n    const newRectY = (y + y2) / 2;\r\n    const newRect = new Konva.Rect({\r\n      x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n      y: newRectY - 5,\r\n      width: 10,\r\n      height: 10,\r\n      fill: 'red',\r\n    });\r\n\r\n    layer.add(dashedLine6);\r\n    layer.add(newCircle); \r\n    layer.add(newRect);\r\n    layer.draw();\r\n \r\n\r\n\r\n const paturnText = document.createElement('p');\r\n paturnText.classList.add(\"paturn-text\");\r\n\r\n const check1 = document.createElement('input');\r\n check1.type = \"checkbox\";\r\n check1.classList.add(\"check1\");\r\n check1.name = \"check\";\r\n\r\n const check2 = document.createElement('input');\r\n check2.type = \"checkbox\";\r\n check2.classList.add(\"check2\");\r\n check2.name = \"check\";\r\n\r\n const paturn1 = document.createElement('img');\r\n paturn1.src = \"/images/paturn1.png\";\r\n paturn1.classList.add(\"paturn1\");\r\n\r\n const paturn2 = document.createElement('img');\r\n paturn2.src = \"/images/paturn2.png\";\r\n paturn2.classList.add(\"paturn2\");\r\n\r\n const rectAngleSizeForm28 = document.createElement('input');\r\n rectAngleSizeForm28.type = \"text\";\r\n rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n rectAngleSizeForm28.placeholder = \"上方向に縮める長さを入力\";\r\n\r\n const rectAngleSizeForm29 = document.createElement('input');\r\n rectAngleSizeForm29.type = \"text\";\r\n rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n rectAngleSizeForm29.placeholder = \"下方向に伸ばす長さを入力\";\r\n\r\n const rectAngleConfirm11 = document.createElement('button');\r\n rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n rectAngleConfirm11.append(\"決定\");\r\n\r\n const div22 = document.createElement(\"div\");\r\n div22.classList.add(\"div22\");\r\n\r\n const div21 = document.createElement(\"div\");\r\n div21.classList.add(\"div21\");\r\n\r\n const note13 = document.createElement(\"p\");\r\n note13.classList.add(\"note13\");\r\n\r\n div22.append(note13);\r\n div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n div21.append(div22);\r\n furniturecenterInner.append(div21);\r\n\r\n document.querySelector(\".note13\").textContent = \"上方向または下方向のどちらかを入力してください\";\r\n document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n const check = document.querySelectorAll(\"[name=check\");\r\n for(let i = 0; i < 2; i++){\r\n   check[i].addEventListener(\"click\",function(){\r\n     const currentItem = this;\r\n     if(currentItem.checked){\r\n       check[0].checked = false;\r\n       check[1].checked = false;\r\n       currentItem.checked = true;\r\n     };\r\n   });\r\n };\r\n\r\n document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\n document.querySelector(\".rectAngle-confirm6\").removeEventListener(\"click\",handleConfirm6);\r\n\r\n\r\n\r\n while (document.querySelector(\".div11\").lastChild) {\r\n   document.querySelector(\".div11\").removeChild(document.querySelector(\".div11\").lastChild);\r\n   console.log(\"while\");\r\n  }\r\n\r\n  document.querySelector(\".div11\").parentNode.removeChild(document.querySelector(\".div11\"));\r\n\r\n\r\n\r\n\r\n \r\n function handleConfirm11(){\r\n\r\n   if(check[0].checked){\r\n\r\n    const  bottomRightCheckTriangle  = __webpack_require__(/*! src/FurnitureBottomRightCheckTriangleModule */ \"./Public/App/src/FurnitureBottomRightCheckTriangleModule.js\");\r\n    const bottomRightCheckTriangle2 = () =>{\r\n\r\n      bottomRightCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n    };\r\n\r\n    bottomRightCheckTriangle2();\r\n\r\n\r\n\r\n   }else if(check[1].checked){\r\n\r\n    const  bottomRightCheckSquare  = __webpack_require__(/*! src/FurnitureBottomRightCheckSquareModule */ \"./Public/App/src/FurnitureBottomRightCheckSquareModule.js\");\r\n    const bottomRightCheckSquare2 = () =>{\r\n\r\n      bottomRightCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n    };\r\n\r\n    bottomRightCheckSquare2();\r\n\r\n\r\n\r\n   }else{\r\n\r\n     const sizeFormError7 = document.createElement(\"p\");\r\n     sizeFormError7.classList.add(\"size-form-error7\");\r\n     div22.append(sizeFormError7);\r\n     document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n   }\r\n\r\n };\r\n};\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureBottomRightLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureBottomTwoPointsModule.js":
/*!**********************************************************!*\
  !*** ./Public/App/src/FurnitureBottomTwoPointsModule.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function bottomTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length){\r\n\r\n  const rectAngleSizeForm10 = document.createElement('input');\r\n  rectAngleSizeForm10.type = \"text\";\r\n  rectAngleSizeForm10.classList.add(\"rectAngle-SizeForm10\");\r\n  rectAngleSizeForm10.placeholder = \"右端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm11 = document.createElement('input');\r\n  rectAngleSizeForm11.type = \"text\";\r\n  rectAngleSizeForm11.classList.add(\"rectAngle-SizeForm11\");\r\n  rectAngleSizeForm11.placeholder = \"左端からの長さを入力\";\r\n\r\n  const rectAngleConfirm6 = document.createElement('button');\r\n  rectAngleConfirm6.classList.add(\"rectAngle-confirm6\");\r\n  rectAngleConfirm6.append(\"決定\");\r\n\r\n  const div12 = document.createElement(\"div\");\r\n  div12.classList.add(\"div12\");\r\n\r\n  const div11 = document.createElement(\"div\");\r\n  div11.classList.add(\"div11\");\r\n\r\n  const note4 = document.createElement(\"p\");\r\n  note4.classList.add(\"note4\");\r\n\r\n  div12.append(note4);\r\n  div12.append(rectAngleSizeForm10,rectAngleSizeForm11,rectAngleConfirm6);\r\n\r\n  div11.append(div12);\r\n  furniturecenterInner.append(div11);\r\n\r\n  document.querySelector(\".note4\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n\r\n  // 四角の中心座標を取得\r\n  const midRectX = midRect.x() + midRect.width() / 2;\r\n  const midRectY = midRect.y() + midRect.height() / 2;\r\n\r\n  // 横破線を描画する座標を計算\r\n  const dashedLineX1 = midRectX - length / 2;\r\n  const dashedLineY1 = midRectY;\r\n  const dashedLineX2 = midRectX + length / 2;\r\n  const dashedLineY2 = midRectY;\r\n\r\n  // 破線を作成\r\n  const dashedLine5 = new Konva.Line({\r\n    points: [dashedLineX1, dashedLineY1, dashedLineX2, dashedLineY2],\r\n    stroke: 'red',\r\n    strokeWidth: 2,\r\n    dash: [5, 10], // 破線のパターンを指定（length変数の値を使用）\r\n  });\r\n\r\n  // 丸い点を作成\r\n  const circle1 = new Konva.Circle({\r\n    x: dashedLineX1,\r\n    y: dashedLineY1,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  const circle2 = new Konva.Circle({\r\n    x: dashedLineX2,\r\n    y: dashedLineY2,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  // レイヤーに追加\r\n  layer.add(dashedLine5, circle1, circle2, midRect);\r\n  stage.add(layer);\r\n\r\n  document.querySelector(\".rectAngle-confirm6\").addEventListener(\"click\",handleConfirm6);\r\n\r\n  document.querySelector(\".rectAngle-confirm2\").removeEventListener(\"click\",handleConfirm2);\r\n      \r\n  while (document.querySelector(\".div3\").lastChild) {\r\n    document.querySelector(\".div3\").removeChild(document.querySelector(\".div3\").lastChild);\r\n    console.log(\"while0\");\r\n\r\n   }\r\n\r\n   document.querySelector(\".div3\").parentNode.removeChild(document.querySelector(\".div3\"));\r\n   \r\n\r\n  function handleConfirm6(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm10\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm11\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    \r\n    \r\n    if(size2 !== \"\" && size3 === \"\"){\r\n\r\n      const  bottomRightLength  = __webpack_require__(/*! src/FurnitureBottomRightLengthModule */ \"./Public/App/src/FurnitureBottomRightLengthModule.js\");\r\n      const bottomRightLength2 = () =>{\r\n  \r\n        bottomRightLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm6)\r\n  \r\n      };\r\n  \r\n      bottomRightLength2();\r\n\r\n\r\n\r\n\r\n\r\n    } else if(size3 !== \"\" && size2 === \"\"){\r\n\r\n      const  bottomLeftLength  = __webpack_require__(/*! src/FurnitureBottomLeftLengthModule */ \"./Public/App/src/FurnitureBottomLeftLengthModule.js\");\r\n      const bottomLeftLength2 = () =>{\r\n  \r\n        bottomLeftLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm6)\r\n  \r\n      };\r\n  \r\n      bottomLeftLength2();\r\n\r\n    };  \r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureBottomTwoPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureCreateModule.js":
/*!*************************************************!*\
  !*** ./Public/App/src/FurnitureCreateModule.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function furnitureCreate(){\r\n\r\n  document.querySelector('.furniture-createbtn').style.display = \"none\";\r\n\r\n  const furnitureForm = document.querySelector('.furniture-form');\r\n  const genreForm = document.querySelector('.genre-form');\r\n  furnitureForm.disabled = false;\r\n  genreForm.disabled = false;\r\n\r\n // 破線の間隔と破線の長さを設定\r\nconst dashInterval = 10;\r\nconst dashLength = 5;\r\nconst dashColor = 'red';\r\n\r\n// 2つの丸い点の間に破線（実線）を描画する関数\r\nfunction drawDashedLine(startX, startY, endX, endY) {\r\n  const dashedLine = new Konva.Line({\r\n    points: [startX, startY, endX, endY],\r\n    stroke: dashColor,\r\n    strokeWidth: 2,\r\n    dash: [dashLength, dashInterval],\r\n  });\r\n\r\n  return dashedLine;\r\n}\r\n\r\n\r\n\r\n\r\nconst furniturecenterInner = document.querySelector('.furniturecenter-inner');\r\nlet layer; // レイヤーをグローバル変数として定義\r\n\r\n\r\n\r\n// マウスの座標が図形の上辺、左辺、下辺、右辺のいずれかに乗っているかを判定する関数\r\nfunction isMouseOnBorder(rectangle, x, y) {\r\n  const borderSize = 5; // ボーダーと判定する幅\r\n  const outline = rectangle.getClientRect();\r\n  const centerX = outline.x + outline.width / 2;\r\n  const centerY = outline.y + outline.height / 2;\r\n\r\n  // 上辺の判定\r\n  if (x >= outline.x && x <= outline.x + outline.width &&\r\n      y >= outline.y - borderSize && y <= outline.y + borderSize) {\r\n    return 'top';\r\n  }\r\n  // 左辺の判定\r\n  if (x >= outline.x - borderSize && x <= outline.x + borderSize &&\r\n      y >= outline.y && y <= outline.y + outline.height) {\r\n    return 'left';\r\n  }\r\n  // 下辺の判定\r\n  if (x >= outline.x && x <= outline.x + outline.width &&\r\n      y >= outline.y + outline.height - borderSize && y <= outline.y + outline.height + borderSize) {\r\n    return 'bottom';\r\n  }\r\n  // 右辺の判定\r\n  if (x >= outline.x + outline.width - borderSize && x <= outline.x + outline.width + borderSize &&\r\n      y >= outline.y && y <= outline.y + outline.height) {\r\n    return 'right';\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n      // 丸い点を格納する配列\r\n      const dots = [];\r\n      let dashedLine = null; // 破線を格納する変数\r\n      let isDashedLineVisible = false; // 破線の表示状態\r\n      \r\n      // 破線の真ん中に四角を格納する変数\r\n      let midRect = null;\r\n\r\n  dots.length = 0 ;\r\n\r\n\r\n  const stage = new Konva.Stage({\r\n    container: furniturecenterInner,\r\n    width: furniturecenterInner.offsetWidth,\r\n    height: furniturecenterInner.offsetHeight,\r\n  });\r\n  \r\n  \r\n  layer = new Konva.Layer(); // グローバル変数を使うために、constをletに変更\r\n  stage.add(layer)\r\n  \r\n  let widthValue = 0;\r\n  let heightValue = 0;\r\n  \r\n  // 図形を作成\r\n  const rectangle = new Konva.Rect({\r\n    x: (furniturecenterInner.offsetWidth - widthValue) / 2, // furniturecenterInnerの中央に配置\r\n    y: (furniturecenterInner.offsetHeight - heightValue) / 2, // furniturecenterInnerの中央に配置\r\n    width: widthValue, // 適宜調整\r\n    height: heightValue, // 適宜調整\r\n    fill: '#8b4513', // 適宜調整\r\n    draggable: false,\r\n  });\r\n  \r\n  layer.add(rectangle);\r\n  layer.draw();\r\n\r\n  \r\n\r\n  const rectAngleSizeForm1 = document.createElement('input');\r\n  rectAngleSizeForm1.type = \"text\";\r\n  rectAngleSizeForm1.classList.add(\"rectAngle-SizeForm1\");\r\n  rectAngleSizeForm1.placeholder = \"家具の横幅をcm単位で入力\";\r\n  const rectAngleSizeForm2 = document.createElement('input');\r\n  rectAngleSizeForm2.type = \"text\";\r\n  rectAngleSizeForm2.classList.add(\"rectAngle-SizeForm2\");\r\n  rectAngleSizeForm2.placeholder = \"家具の縦幅をcm単位で入力\";\r\n  const rectAngleConfirm = document.createElement('button');\r\n  rectAngleConfirm.classList.add(\"rectAngle-confirm\");\r\n  rectAngleConfirm.append(\"決定\");\r\n  const div2 = document.createElement(\"div\");\r\n  div2.classList.add(\"div2\");\r\n  const div1 = document.createElement(\"div\");\r\n  div1.classList.add(\"div1\");\r\n\r\n  div2.append(rectAngleSizeForm1,rectAngleSizeForm2,rectAngleConfirm);\r\n  div1.append(div2);\r\n  furniturecenterInner.append(div1);\r\n\r\n  \r\n  \r\n  document.querySelector(\".rectAngle-confirm\").addEventListener(\"click\",handleConfirm);\r\n  \r\n  function handleConfirm(){\r\n\r\n    const size1 =document.querySelector(\".rectAngle-SizeForm1\").value;\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm2\").value;\r\n    const sizeY = Number.parseFloat(size1);\r\n    const sizeX = Number.parseFloat(size2);\r\n    const size1Num = sizeY /1.06;\r\n    const size2Num = sizeX /1.06;\r\n    console.log(size1Num)\r\n\r\n    if(Number.isNaN(size1Num) && Number.isNaN(size2Num)){\r\n     const sizeFormError = document.createElement(\"p\");\r\n     sizeFormError.classList.add(\"size-form-error\");\r\n     div2.append(sizeFormError);\r\n     document.querySelector(\".size-form-error\").textContent = \"※数値のみ入力してください※\";\r\n\r\n    } else{\r\n\r\n    widthValue = size1Num;\r\n    heightValue = size2Num;\r\n\r\n    rectangle.setAttrs({\r\n      x: (furniturecenterInner.offsetWidth - widthValue) / 2, // furniturecenterInnerの中央に配置\r\n      y: (furniturecenterInner.offsetHeight - heightValue) / 2, // furniturecenterInnerの中央に配置\r\n      width: widthValue,\r\n      height: heightValue,\r\n    });\r\n    \r\n    // レイヤーを再描画\r\n    layer.batchDraw();\r\n\r\n\r\n    const  handleClick  = __webpack_require__(/*! src/FurnitureSquareClickModule */ \"./Public/App/src/FurnitureSquareClickModule.js\");\r\n\r\n    const handleClick2 = () =>{\r\n\r\n     handleClick(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2)\r\n\r\n    };\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    document.querySelector(\".rectAngle-confirm\").removeEventListener(\"click\",handleConfirm);\r\n\r\n    while (document.querySelector(\".div1\").lastChild) {\r\n      document.querySelector(\".div1\").removeChild(document.querySelector(\".div1\").lastChild);\r\n    }\r\n\r\n    document.querySelector(\".div1\").parentNode.removeChild(document.querySelector(\".div1\"));\r\n\r\n\r\n    document.querySelector('.furniture-addbtn').addEventListener('click', furnitureAdd);\r\n    \r\n    function furnitureAdd(){\r\n\r\n      const furnitureForm = document.querySelector('.furniture-form');\r\n      const genreForm = document.querySelector('.genre-form');\r\n      const furnitureFormValue = furnitureForm.value;\r\n      const genreFormValue = genreForm.value;\r\n      const ul = document.querySelector(\".furniture-addlist\");\r\n\r\n      function isDuplicateValuePresent(value, elements) {\r\n        let isDuplicate = false;\r\n        elements.forEach(element => {\r\n          if (element.textContent.trim() === value) {\r\n            isDuplicate = true;\r\n            return;\r\n          }\r\n        });\r\n        return isDuplicate;\r\n      };\r\n\r\n  \r\n       if( furnitureFormValue === \"\"){\r\n         const furnitureFormError = document.createElement(\"p\");\r\n         furnitureFormError.classList.add(\"furniture-form-error\");\r\n         document.querySelector(\".furniturecenter-outer\").append(furnitureFormError);\r\n         document.querySelector(\".furniture-form-error\").textContent = \"※家具名を入力してください※\";\r\n       } else if(furnitureFormValue.length >= 6){\r\n        const furnitureFormError = document.createElement(\"p\");\r\n        furnitureFormError.classList.add(\"furniture-form-error\");\r\n        document.querySelector(\".furniturecenter-outer\").append(furnitureFormError);\r\n        document.querySelector(\".furniture-form-error\").textContent = \"※５文字以内で指定してください※\";\r\n       }  else if (isDuplicateValuePresent(\"家具名:\"+furnitureFormValue+\"削除\", ul.querySelectorAll(\"li\"))) {\r\n        const furnitureFormError = document.createElement(\"p\");\r\n        furnitureFormError.classList.add(\"furniture-form-error\");\r\n        document.querySelector(\".furniturecenter-outer\").append(furnitureFormError);\r\n        document.querySelector(\".furniture-form-error\").textContent = \"※この家具名は既に追加されています※\";\r\n        } else if( genreFormValue === \"\"){\r\n          const furnitureFormError = document.createElement(\"p\");\r\n          furnitureFormError.classList.add(\"furniture-form-error\");\r\n          document.querySelector(\".furniturecenter-outer\").append(furnitureFormError);\r\n          document.querySelector(\".furniture-form-error\").textContent = \"※ジャンル名を入力してください※\";\r\n        } else if(genreFormValue.length >= 6){\r\n         const furnitureFormError = document.createElement(\"p\");\r\n         furnitureFormError.classList.add(\"furniture-form-error\");\r\n         document.querySelector(\".furniturecenter-outer\").append(furnitureFormError);\r\n         document.querySelector(\".furniture-form-error\").textContent = \"※５文字以内で指定してください※\";\r\n       } else {\r\n\r\n        document.querySelector('.furniture-createbtn').style.display = \"block\";\r\n        furnitureForm.disabled = true;\r\n        genreForm.disabled = true;\r\n\r\n        const sourceLayers = stage.getLayers(); // すべてのレイヤーの配列を取得\r\n\r\n\r\n        const layerData = {\r\n          layers: [],  // レイヤーの情報を格納する配列\r\n        };\r\n        \r\n        sourceLayers.forEach(layer => {\r\n          const layerInfo = {\r\n            name: furnitureFormValue,  // レイヤーの名前を取得\r\n            children: [],      // 子要素の情報を格納する配列\r\n          };\r\n\r\n          function getShapeType(shape) {\r\n            if (shape instanceof Konva.Rect) {\r\n              return \"Rect\";\r\n            } else if (shape instanceof Konva.Line) {\r\n              return \"Line\";\r\n            } else if (shape instanceof Konva.Shape) {\r\n              return \"Shape\";\r\n            } \r\n          };\r\n          \r\n          layer.getChildren().forEach(shape => {\r\n            const shapeType = getShapeType(shape);\r\n            if (shapeType === \"Rect\") {\r\n            const rectData = {\r\n              type: shape.getType(),   // シェイプの種類（Rect、Circle など）\r\n              x: shape.x(),\r\n              y: shape.y(),\r\n              width: shape.width(),\r\n              height: shape.height(),\r\n              fill: shape.fill(),    \r\n            };\r\n            layerInfo.children.push(rectData); // 子要素の情報を配列に追加\r\n          }\r\n\r\n          if (shapeType === \"Line\") {\r\n            const lineData = {\r\n              type: shape.getType(),   // シェイプの種類（Rect、Circle など）\r\n              points: shape.points(),\r\n              stroke: shape.stroke(), // 線の色\r\n              strokeWidth: shape.strokeWidth(), // 線の太さ\r\n              closed: shape.closed(), // 閉じた形状として描画\r\n              fill: shape.fill(),    \r\n            };\r\n            layerInfo.children.push(lineData); // 子要素の情報を配列に追加\r\n          }\r\n\r\n\r\n\r\n\r\n          if (shapeType === \"Shape\") {\r\n            const shapeData = {\r\n              type: shape.getType(),\r\n              clear: shape.clear,\r\n              clearLine1 : shape.clearLine1,\r\n              clearLine2 : shape.clearLine2,\r\n              clearLine3 : shape.clearLine3,\r\n            };\r\n            layerInfo.children.push(shapeData);\r\n          }\r\n\r\n          console.log(shape.clear);\r\n            \r\n            \r\n          });\r\n        \r\n          layerData.layers.push(layerInfo); // レイヤーの情報を配列に追加\r\n        });\r\n        \r\n        \r\n\r\n\r\n  const newData = {\r\n    furnitureFormValue: furnitureFormValue,\r\n    genreFormValue: genreFormValue,\r\n    layerData: layerData,\r\n  };\r\n\r\n    // /user-data の fetch 処理\r\nfetch('/user-data2', {\r\n  method: 'POST',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  },\r\n  body: JSON.stringify(newData),\r\n})\r\n  .then(response => {\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    return response.json();\r\n  })\r\n  .then(data => {\r\n    console.log('Server response:', data);\r\n    // サーバーからのレスポンスを処理\r\n  })\r\n  .catch(error => {\r\n    console.error('Error:', error);\r\n    // エラー処理\r\n  });\r\n\r\n\r\n  fetch('/get-new-data2')\r\n  .then(response => {\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    return response.json();\r\n  })\r\n  .then(data => {\r\n    const list = document.createElement(\"li\");\r\n    list.classList.add(\"add-list3\");\r\n    const furnitureTextNode = document.createTextNode(\"家具名:\" + furnitureFormValue);\r\n    list.append(furnitureTextNode);\r\n    const deleteBtn = document.createElement(\"button\");\r\n    const trash = document.createElement(\"i\");\r\n    trash.classList.add(\"fa-solid\")\r\n    trash.classList.add(\"fa-trash-can\")\r\n    deleteBtn.append(trash);\r\n    deleteBtn.classList.add(\"deleteBtn\");\r\n    const btnBox = document.createElement(\"div\");\r\n    btnBox.classList.add(\"btn-box2\");\r\n    btnBox.append(deleteBtn);\r\n    list.append(btnBox);\r\n    document.querySelector('.furniture-addlist').append(list);\r\n  })\r\n  .catch(error => {\r\n    console.error('Error getting new data:', error);\r\n    // エラー処理\r\n  });\r\n\r\n\r\n  layer.destroy();\r\n  furnitureForm.value = \"\";\r\n  genreForm.value = \"\";\r\n  const errorElement = document.querySelector(\".furniture-form-error\");\r\n  if (errorElement && errorElement.textContent !== \"\") {\r\n      errorElement.textContent = \"\";\r\n  }  \r\n\r\n  document.querySelector('.furniture-addbtn').removeEventListener('click', furnitureAdd);\r\n\r\n       };\r\n\r\n       ul.addEventListener(\"click\", event => {\r\n        if (event.target.classList.contains(\"deleteBtn\")||event.target.classList.contains(\"fa-trash-can\")) {\r\n    \r\n          const liElement = event.target.closest(\"li\");\r\n          const text = liElement.firstChild.textContent.trim();\r\n          const parts = text.split(':'); // \"：\"(コロン)を区切り文字として文字列を分割\r\n\r\n          \r\n          console.log(parts.length); \r\n\r\n          if (parts.length === 2) {\r\n\r\n           const furnitureName = parts[1].trim(); \r\n           console.log(furnitureName); \r\n\r\n \r\n\r\n           if (liElement && ul.contains(liElement)) {\r\n            // 存在する場合、liElement を削除\r\n            ul.removeChild(liElement);\r\n          }\r\n\r\n\r\n          fetch('/user-data3', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({furnitureName}),\r\n          })\r\n            .then(response => {\r\n              if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n              }\r\n              return response.json();\r\n            })\r\n            .then(data => {\r\n              console.log('Server response:', data);\r\n              // サーバーからのレスポンスを処理\r\n            })\r\n            .catch(error => {\r\n              console.error('Error:', error);\r\n              // エラー処理\r\n            });\r\n\r\n          };\r\n      \r\n          } \r\n      });\r\n\r\n    };\r\n\r\n    document.querySelector('.furniture-compbtn').addEventListener('click', furnitureComp);\r\n    \r\n    function furnitureComp(){\r\n\r\n      const ul = document.querySelector('.furniture-addlist'); // あなたのul要素の適切なセレクタを使用して取得します\r\n      const liElements = ul.querySelectorAll('li');\r\n\r\n      if (liElements.length > 0) {\r\n\r\n        fetch('/user-data4', {\r\n          method: 'POST', // または 'GET' など、HTTPメソッドを選択\r\n        })\r\n          .then(response => {\r\n            if (!response.ok) {\r\n              throw new Error('Network response was not ok');\r\n            }\r\n            return response.json();\r\n          })\r\n          .then(data => {\r\n            console.log('Server response:', data);\r\n            // サーバーからのレスポンスを処理\r\n            const ul = document.querySelector('.furniture-list');\r\n            ul.innerHTML = ''; // リストをクリア\r\n        \r\n            data.forEach(furnitureFormValues => {\r\n              const li = document.createElement('li');\r\n              li.textContent = furnitureFormValues;\r\n              li.classList.add(\"add-list2\");\r\n              const addBtn = document.createElement(\"button\");\r\n              addBtn.append(\"追加\");\r\n              addBtn.classList.add(\"addBtn\");\r\n              const cancelBtn = document.createElement(\"button\");\r\n              cancelBtn.append(\"取消\");\r\n              cancelBtn.classList.add(\"cancelBtn\");\r\n              const editBtn = document.createElement(\"button\");\r\n              const trash = document.createElement(\"i\");\r\n              trash.classList.add(\"fa-solid\")\r\n              trash.classList.add(\"fa-trash-can\")\r\n              editBtn.append(trash);\r\n              editBtn.classList.add(\"editBtn\");\r\n              const btnBox = document.createElement(\"div\");\r\n              btnBox.classList.add(\"btn-box\");\r\n              btnBox.append(addBtn,cancelBtn,editBtn);\r\n              li.append(btnBox);\r\n              ul.appendChild(li);\r\n            });\r\n\r\n            while (document.querySelector('.furniture-addlist').firstChild) {\r\n              document.querySelector('.furniture-addlist').removeChild(document.querySelector('.furniture-addlist').firstChild);\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('Error:', error);\r\n            // エラー処理\r\n          });\r\n\r\n          fetch('/user-data5', {\r\n            method: 'POST', \r\n          })\r\n            .then(response => {\r\n              if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n              }\r\n              return response.json();\r\n            })\r\n            .then(data => {\r\n              console.log('Server response:', data);\r\n              // サーバーからのレスポンスを処理\r\n              const ol = document.querySelector('.genre-dropdown');\r\n              ol.innerHTML = ''; // リストをクリア\r\n          \r\n              // データから重複を削除\r\n              const uniqueGenreFormValues = [...new Set(data)];\r\n\r\n              \r\n              uniqueGenreFormValues.forEach(genreFormValue => {\r\n               const li = document.createElement('li');\r\n               const label = document.createElement('label');\r\n               label.classList.add(\"li-label\");\r\n               label.textContent = genreFormValue;\r\n               const check = document.createElement(\"input\");\r\n               check.type = \"checkbox\";\r\n               check.name = \"check\";\r\n               li.append(check, label);\r\n               ol.appendChild(li);\r\n              });\r\n\r\n\r\n              let check = document.querySelectorAll('[name=check]');\r\n              const genreDropdown = document.querySelector('.genre-dropdown');\r\n              \r\n              genreDropdown.addEventListener('click', function (event) {\r\n                  const target = event.target.closest('li');\r\n                  \r\n                  if (target) {\r\n                      const checkbox = target.querySelector('[name=\"check\"]');\r\n                      \r\n                      if (checkbox) {\r\n                          if (checkbox.checked) {\r\n                            if (target.textContent === \"全て表示\") {\r\n                              fetch('/user-data7', {\r\n                                method: 'POST', \r\n                              })\r\n                                .then(response => {\r\n                                  if (!response.ok) {\r\n                                    throw new Error('Network response was not ok');\r\n                                  }\r\n                                  return response.json();\r\n                                })\r\n                                .then(data => {\r\n\r\n                                  setTimeout(() => {\r\n\r\n                                  const ul = document.querySelector('.furniture-list');\r\n                                 \r\n                                  console.log(data);\r\n                                  // dataをulに追加\r\n                                  data.forEach(item => {\r\n                                    \r\n                                    const newlist = document.createElement('li');\r\n                                    newlist.textContent = item;\r\n                                    newlist.classList.add(\"add-list2\");\r\n                                    const addBtn = document.createElement(\"button\");\r\n                                    addBtn.append(\"追加\");\r\n                                    addBtn.classList.add(\"addBtn\");\r\n                                    const cancelBtn = document.createElement(\"button\");\r\n                                    cancelBtn.append(\"取消\");\r\n                                    cancelBtn.classList.add(\"cancelBtn\");\r\n                                    const editBtn = document.createElement(\"button\");\r\n                                    const trash = document.createElement(\"i\");\r\n                                    trash.classList.add(\"fa-solid\")\r\n                                    trash.classList.add(\"fa-trash-can\")\r\n                                    editBtn.append(trash);\r\n                                    editBtn.classList.add(\"editBtn\");\r\n                                    const btnBox = document.createElement(\"div\");\r\n                                    btnBox.classList.add(\"btn-box\");\r\n                                    btnBox.append(addBtn,cancelBtn,editBtn);\r\n                                    newlist.append(btnBox);\r\n                                    ul.appendChild(newlist);\r\n                                  });\r\n                                },350);\r\n                                });\r\n\r\n                            };\r\n                              check.forEach((checkbox) => {\r\n                                  checkbox.checked = false;\r\n                              });\r\n                              checkbox.checked = true;\r\n                              const checkText = target.textContent;\r\n                              setTimeout(() => {\r\n                                  genreDropdown.classList.remove('is-open');\r\n                                  document.querySelector('.caret-down').innerHTML = '<i class=\"fa-solid fa-caret-down\"></i>';\r\n                                  target.remove();\r\n              \r\n                                  const genreText = document.querySelector('.genre-checktext').textContent;\r\n                                  document.querySelector('.genre-checktext').textContent = '';\r\n                                  document.querySelector('.genre-checktext').textContent = checkText;\r\n              \r\n                                  const list = document.createElement('li');\r\n                                  const label = document.createElement('label');\r\n                                  label.classList.add('li-label');\r\n                                  label.textContent = genreText;\r\n                                  const newCheckbox = document.createElement('input');\r\n                                  newCheckbox.type = 'checkbox';\r\n                                  newCheckbox.name = 'check';\r\n                                  list.append(newCheckbox, label);\r\n                                  ol.appendChild(list);\r\n              \r\n                                  check = document.querySelectorAll('[name=check]');\r\n\r\n                                  fetch('/user-data6', {\r\n                                    method: 'POST',\r\n                                    headers: {\r\n                                        'Content-Type': 'application/json',\r\n                                    },\r\n                                    body: JSON.stringify({ checkText }),\r\n                                })\r\n                                .then(response => response.json())\r\n                                .then(data => {\r\n                                    const ul = document.querySelector('.furniture-list');\r\n                                    ul.innerHTML = ''; \r\n                                    \r\n                                    // dataをulに追加\r\n                                    data.forEach(item => {\r\n                                      \r\n                                      const newlist = document.createElement('li');\r\n                                      newlist.textContent = item;\r\n                                      newlist.classList.add(\"add-list2\");\r\n                                      const addBtn = document.createElement(\"button\");\r\n                                      addBtn.append(\"追加\");\r\n                                      addBtn.classList.add(\"addBtn\");\r\n                                      const cancelBtn = document.createElement(\"button\");\r\n                                      cancelBtn.append(\"取消\");\r\n                                      cancelBtn.classList.add(\"cancelBtn\");\r\n                                      const editBtn = document.createElement(\"button\");\r\n                                      const trash = document.createElement(\"i\");\r\n                                      trash.classList.add(\"fa-solid\")\r\n                                      trash.classList.add(\"fa-trash-can\")\r\n                                      editBtn.append(trash);\r\n                                      editBtn.classList.add(\"editBtn\");\r\n                                      const btnBox = document.createElement(\"div\");\r\n                                      btnBox.classList.add(\"btn-box\");\r\n                                      btnBox.append(addBtn,cancelBtn,editBtn);\r\n                                      newlist.append(btnBox);\r\n                                      ul.appendChild(newlist);\r\n                                    });\r\n                                })\r\n                                .catch(error => {\r\n                                    console.error('Error:', error);\r\n                                });\r\n                              }, 300);\r\n                          }\r\n                      }\r\n                  }\r\n              });\r\n              \r\n            })\r\n            .catch(error => {\r\n              console.error('Error:', error);\r\n              // エラー処理\r\n            });\r\n        \r\n        \r\n        \r\n\r\n          \r\n\r\n \r\n      } else {\r\n        const furnitureFormError = document.createElement(\"p\");\r\n        furnitureFormError.classList.add(\"furniture-form-error\");\r\n        document.querySelector(\".furniturecenter-outer\").append(furnitureFormError);\r\n        document.querySelector(\".furniture-form-error\").textContent = \"※家具を追加後に保存をクリックしてください※\";\r\n      \r\n      }\r\n\r\n    };\r\n\r\n\r\n  \r\n   \r\n    }\r\n  \r\n\r\n  };\r\n\r\n};\r\n\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureCreateModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureFirstBottomNextLeftPointsModule.js":
/*!********************************************************************!*\
  !*** ./Public/App/src/FurnitureFirstBottomNextLeftPointsModule.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstBottomNextLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm10,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n   \r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n    \r\n\r\n      const customShape = new Konva.Shape({\r\n\r\n        sceneFunc: function (context, shape) {\r\n      \r\n\r\n          const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n          const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n          const clearLine1 = [x1-1, y1];\r\n          const clearLine2 = [x2, y2+1];\r\n          const clearLine3 = [x3-1, y3+1];\r\n\r\n          context.beginPath();\r\n          context.moveTo(...clearLine1);\r\n          context.lineTo(...clearLine2);\r\n          context.lineTo(...clearLine3);\r\n          context.closePath();\r\n      \r\n          // 三角形のパスをクリアする\r\n          context.globalCompositeOperation = 'destination-out';\r\n          context.fill();\r\n          context.globalCompositeOperation = 'source-over';\r\n      \r\n          shape.clearLine1 = clearLine1;\r\n          shape.clearLine2 = clearLine2;\r\n          shape.clearLine3 = clearLine3;\r\n      \r\n        },\r\n      \r\n        \r\n      });\r\n      \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     \r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1-1, y1];\r\n        const clearLine2 = [x2, y2+1];\r\n        const clearLine3 = [x3-1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1-1, y1];\r\n        const clearLine2 = [x2, y2+1];\r\n        const clearLine3 = [x3-1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1-1, y1];\r\n        const clearLine2 = [x2, y2+1];\r\n        const clearLine3 = [x3-1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n\r\n\r\n  };\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureFirstBottomNextLeftPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureFirstBottomNextRightPointsModule.js":
/*!*********************************************************************!*\
  !*** ./Public/App/src/FurnitureFirstBottomNextRightPointsModule.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstBottomNextRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm9,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    console.log(\"B\")\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else {\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n   \r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2+1];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2+1];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2+1];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2+1];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n\r\n\r\n  };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureFirstBottomNextRightPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureFirstLeftNextBottomPointsModule.js":
/*!********************************************************************!*\
  !*** ./Public/App/src/FurnitureFirstLeftNextBottomPointsModule.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstLeftNextBottomPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm10,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else {\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n   \r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else {\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n\r\n\r\n  };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureFirstLeftNextBottomPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureFirstLeftNextTopPointsModule.js":
/*!*****************************************************************!*\
  !*** ./Public/App/src/FurnitureFirstLeftNextTopPointsModule.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstLeftNextTopPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm8,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else {\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n\r\n  };\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureFirstLeftNextTopPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureFirstRightNextBottomPointsModule.js":
/*!*********************************************************************!*\
  !*** ./Public/App/src/FurnitureFirstRightNextBottomPointsModule.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstRightNextBottomPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm9,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n    console.log(\"A\")\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else {\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n   \r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n\r\n\r\n  };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureFirstRightNextBottomPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureFirstRightNextTopPointsModule.js":
/*!******************************************************************!*\
  !*** ./Public/App/src/FurnitureFirstRightNextTopPointsModule.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstRightNextTopPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm7,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n\r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else {\r\n     \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else {\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else {\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n  };\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n\r\n  };\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureFirstRightNextTopPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureFirstTopNextLeftPointsModule.js":
/*!*****************************************************************!*\
  !*** ./Public/App/src/FurnitureFirstTopNextLeftPointsModule.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstTopNextLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm8,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else {\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   dashedLine.destroy();\r\n\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1-1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     midRect.destroy();\r\n    \r\n\r\n  \r\n     dots.length = 0 ;\r\n \r\n\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else {\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1-1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1-1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1-1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n\r\n\r\n  };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureFirstTopNextLeftPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureFirstTopNextRightPointsModule.js":
/*!******************************************************************!*\
  !*** ./Public/App/src/FurnitureFirstTopNextRightPointsModule.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstTopNextRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm7,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else {\r\n     \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n\r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else {\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else {\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n  };\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureFirstTopNextRightPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureLeftBottomCheckSquareModule.js":
/*!****************************************************************!*\
  !*** ./Public/App/src/FurnitureLeftBottomCheckSquareModule.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function leftBottomCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle1.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n        const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n        const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    \r\n        const clear = [minX-1, minY, maxX - minX, maxY - minY];\r\n    \r\n        console.log(clear);\r\n    \r\n        context.clearRect(...clear);\r\n    \r\n        shape.clear = clear;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle1.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#8b4513', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#8b4513', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureLeftBottomCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureLeftBottomCheckTriangleModule.js":
/*!******************************************************************!*\
  !*** ./Public/App/src/FurnitureLeftBottomCheckTriangleModule.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function leftBottomCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n      function handleConfirm13(){\r\n\r\n        const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1-1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3-1, y3];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n\r\n      circle1.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n      dashedLine7.destroy();\r\n      dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n     \r\n     function handleConfirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1-1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3-1, y3];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1-1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3-1, y3];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#8b4513', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#8b4513', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle1.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n    };\r\n\r\n  };\r\n  \r\n\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureLeftBottomCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureLeftBottomLengthModule.js":
/*!***********************************************************!*\
  !*** ./Public/App/src/FurnitureLeftBottomLengthModule.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function leftBottomLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm5){\r\n\r\n  if(Number.isNaN(size3Num)){\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";\r\n   } else {\r\n\r\n// 長さを格納する変数\r\nlet length2 = size3Num; \r\n\r\ncircle2.destroy();\r\nmidRect.destroy();\r\ndashedLine5.destroy();\r\n\r\n// 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\nconst newRightCircleX = rectangle.y() + rectangle.height() - length2;\r\n\r\n// 右の丸い点の座標を更新\r\ncircle1.y(newRightCircleX);\r\nlayer.draw();\r\n\r\n\r\n // 丸い点の座標を取得\r\n const x = circle1.x();\r\n const y = circle1.y();\r\n\r\n // 破線を作成\r\n const dashedLine6 = new Konva.Line({\r\n   points: [x, y, x , y - length], // 例としてX座標から100ピクセル右に破線を表示\r\n   stroke: 'red',\r\n   strokeWidth: 2,\r\n   lineCap: 'round',\r\n   dash: [5, 10],\r\n });\r\n\r\n // 新しい丸い点を作成\r\n const newCircle = new Konva.Circle({\r\n   x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n   y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n   radius: 5,\r\n   fill: 'red',\r\n });\r\n\r\n const x2 = newCircle.x();\r\n const y2 = newCircle.y();\r\n\r\n const newRectX = (x + x2) / 2;\r\n const newRectY = (y + y2) / 2;\r\n const newRect = new Konva.Rect({\r\n   x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n   y: newRectY - 5,\r\n   width: 10,\r\n   height: 10,\r\n   fill: 'red',\r\n });\r\n\r\n layer.add(dashedLine6);\r\n layer.add(newCircle); \r\n layer.add(newRect);\r\n layer.draw();\r\n\r\n\r\n\r\nconst paturnText = document.createElement('p');\r\npaturnText.classList.add(\"paturn-text\");\r\n\r\nconst check1 = document.createElement('input');\r\ncheck1.type = \"checkbox\";\r\ncheck1.classList.add(\"check1\");\r\ncheck1.name = \"check\";\r\n\r\nconst check2 = document.createElement('input');\r\ncheck2.type = \"checkbox\";\r\ncheck2.classList.add(\"check2\");\r\ncheck2.name = \"check\";\r\n\r\nconst paturn1 = document.createElement('img');\r\npaturn1.src = \"/images/paturn1.png\";\r\npaturn1.classList.add(\"paturn1\");\r\n\r\nconst paturn2 = document.createElement('img');\r\npaturn2.src = \"/images/paturn2.png\";\r\npaturn2.classList.add(\"paturn2\");\r\n\r\nconst rectAngleSizeForm28 = document.createElement('input');\r\nrectAngleSizeForm28.type = \"text\";\r\nrectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\nrectAngleSizeForm28.placeholder = \"右方向に縮める長さを入力\";\r\n\r\nconst rectAngleSizeForm29 = document.createElement('input');\r\nrectAngleSizeForm29.type = \"text\";\r\nrectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\nrectAngleSizeForm29.placeholder = \"左方向に伸ばす長さを入力\";\r\n\r\nconst rectAngleConfirm11 = document.createElement('button');\r\nrectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\nrectAngleConfirm11.append(\"決定\");\r\n\r\nconst div22 = document.createElement(\"div\");\r\ndiv22.classList.add(\"div22\");\r\n\r\nconst div21 = document.createElement(\"div\");\r\ndiv21.classList.add(\"div21\");\r\n\r\nconst note13 = document.createElement(\"p\");\r\nnote13.classList.add(\"note13\");\r\n\r\ndiv22.append(note13);\r\ndiv22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\ndiv21.append(div22);\r\nfurniturecenterInner.append(div21);\r\n\r\ndocument.querySelector(\".note13\").textContent = \"右方向または左方向のどちらかを入力してください\";\r\ndocument.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\nconst check = document.querySelectorAll(\"[name=check\");\r\nfor(let i = 0; i < 2; i++){\r\ncheck[i].addEventListener(\"click\",function(){\r\n  const currentItem = this;\r\n  if(currentItem.checked){\r\n    check[0].checked = false;\r\n    check[1].checked = false;\r\n    currentItem.checked = true;\r\n  };\r\n});\r\n};\r\n\r\ndocument.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\ndocument.querySelector(\".rectAngle-confirm5\").removeEventListener(\"click\",handleConfirm5);\r\n\r\n\r\n\r\nwhile (document.querySelector(\".div9\").lastChild) {\r\n  document.querySelector(\".div9\").removeChild(document.querySelector(\".div9\").lastChild);\r\n  console.log(\"while\");\r\n }\r\n\r\n document.querySelector(\".div9\").parentNode.removeChild(document.querySelector(\".div9\"));\r\n\r\n  \r\n function handleConfirm11(){\r\n\r\nif(check[0].checked){\r\n\r\n  const  leftBottomCheckTriangle  = __webpack_require__(/*! src/FurnitureLeftBottomCheckTriangleModule */ \"./Public/App/src/FurnitureLeftBottomCheckTriangleModule.js\");\r\n  const leftBottomCheckTriangle2 = () =>{\r\n\r\n    leftBottomCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5)\r\n\r\n  };\r\n\r\n  leftBottomCheckTriangle2();\r\n\r\n\r\n}else if(check[1].checked){\r\n\r\n  const  leftBottomCheckSquare  = __webpack_require__(/*! src/FurnitureLeftBottomCheckSquareModule */ \"./Public/App/src/FurnitureLeftBottomCheckSquareModule.js\");\r\n  const leftBottomCheckSquare2 = () =>{\r\n\r\n    leftBottomCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5)\r\n\r\n  };\r\n\r\n  leftBottomCheckSquare2();\r\n\r\n\r\n\r\n}else{\r\n\r\n  const sizeFormError7 = document.createElement(\"p\");\r\n  sizeFormError7.classList.add(\"size-form-error7\");\r\n  div22.append(sizeFormError7);\r\n  document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n}\r\n\r\n};\r\n\r\n};\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureLeftBottomLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureLeftTopCheckSquareModule.js":
/*!*************************************************************!*\
  !*** ./Public/App/src/FurnitureLeftTopCheckSquareModule.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function leftTopCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle2.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n        const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n        const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    \r\n        const clear = [minX-1, minY, maxX - minX, maxY - minY];\r\n    \r\n        console.log(clear);\r\n    \r\n        context.clearRect(...clear);\r\n    \r\n        shape.clear = clear;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle2.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#8b4513', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#8b4513', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n    };\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureLeftTopCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureLeftTopCheckTriangleModule.js":
/*!***************************************************************!*\
  !*** ./Public/App/src/FurnitureLeftTopCheckTriangleModule.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function leftTopCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n      function handleConfirm13(){\r\n\r\n        const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1-1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3-1, y3];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n      dashedLine7.destroy();\r\n      dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n     \r\n     function handleConfirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1-1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3-1, y3];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1-1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3-1, y3];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#8b4513', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#8b4513', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n\r\n        };\r\n       };\r\n\r\n     };\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureLeftTopCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureLeftTopLengthModule.js":
/*!********************************************************!*\
  !*** ./Public/App/src/FurnitureLeftTopLengthModule.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function leftTopLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm5){\r\n\r\n  if(Number.isNaN(size2Num)){\r\n\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError3);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n   } else{\r\n     console.log(\"A\");\r\n\r\n  // 長さを格納する変数\r\n  let length2 = size2Num; \r\n\r\n  circle1.destroy();\r\n  midRect.destroy();\r\n  dashedLine5.destroy();\r\n\r\n  // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n  const newRightCircleX = rectangle.y() + length2;\r\n\r\n  // 右の丸い点の座標を更新\r\n  circle2.y(newRightCircleX);\r\n  layer.draw();\r\n\r\n  \r\n    // 丸い点の座標を取得\r\n    const x = circle2.x();\r\n    const y = circle2.y();\r\n\r\n    // 破線を作成\r\n    const dashedLine6 = new Konva.Line({\r\n      points: [x, y, x , y + length], // 例としてX座標から100ピクセル右に破線を表示\r\n      stroke: 'red',\r\n      strokeWidth: 2,\r\n      lineCap: 'round',\r\n      dash: [5, 10],\r\n    });\r\n\r\n    // 新しい丸い点を作成\r\n    const newCircle = new Konva.Circle({\r\n      x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n      y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n      radius: 5,\r\n      fill: 'red',\r\n    });\r\n\r\n    const x2 = newCircle.x();\r\n    const y2 = newCircle.y();\r\n\r\n    const newRectX = (x + x2) / 2;\r\n    const newRectY = (y + y2) / 2;\r\n    const newRect = new Konva.Rect({\r\n      x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n      y: newRectY - 5,\r\n      width: 10,\r\n      height: 10,\r\n      fill: 'red',\r\n    });\r\n\r\n    layer.add(dashedLine6);\r\n    layer.add(newCircle); \r\n    layer.add(newRect);\r\n    layer.draw();\r\n \r\n\r\n const paturnText = document.createElement('p');\r\n paturnText.classList.add(\"paturn-text\");\r\n\r\n const check1 = document.createElement('input');\r\n check1.type = \"checkbox\";\r\n check1.classList.add(\"check1\");\r\n check1.name = \"check\";\r\n\r\n const check2 = document.createElement('input');\r\n check2.type = \"checkbox\";\r\n check2.classList.add(\"check2\");\r\n check2.name = \"check\";\r\n\r\n const paturn1 = document.createElement('img');\r\n paturn1.src = \"/images/paturn1.png\";\r\n paturn1.classList.add(\"paturn1\");\r\n\r\n const paturn2 = document.createElement('img');\r\n paturn2.src = \"/images/paturn2.png\";\r\n paturn2.classList.add(\"paturn2\");\r\n\r\n const rectAngleSizeForm28 = document.createElement('input');\r\n rectAngleSizeForm28.type = \"text\";\r\n rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n rectAngleSizeForm28.placeholder = \"右方向に縮める長さを入力\";\r\n\r\n const rectAngleSizeForm29 = document.createElement('input');\r\n rectAngleSizeForm29.type = \"text\";\r\n rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n rectAngleSizeForm29.placeholder = \"左方向に伸ばす長さを入力\";\r\n\r\n const rectAngleConfirm11 = document.createElement('button');\r\n rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n rectAngleConfirm11.append(\"決定\");\r\n\r\n const div22 = document.createElement(\"div\");\r\n div22.classList.add(\"div22\");\r\n\r\n const div21 = document.createElement(\"div\");\r\n div21.classList.add(\"div21\");\r\n\r\n const note13 = document.createElement(\"p\");\r\n note13.classList.add(\"note13\");\r\n\r\n div22.append(note13);\r\n div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n div21.append(div22);\r\n furniturecenterInner.append(div21);\r\n\r\n document.querySelector(\".note13\").textContent = \"右方向または左方向のどちらかを入力してください\";\r\n document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n const check = document.querySelectorAll(\"[name=check\");\r\n for(let i = 0; i < 2; i++){\r\n   check[i].addEventListener(\"click\",function(){\r\n     const currentItem = this;\r\n     if(currentItem.checked){\r\n       check[0].checked = false;\r\n       check[1].checked = false;\r\n       currentItem.checked = true;\r\n     };\r\n   });\r\n };\r\n\r\n document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\n document.querySelector(\".rectAngle-confirm5\").removeEventListener(\"click\",handleConfirm5);\r\n\r\n\r\n\r\n while (document.querySelector(\".div9\").lastChild) {\r\n   document.querySelector(\".div9\").removeChild(document.querySelector(\".div9\").lastChild);\r\n   console.log(\"while\");\r\n  }\r\n\r\n  document.querySelector(\".div9\").parentNode.removeChild(document.querySelector(\".div9\"));\r\n\r\n\r\n  function handleConfirm11(){\r\n\r\n   if(check[0].checked){\r\n\r\n    const  leftTopCheckTriangle  = __webpack_require__(/*! src/FurnitureLeftTopCheckTriangleModule */ \"./Public/App/src/FurnitureLeftTopCheckTriangleModule.js\");\r\n    const leftTopCheckTriangle2 = () =>{\r\n\r\n      leftTopCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5)\r\n\r\n    };\r\n\r\n    leftTopCheckTriangle2();\r\n\r\n\r\n\r\n   }else if(check[1].checked){\r\n\r\n    const  leftTopCheckSquare  = __webpack_require__(/*! src/FurnitureLeftTopCheckSquareModule */ \"./Public/App/src/FurnitureLeftTopCheckSquareModule.js\");\r\n    const leftTopCheckSquare2 = () =>{\r\n\r\n      leftTopCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5)\r\n\r\n    };\r\n\r\n    leftTopCheckSquare2();\r\n\r\n\r\n\r\n   }else{\r\n\r\n     const sizeFormError7 = document.createElement(\"p\");\r\n     sizeFormError7.classList.add(\"size-form-error7\");\r\n     div22.append(sizeFormError7);\r\n     document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n   }\r\n\r\n };\r\n};\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureLeftTopLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureLeftTwoPointsModule.js":
/*!********************************************************!*\
  !*** ./Public/App/src/FurnitureLeftTwoPointsModule.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function leftTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length){\r\n\r\n  const rectAngleSizeForm8 = document.createElement('input');\r\n  rectAngleSizeForm8.type = \"text\";\r\n  rectAngleSizeForm8.classList.add(\"rectAngle-SizeForm8\");\r\n  rectAngleSizeForm8.placeholder = \"上端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm9 = document.createElement('input');\r\n  rectAngleSizeForm9.type = \"text\";\r\n  rectAngleSizeForm9.classList.add(\"rectAngle-SizeForm9\");\r\n  rectAngleSizeForm9.placeholder = \"下端からの長さを入力\";\r\n\r\n  const rectAngleConfirm5 = document.createElement('button');\r\n  rectAngleConfirm5.classList.add(\"rectAngle-confirm5\");\r\n  rectAngleConfirm5.append(\"決定\");\r\n\r\n  const div10 = document.createElement(\"div\");\r\n  div10.classList.add(\"div10\");\r\n\r\n  const div9 = document.createElement(\"div\");\r\n  div9.classList.add(\"div9\");\r\n\r\n  const note3 = document.createElement(\"p\");\r\n  note3.classList.add(\"note3\");\r\n\r\n  div10.append(note3);\r\n  div10.append(rectAngleSizeForm8,rectAngleSizeForm9,rectAngleConfirm5);\r\n\r\n  div9.append(div10);\r\n  furniturecenterInner.append(div9);\r\n\r\n  document.querySelector(\".note3\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n\r\n  // 四角の中心座標を取得\r\n  const midRectX = midRect.x() + midRect.width() / 2;\r\n  const midRectY = midRect.y() + midRect.height() / 2;\r\n\r\n   // 縦破線を描画する座標を計算\r\n   const dashedLineX1 = midRectX;\r\n   const dashedLineY1 = midRectY - length / 2;\r\n   const dashedLineX2 = midRectX;\r\n   const dashedLineY2 = midRectY + length / 2;\r\n\r\n  // 破線を作成\r\n  const dashedLine5 = new Konva.Line({\r\n    points: [dashedLineX1, dashedLineY1, dashedLineX2, dashedLineY2],\r\n    stroke: 'red',\r\n    strokeWidth: 2,\r\n    dash: [5, 10], // 破線のパターンを指定（length変数の値を使用）\r\n  });\r\n\r\n  // 丸い点を作成\r\n  const circle1 = new Konva.Circle({\r\n    x: dashedLineX1,\r\n    y: dashedLineY1,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  const circle2 = new Konva.Circle({\r\n    x: dashedLineX2,\r\n    y: dashedLineY2,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  // レイヤーに追加\r\n  layer.add(dashedLine5, circle1, circle2, midRect);\r\n  stage.add(layer);\r\n\r\n  document.querySelector(\".rectAngle-confirm5\").addEventListener(\"click\",handleConfirm5);\r\n\r\n  document.querySelector(\".rectAngle-confirm2\").removeEventListener(\"click\",handleConfirm2);\r\n      \r\n  while (document.querySelector(\".div3\").lastChild) {\r\n    document.querySelector(\".div3\").removeChild(document.querySelector(\".div3\").lastChild);\r\n    console.log(\"while0\");\r\n\r\n   }\r\n\r\n   document.querySelector(\".div3\").parentNode.removeChild(document.querySelector(\".div3\"));\r\n\r\n   function handleConfirm5(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm8\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm9\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    \r\n    \r\n    if(size2 !== \"\" && size3 === \"\"){\r\n\r\n      const  leftTopLength  = __webpack_require__(/*! src/FurnitureLeftTopLengthModule */ \"./Public/App/src/FurnitureLeftTopLengthModule.js\");\r\n      const leftTopLength2 = () =>{\r\n  \r\n        leftTopLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm5)\r\n  \r\n      };\r\n  \r\n      leftTopLength2();\r\n\r\n\r\n    } else if(size3 !== \"\" && size2 === \"\"){\r\n\r\n      const  leftBottomLength  = __webpack_require__(/*! src/FurnitureLeftBottomLengthModule */ \"./Public/App/src/FurnitureLeftBottomLengthModule.js\");\r\n      const leftBottomLength2 = () =>{\r\n  \r\n        leftBottomLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm5)\r\n  \r\n      };\r\n  \r\n      leftBottomLength2();\r\n\r\n\r\n    };  \r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureLeftTwoPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureRightBottomCheckSquareModule.js":
/*!*****************************************************************!*\
  !*** ./Public/App/src/FurnitureRightBottomCheckSquareModule.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("module.exports = function rightBottomCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle1.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#8b4513', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#8b4513', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle1.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n        const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n        const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    \r\n        const clear = [minX+1, minY, maxX - minX, maxY - minY];\r\n    \r\n        console.log(clear);\r\n    \r\n        context.clearRect(...clear);\r\n    \r\n        shape.clear = clear;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureRightBottomCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureRightBottomCheckTriangleModule.js":
/*!*******************************************************************!*\
  !*** ./Public/App/src/FurnitureRightBottomCheckTriangleModule.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function rightBottomCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n      function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#8b4513', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#8b4513', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle1.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n     \r\n     function handleConfirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n\r\n        };\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n\r\n        };\r\n       };\r\n\r\n     };\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const customShape = new Konva.Shape({\r\n\r\n        sceneFunc: function (context, shape) {\r\n      \r\n          const x1 = circleX1; // 三角形の頂点1の X 座標\r\n          const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n          const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n          const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n          const x3 = circleX2; // 三角形の頂点3の X 座標\r\n          const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n          const clearLine1 = [x1+1, y1];\r\n          const clearLine2 = [x2, y2];\r\n          const clearLine3 = [x3+1, y3];\r\n\r\n          context.beginPath();\r\n          context.moveTo(...clearLine1);\r\n          context.lineTo(...clearLine2);\r\n          context.lineTo(...clearLine3);\r\n          context.closePath();\r\n      \r\n          // 三角形のパスをクリアする\r\n          context.globalCompositeOperation = 'destination-out';\r\n          context.fill();\r\n          context.globalCompositeOperation = 'source-over';\r\n      \r\n          shape.clearLine1 = clearLine1;\r\n          shape.clearLine2 = clearLine2;\r\n          shape.clearLine3 = clearLine3;\r\n      \r\n        },\r\n      \r\n        \r\n      });\r\n      \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n      circle1.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n      dashedLine7.destroy();\r\n      dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else {\r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1+1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3+1, y3];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1+1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3+1, y3];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureRightBottomCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureRightBottomLengthModule.js":
/*!************************************************************!*\
  !*** ./Public/App/src/FurnitureRightBottomLengthModule.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function rightBottomLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm4){\r\n\r\n  if(Number.isNaN(size3Num)){\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";\r\n   } else {\r\n\r\n// 長さを格納する変数\r\nlet length2 = size3Num; \r\n\r\ncircle2.destroy();\r\nmidRect.destroy();\r\ndashedLine5.destroy();\r\n\r\n// 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\nconst newRightCircleX = rectangle.y() + rectangle.height() - length2;\r\n\r\n// 右の丸い点の座標を更新\r\ncircle1.y(newRightCircleX);\r\nlayer.draw();\r\n\r\n\r\n // 丸い点の座標を取得\r\n const x = circle1.x();\r\n const y = circle1.y();\r\n\r\n // 破線を作成\r\n const dashedLine6 = new Konva.Line({\r\n   points: [x, y, x , y - length], // 例としてX座標から100ピクセル右に破線を表示\r\n   stroke: 'red',\r\n   strokeWidth: 2,\r\n   lineCap: 'round',\r\n   dash: [5, 10],\r\n });\r\n\r\n // 新しい丸い点を作成\r\n const newCircle = new Konva.Circle({\r\n   x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n   y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n   radius: 5,\r\n   fill: 'red',\r\n });\r\n\r\n const x2 = newCircle.x();\r\n const y2 = newCircle.y();\r\n\r\n const newRectX = (x + x2) / 2;\r\n const newRectY = (y + y2) / 2;\r\n const newRect = new Konva.Rect({\r\n   x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n   y: newRectY - 5,\r\n   width: 10,\r\n   height: 10,\r\n   fill: 'red',\r\n });\r\n\r\n layer.add(dashedLine6);\r\n layer.add(newCircle); \r\n layer.add(newRect);\r\n layer.draw();\r\n\r\n\r\nconst paturnText = document.createElement('p');\r\npaturnText.classList.add(\"paturn-text\");\r\n\r\nconst check1 = document.createElement('input');\r\ncheck1.type = \"checkbox\";\r\ncheck1.classList.add(\"check1\");\r\ncheck1.name = \"check\";\r\n\r\nconst check2 = document.createElement('input');\r\ncheck2.type = \"checkbox\";\r\ncheck2.classList.add(\"check2\");\r\ncheck2.name = \"check\";\r\n\r\nconst paturn1 = document.createElement('img');\r\npaturn1.src = \"/images/paturn1.png\";\r\npaturn1.classList.add(\"paturn1\");\r\n\r\nconst paturn2 = document.createElement('img');\r\npaturn2.src = \"/images/paturn2.png\";\r\npaturn2.classList.add(\"paturn2\");\r\n\r\nconst rectAngleSizeForm28 = document.createElement('input');\r\nrectAngleSizeForm28.type = \"text\";\r\nrectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\nrectAngleSizeForm28.placeholder = \"右方向に伸ばす長さを入力\";\r\n\r\nconst rectAngleSizeForm29 = document.createElement('input');\r\nrectAngleSizeForm29.type = \"text\";\r\nrectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\nrectAngleSizeForm29.placeholder = \"左方向に縮める長さを入力\";\r\n\r\nconst rectAngleConfirm11 = document.createElement('button');\r\nrectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\nrectAngleConfirm11.append(\"決定\");\r\n\r\nconst div22 = document.createElement(\"div\");\r\ndiv22.classList.add(\"div22\");\r\n\r\nconst div21 = document.createElement(\"div\");\r\ndiv21.classList.add(\"div21\");\r\n\r\nconst note13 = document.createElement(\"p\");\r\nnote13.classList.add(\"note13\");\r\n\r\ndiv22.append(note13);\r\ndiv22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\ndiv21.append(div22);\r\nfurniturecenterInner.append(div21);\r\n\r\ndocument.querySelector(\".note13\").textContent = \"右方向または左方向のどちらかを入力してください\";\r\ndocument.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\nconst check = document.querySelectorAll(\"[name=check\");\r\nfor(let i = 0; i < 2; i++){\r\ncheck[i].addEventListener(\"click\",function(){\r\n  const currentItem = this;\r\n  if(currentItem.checked){\r\n    check[0].checked = false;\r\n    check[1].checked = false;\r\n    currentItem.checked = true;\r\n  };\r\n});\r\n};\r\n\r\n\r\n\r\ndocument.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\ndocument.querySelector(\".rectAngle-confirm4\").removeEventListener(\"click\",handleConfirm4);\r\n\r\n\r\n\r\nwhile (document.querySelector(\".div7\").lastChild) {\r\n  document.querySelector(\".div7\").removeChild(document.querySelector(\".div7\").lastChild);\r\n  console.log(\"while\");\r\n }\r\n\r\n document.querySelector(\".div7\").parentNode.removeChild(document.querySelector(\".div7\"));\r\n\r\n  \r\n function handleConfirm11(){\r\n\r\nif(check[0].checked){\r\n\r\n  const  rightBottomCheckTriangle  = __webpack_require__(/*! src/FurnitureRightBottomCheckTriangleModule */ \"./Public/App/src/FurnitureRightBottomCheckTriangleModule.js\");\r\n  const rightBottomCheckTriangle2 = () =>{\r\n\r\n    rightBottomCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4)\r\n\r\n  };\r\n\r\n  rightBottomCheckTriangle2();\r\n\r\n\r\n\r\n}else if(check[1].checked){\r\n\r\n  const  rightBottomCheckSquare  = __webpack_require__(/*! src/FurnitureRightBottomCheckSquareModule */ \"./Public/App/src/FurnitureRightBottomCheckSquareModule.js\");\r\n  const rightBottomCheckSquare2 = () =>{\r\n\r\n    rightBottomCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4)\r\n\r\n  };\r\n\r\n  rightBottomCheckSquare2();\r\n\r\n\r\n\r\n}else{\r\n\r\n  const sizeFormError7 = document.createElement(\"p\");\r\n  sizeFormError7.classList.add(\"size-form-error7\");\r\n  div22.append(sizeFormError7);\r\n  document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n}\r\n\r\n};\r\n\r\n};\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureRightBottomLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureRightTopCheckSquareModule.js":
/*!**************************************************************!*\
  !*** ./Public/App/src/FurnitureRightTopCheckSquareModule.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function rightTopCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle2.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#8b4513', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#8b4513', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle2.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n        const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n        const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    \r\n        const clear = [minX+1, minY, maxX - minX, maxY - minY];\r\n    \r\n        console.log(clear);\r\n    \r\n        context.clearRect(...clear);\r\n    \r\n        shape.clear = clear;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n  };\r\n\r\n};\r\n\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureRightTopCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureRightTopCheckTriangleModule.js":
/*!****************************************************************!*\
  !*** ./Public/App/src/FurnitureRightTopCheckTriangleModule.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function rightTopCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n      function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#8b4513', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#8b4513', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n     \r\n     function handleConfirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n\r\n       };\r\n      };\r\n\r\n     };\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const customShape = new Konva.Shape({\r\n\r\n        sceneFunc: function (context, shape) {\r\n      \r\n          const x1 = circleX1; // 三角形の頂点1の X 座標\r\n          const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n          const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n          const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n          const x3 = circleX2; // 三角形の頂点3の X 座標\r\n          const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n          const clearLine1 = [x1+1, y1];\r\n          const clearLine2 = [x2, y2];\r\n          const clearLine3 = [x3+1, y3];\r\n\r\n          context.beginPath();\r\n          context.moveTo(...clearLine1);\r\n          context.lineTo(...clearLine2);\r\n          context.lineTo(...clearLine3);\r\n          context.closePath();\r\n      \r\n          // 三角形のパスをクリアする\r\n          context.globalCompositeOperation = 'destination-out';\r\n          context.fill();\r\n          context.globalCompositeOperation = 'source-over';\r\n      \r\n          shape.clearLine1 = clearLine1;\r\n          shape.clearLine2 = clearLine2;\r\n          shape.clearLine3 = clearLine3;\r\n      \r\n        },\r\n      \r\n        \r\n      });\r\n      \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n      dashedLine7.destroy();\r\n      dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else { \r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1+1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3+1, y3];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1+1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3+1, y3];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n    };\r\n\r\n  };\r\n\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureRightTopCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureRightTopLengthModule.js":
/*!*********************************************************!*\
  !*** ./Public/App/src/FurnitureRightTopLengthModule.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function rightTopLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm4){\r\n\r\n  if(Number.isNaN(size2Num)){\r\n\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError3);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n   } else {\r\n     console.log(\"A\");\r\n\r\n  // 長さを格納する変数\r\n  let length2 = size2Num; \r\n\r\n  circle1.destroy();\r\n  midRect.destroy();\r\n  dashedLine5.destroy();\r\n\r\n  // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n  const newRightCircleX = rectangle.y() + length2;\r\n\r\n  // 右の丸い点の座標を更新\r\n  circle2.y(newRightCircleX);\r\n  layer.draw();\r\n\r\n  \r\n    // 丸い点の座標を取得\r\n    const x = circle2.x();\r\n    const y = circle2.y();\r\n\r\n    // 破線を作成\r\n    const dashedLine6 = new Konva.Line({\r\n      points: [x, y, x , y + length], // 例としてX座標から100ピクセル右に破線を表示\r\n      stroke: 'red',\r\n      strokeWidth: 2,\r\n      lineCap: 'round',\r\n      dash: [5, 10],\r\n    });\r\n\r\n    // 新しい丸い点を作成\r\n    const newCircle = new Konva.Circle({\r\n      x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n      y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n      radius: 5,\r\n      fill: 'red',\r\n    });\r\n\r\n    const x2 = newCircle.x();\r\n    const y2 = newCircle.y();\r\n\r\n    const newRectX = (x + x2) / 2;\r\n    const newRectY = (y + y2) / 2;\r\n    const newRect = new Konva.Rect({\r\n      x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n      y: newRectY - 5,\r\n      width: 10,\r\n      height: 10,\r\n      fill: 'red',\r\n    });\r\n\r\n    layer.add(dashedLine6);\r\n    layer.add(newCircle); \r\n    layer.add(newRect);\r\n    layer.draw();\r\n \r\n\r\n\r\n\r\n const paturnText = document.createElement('p');\r\n paturnText.classList.add(\"paturn-text\");\r\n\r\n const check1 = document.createElement('input');\r\n check1.type = \"checkbox\";\r\n check1.classList.add(\"check1\");\r\n check1.name = \"check\";\r\n\r\n const check2 = document.createElement('input');\r\n check2.type = \"checkbox\";\r\n check2.classList.add(\"check2\");\r\n check2.name = \"check\";\r\n\r\n const paturn1 = document.createElement('img');\r\n paturn1.src = \"/images/paturn1.png\";\r\n paturn1.classList.add(\"paturn1\");\r\n\r\n const paturn2 = document.createElement('img');\r\n paturn2.src = \"/images/paturn2.png\";\r\n paturn2.classList.add(\"paturn2\");\r\n\r\n const rectAngleSizeForm28 = document.createElement('input');\r\n rectAngleSizeForm28.type = \"text\";\r\n rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n rectAngleSizeForm28.placeholder = \"右方向に伸ばす長さを入力\";\r\n\r\n const rectAngleSizeForm29 = document.createElement('input');\r\n rectAngleSizeForm29.type = \"text\";\r\n rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n rectAngleSizeForm29.placeholder = \"左方向に縮める長さを入力\";\r\n\r\n const rectAngleConfirm11 = document.createElement('button');\r\n rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n rectAngleConfirm11.append(\"決定\");\r\n\r\n const div22 = document.createElement(\"div\");\r\n div22.classList.add(\"div22\");\r\n\r\n const div21 = document.createElement(\"div\");\r\n div21.classList.add(\"div21\");\r\n\r\n const note13 = document.createElement(\"p\");\r\n note13.classList.add(\"note13\");\r\n\r\n div22.append(note13);\r\n div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n div21.append(div22);\r\n furniturecenterInner.append(div21);\r\n\r\n document.querySelector(\".note13\").textContent = \"右方向または左方向のどちらかを入力してください\";\r\n document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n const check = document.querySelectorAll(\"[name=check\");\r\n for(let i = 0; i < 2; i++){\r\n   check[i].addEventListener(\"click\",function(){\r\n     const currentItem = this;\r\n     if(currentItem.checked){\r\n       check[0].checked = false;\r\n       check[1].checked = false;\r\n       currentItem.checked = true;\r\n     };\r\n   });\r\n };\r\n\r\n document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\n document.querySelector(\".rectAngle-confirm4\").removeEventListener(\"click\",handleConfirm4);\r\n\r\n\r\n\r\n while (document.querySelector(\".div7\").lastChild) {\r\n   document.querySelector(\".div7\").removeChild(document.querySelector(\".div7\").lastChild);\r\n   console.log(\"while\");\r\n  }\r\n\r\n  document.querySelector(\".div7\").parentNode.removeChild(document.querySelector(\".div7\"));\r\n\r\n\r\n  function handleConfirm11(){\r\n\r\n   if(check[0].checked){\r\n\r\n    const  rightTopCheckTriangle  = __webpack_require__(/*! src/FurnitureRightTopCheckTriangleModule */ \"./Public/App/src/FurnitureRightTopCheckTriangleModule.js\");\r\n    const rightTopCheckTriangle2 = () =>{\r\n\r\n      rightTopCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4)\r\n\r\n    };\r\n\r\n    rightTopCheckTriangle2();\r\n\r\n\r\n   }else if(check[1].checked){\r\n\r\n    const  rightTopCheckSquare  = __webpack_require__(/*! src/FurnitureRightTopCheckSquareModule */ \"./Public/App/src/FurnitureRightTopCheckSquareModule.js\");\r\n    const rightTopCheckSquare2 = () =>{\r\n\r\n      rightTopCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4)\r\n\r\n    };\r\n\r\n    rightTopCheckSquare2();\r\n\r\n\r\n\r\n   }else{\r\n\r\n     const sizeFormError7 = document.createElement(\"p\");\r\n     sizeFormError7.classList.add(\"size-form-error7\");\r\n     div22.append(sizeFormError7);\r\n     document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n   }\r\n\r\n };\r\n};\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureRightTopLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureRightTwoPointsModule.js":
/*!*********************************************************!*\
  !*** ./Public/App/src/FurnitureRightTwoPointsModule.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function rightTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length){\r\n\r\n  const rectAngleSizeForm6 = document.createElement('input');\r\n  rectAngleSizeForm6.type = \"text\";\r\n  rectAngleSizeForm6.classList.add(\"rectAngle-SizeForm6\");\r\n  rectAngleSizeForm6.placeholder = \"上端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm7 = document.createElement('input');\r\n  rectAngleSizeForm7.type = \"text\";\r\n  rectAngleSizeForm7.classList.add(\"rectAngle-SizeForm7\");\r\n  rectAngleSizeForm7.placeholder = \"下端からの長さを入力\";\r\n\r\n  const rectAngleConfirm4 = document.createElement('button');\r\n  rectAngleConfirm4.classList.add(\"rectAngle-confirm4\");\r\n  rectAngleConfirm4.append(\"決定\");\r\n\r\n  const div8 = document.createElement(\"div\");\r\n  div8.classList.add(\"div8\");\r\n\r\n  const div7 = document.createElement(\"div\");\r\n  div7.classList.add(\"div7\");\r\n\r\n  const note2 = document.createElement(\"p\");\r\n  note2.classList.add(\"note2\");\r\n\r\n  div8.append(note2);\r\n  div8.append(rectAngleSizeForm6,rectAngleSizeForm7,rectAngleConfirm4);\r\n\r\n  div7.append(div8);\r\n  furniturecenterInner.append(div7);\r\n  \r\n  document.querySelector(\".note2\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n\r\n   // 四角の中心座標を取得\r\n  const midRectX = midRect.x() + midRect.width() / 2;\r\n  const midRectY = midRect.y() + midRect.height() / 2;\r\n\r\n   // 縦破線を描画する座標を計算\r\n   const dashedLineX1 = midRectX;\r\n   const dashedLineY1 = midRectY - length / 2;\r\n   const dashedLineX2 = midRectX;\r\n   const dashedLineY2 = midRectY + length / 2;\r\n\r\n  // 破線を作成\r\n  const dashedLine5 = new Konva.Line({\r\n    points: [dashedLineX1, dashedLineY1, dashedLineX2, dashedLineY2],\r\n    stroke: 'red',\r\n    strokeWidth: 2,\r\n    dash: [5, 10], // 破線のパターンを指定（length変数の値を使用）\r\n  });\r\n\r\n  // 丸い点を作成\r\n  const circle1 = new Konva.Circle({\r\n    x: dashedLineX1,\r\n    y: dashedLineY1,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  const circle2 = new Konva.Circle({\r\n    x: dashedLineX2,\r\n    y: dashedLineY2,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  // レイヤーに追加\r\n\r\n  layer.add(dashedLine5, circle1, circle2, midRect);\r\n  stage.add(layer);\r\n\r\n  document.querySelector(\".rectAngle-confirm4\").addEventListener(\"click\",handleConfirm4);\r\n\r\n  document.querySelector(\".rectAngle-confirm2\").removeEventListener(\"click\",handleConfirm2);\r\n      \r\n  while (document.querySelector(\".div3\").lastChild) {\r\n    document.querySelector(\".div3\").removeChild(document.querySelector(\".div3\").lastChild);\r\n    console.log(\"while0\");\r\n\r\n   }\r\n\r\n   document.querySelector(\".div3\").parentNode.removeChild(document.querySelector(\".div3\"));\r\n\r\n   function handleConfirm4(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm6\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm7\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    \r\n    \r\n    if(size2 !== \"\" && size3 === \"\"){\r\n\r\n      const  rightTopLength  = __webpack_require__(/*! src/FurnitureRightTopLengthModule */ \"./Public/App/src/FurnitureRightTopLengthModule.js\");\r\n      const rightTopLength2 = () =>{\r\n  \r\n        rightTopLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm4)\r\n  \r\n      };\r\n  \r\n      rightTopLength2();\r\n\r\n\r\n    } else if(size3 !== \"\" && size2 === \"\"){\r\n\r\n      const  rightBottomLength  = __webpack_require__(/*! src/FurnitureRightBottomLengthModule */ \"./Public/App/src/FurnitureRightBottomLengthModule.js\");\r\n      const rightBottomLength2 = () =>{\r\n  \r\n        rightBottomLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm4)\r\n  \r\n      };\r\n  \r\n      rightBottomLength2();\r\n\r\n    };  \r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureRightTwoPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureSideBottomLeftPointsModule.js":
/*!***************************************************************!*\
  !*** ./Public/App/src/FurnitureSideBottomLeftPointsModule.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function sideBottomLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2){\r\n  stage.off(\"click\",handleClick2);\r\n\r\n  const rectAngleSizeForm24 = document.createElement('input');\r\n  rectAngleSizeForm24.type = \"text\";\r\n  rectAngleSizeForm24.classList.add(\"rectAngle-SizeForm24\");\r\n  rectAngleSizeForm24.placeholder = \"下辺丸点の左端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm25 = document.createElement('input');\r\n  rectAngleSizeForm25.type = \"text\";\r\n  rectAngleSizeForm25.classList.add(\"rectAngle-SizeForm25\");\r\n  rectAngleSizeForm25.placeholder = \"下辺丸点の右端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm26 = document.createElement('input');\r\n  rectAngleSizeForm26.type = \"text\";\r\n  rectAngleSizeForm26.classList.add(\"rectAngle-SizeForm26\");\r\n  rectAngleSizeForm26.placeholder = \"左辺丸点の上端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm27 = document.createElement('input');\r\n  rectAngleSizeForm27.type = \"text\";\r\n  rectAngleSizeForm27.classList.add(\"rectAngle-SizeForm27\");\r\n  rectAngleSizeForm27.placeholder = \"左辺丸点の下端からの長さを入力\";\r\n\r\n  const rectAngleConfirm10 = document.createElement('button');\r\n  rectAngleConfirm10.classList.add(\"rectAngle-confirm10\");\r\n  rectAngleConfirm10.append(\"決定\");\r\n\r\n  const div20 = document.createElement(\"div\");\r\n  div20.classList.add(\"div20\");\r\n\r\n  const div19 = document.createElement(\"div\");\r\n  div19.classList.add(\"div19\");\r\n\r\n  const note11 = document.createElement(\"p\");\r\n  note11.classList.add(\"note11\");\r\n\r\n  const note12 = document.createElement(\"p\");\r\n  note12.classList.add(\"note12\");\r\n\r\n  div20.append(note11,note12);\r\n  div20.append(rectAngleSizeForm24,rectAngleSizeForm25,rectAngleSizeForm26,rectAngleSizeForm27,rectAngleConfirm10);\r\n\r\n  div19.append(div20);\r\n  furniturecenterInner.append(div19);\r\n\r\n  document.querySelector(\".note11\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n  document.querySelector(\".note12\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n\r\n  document.querySelector(\".rectAngle-confirm10\").addEventListener(\"click\",handleConfirm10);\r\n  function handleConfirm10(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm24\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm25\").value;\r\n    const size4 =document.querySelector(\".rectAngle-SizeForm26\").value;\r\n    const size5 =document.querySelector(\".rectAngle-SizeForm27\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size4Y = Number.parseFloat(size4);\r\n    const size5Y = Number.parseFloat(size5);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    const size4Num = size4Y /1.06;\r\n    const size5Num = size5Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    console.log(size4Num)\r\n    console.log(size5Num)\r\n    \r\n    if (dots[0].y() === rectangle.y() + rectangle.height() && dots[1].x() === rectangle.x()) {\r\n    \r\n      const  firstLeftNextBottomPoints  = __webpack_require__(/*! src/FurnitureFirstLeftNextBottomPointsModule */ \"./Public/App/src/FurnitureFirstLeftNextBottomPointsModule.js\");\r\n      const firstLeftNextBottomPoints2 = () =>{\r\n  \r\n        firstLeftNextBottomPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm10,size2,size3,size4,size5)\r\n  \r\n      };\r\n  \r\n      firstLeftNextBottomPoints2();\r\n\r\n}else if (dots[0].x() === rectangle.x() && dots[1].y() === rectangle.y() + rectangle.height()) {\r\n\r\n        const  firstBottomNextLeftPoints  = __webpack_require__(/*! src/FurnitureFirstBottomNextLeftPointsModule */ \"./Public/App/src/FurnitureFirstBottomNextLeftPointsModule.js\");\r\n      const firstBottomNextLeftPoints2 = () =>{\r\n  \r\n        firstBottomNextLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm10,size2,size3,size4,size5)\r\n  \r\n      };\r\n  \r\n      firstBottomNextLeftPoints2();\r\n\r\n};\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureSideBottomLeftPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureSideBottomRightPointsModule.js":
/*!****************************************************************!*\
  !*** ./Public/App/src/FurnitureSideBottomRightPointsModule.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function sideBottomRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2){\r\n  stage.off(\"click\",handleClick2);\r\n\r\n  const rectAngleSizeForm20 = document.createElement('input');\r\n  rectAngleSizeForm20.type = \"text\";\r\n  rectAngleSizeForm20.classList.add(\"rectAngle-SizeForm20\");\r\n  rectAngleSizeForm20.placeholder = \"下辺丸点の左端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm21 = document.createElement('input');\r\n  rectAngleSizeForm21.type = \"text\";\r\n  rectAngleSizeForm21.classList.add(\"rectAngle-SizeForm21\");\r\n  rectAngleSizeForm21.placeholder = \"下辺丸点の右端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm22 = document.createElement('input');\r\n  rectAngleSizeForm22.type = \"text\";\r\n  rectAngleSizeForm22.classList.add(\"rectAngle-SizeForm22\");\r\n  rectAngleSizeForm22.placeholder = \"右辺丸点の上端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm23 = document.createElement('input');\r\n  rectAngleSizeForm23.type = \"text\";\r\n  rectAngleSizeForm23.classList.add(\"rectAngle-SizeForm23\");\r\n  rectAngleSizeForm23.placeholder = \"右辺丸点の下端からの長さを入力\";\r\n\r\n  const rectAngleConfirm9 = document.createElement('button');\r\n  rectAngleConfirm9.classList.add(\"rectAngle-confirm9\");\r\n  rectAngleConfirm9.append(\"決定\");\r\n\r\n  const div18 = document.createElement(\"div\");\r\n  div18.classList.add(\"div18\");\r\n\r\n  const div17 = document.createElement(\"div\");\r\n  div17.classList.add(\"div17\");\r\n\r\n  const note9 = document.createElement(\"p\");\r\n  note9.classList.add(\"note9\");\r\n\r\n  const note10 = document.createElement(\"p\");\r\n  note10.classList.add(\"note10\");\r\n\r\n  div18.append(note9,note10);\r\n  div18.append(rectAngleSizeForm20,rectAngleSizeForm21,rectAngleSizeForm22,rectAngleSizeForm23,rectAngleConfirm9);\r\n\r\n  div17.append(div18);\r\n  furniturecenterInner.append(div17);\r\n\r\n  document.querySelector(\".note9\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n  document.querySelector(\".note10\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n\r\n  document.querySelector(\".rectAngle-confirm9\").addEventListener(\"click\",handleConfirm9);\r\n  function handleConfirm9(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm20\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm21\").value;\r\n    const size4 =document.querySelector(\".rectAngle-SizeForm22\").value;\r\n    const size5 =document.querySelector(\".rectAngle-SizeForm23\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size4Y = Number.parseFloat(size4);\r\n    const size5Y = Number.parseFloat(size5);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    const size4Num = size4Y /1.06;\r\n    const size5Num = size5Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    console.log(size4Num)\r\n    console.log(size5Num)\r\n    \r\n    if (dots[0].y() === rectangle.y() + rectangle.height() && dots[1].x() === rectangle.x() + rectangle.width()) {\r\n    \r\n      const  firstRightNextBottomPoints  = __webpack_require__(/*! src/FurnitureFirstRightNextBottomPointsModule */ \"./Public/App/src/FurnitureFirstRightNextBottomPointsModule.js\");\r\n      const firstRightNextBottomPoints2 = () =>{\r\n  \r\n        firstRightNextBottomPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm9,size2,size3,size4,size5)\r\n  \r\n      };\r\n  \r\n      firstRightNextBottomPoints2();\r\n\r\n      console.log(\"A\")\r\n\r\n}else if (dots[0].x() === rectangle.x() + rectangle.width() && dots[1].y() === rectangle.y() + rectangle.height()) {\r\n\r\n      const  firstBottomNextRightPoints  = __webpack_require__(/*! src/FurnitureFirstBottomNextRightPointsModule */ \"./Public/App/src/FurnitureFirstBottomNextRightPointsModule.js\");\r\n      const firstBottomNextRightPoints2 = () =>{\r\n  \r\n        firstBottomNextRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm9,size2,size3,size4,size5)\r\n  \r\n      };\r\n  \r\n      firstBottomNextRightPoints2();\r\n\r\n      console.log(\"B\")\r\n\r\n}\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureSideBottomRightPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureSideTopLeftPointsModule.js":
/*!************************************************************!*\
  !*** ./Public/App/src/FurnitureSideTopLeftPointsModule.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function sideTopLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2){\r\n  stage.off(\"click\",handleClick2);\r\n\r\n  const rectAngleSizeForm16 = document.createElement('input');\r\n  rectAngleSizeForm16.type = \"text\";\r\n  rectAngleSizeForm16.classList.add(\"rectAngle-SizeForm16\");\r\n  rectAngleSizeForm16.placeholder = \"上辺丸点の左端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm17 = document.createElement('input');\r\n  rectAngleSizeForm17.type = \"text\";\r\n  rectAngleSizeForm17.classList.add(\"rectAngle-SizeForm17\");\r\n  rectAngleSizeForm17.placeholder = \"上辺丸点の右端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm18 = document.createElement('input');\r\n  rectAngleSizeForm18.type = \"text\";\r\n  rectAngleSizeForm18.classList.add(\"rectAngle-SizeForm18\");\r\n  rectAngleSizeForm18.placeholder = \"左辺丸点の上端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm19 = document.createElement('input');\r\n  rectAngleSizeForm19.type = \"text\";\r\n  rectAngleSizeForm19.classList.add(\"rectAngle-SizeForm19\");\r\n  rectAngleSizeForm19.placeholder = \"左辺丸点の下端からの長さを入力\";\r\n\r\n  const rectAngleConfirm8 = document.createElement('button');\r\n  rectAngleConfirm8.classList.add(\"rectAngle-confirm8\");\r\n  rectAngleConfirm8.append(\"決定\");\r\n\r\n  const div16 = document.createElement(\"div\");\r\n  div16.classList.add(\"div16\");\r\n\r\n  const div15 = document.createElement(\"div\");\r\n  div15.classList.add(\"div15\");\r\n\r\n  const note7 = document.createElement(\"p\");\r\n  note7.classList.add(\"note7\");\r\n\r\n  const note8 = document.createElement(\"p\");\r\n  note8.classList.add(\"note8\");\r\n\r\n  div16.append(note7,note8);\r\n  div16.append(rectAngleSizeForm16,rectAngleSizeForm17,rectAngleSizeForm18,rectAngleSizeForm19,rectAngleConfirm8);\r\n\r\n  div15.append(div16);\r\n  furniturecenterInner.append(div15);\r\n\r\n  document.querySelector(\".note7\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n  document.querySelector(\".note8\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n\r\n  document.querySelector(\".rectAngle-confirm8\").addEventListener(\"click\",handleConfirm8);\r\n  function handleConfirm8(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm16\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm17\").value;\r\n    const size4 =document.querySelector(\".rectAngle-SizeForm18\").value;\r\n    const size5 =document.querySelector(\".rectAngle-SizeForm19\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size4Y = Number.parseFloat(size4);\r\n    const size5Y = Number.parseFloat(size5);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    const size4Num = size4Y /1.06;\r\n    const size5Num = size5Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    console.log(size4Num)\r\n    console.log(size5Num)\r\n    \r\n    if (dots[0].y() === rectangle.y() && dots[1].x() === rectangle.x()) {\r\n\r\n      console.log(\"qqq\");\r\n    \r\n      const  firstLeftNextTopPoints  = __webpack_require__(/*! src/FurnitureFirstLeftNextTopPointsModule */ \"./Public/App/src/FurnitureFirstLeftNextTopPointsModule.js\");\r\n      const firstLeftNextTopPoints2 = () =>{\r\n  \r\n        firstLeftNextTopPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm8,size2,size3,size4,size5)\r\n  \r\n      };\r\n  \r\n      firstLeftNextTopPoints2();\r\n\r\n}else if (dots[0].x() === rectangle.x() && dots[1].y() === rectangle.y()) {\r\n\r\n  console.log(\"qqqaaa\");\r\n\r\n      const  firstTopNextLeftPoints  = __webpack_require__(/*! src/FurnitureFirstTopNextLeftPointsModule */ \"./Public/App/src/FurnitureFirstTopNextLeftPointsModule.js\");\r\n      const firstTopNextLeftPoints2 = () =>{\r\n  \r\n        firstTopNextLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm8,size2,size3,size4,size5)\r\n  \r\n      };\r\n  \r\n      firstTopNextLeftPoints2();\r\n\r\n}\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureSideTopLeftPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureSideTopRightPointsModule.js":
/*!*************************************************************!*\
  !*** ./Public/App/src/FurnitureSideTopRightPointsModule.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function sideTopRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2){\r\n  stage.off(\"click\",handleClick2);\r\n\r\n  const rectAngleSizeForm12 = document.createElement('input');\r\n  rectAngleSizeForm12.type = \"text\";\r\n  rectAngleSizeForm12.classList.add(\"rectAngle-SizeForm12\");\r\n  rectAngleSizeForm12.placeholder = \"上辺丸点の左端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm13 = document.createElement('input');\r\n  rectAngleSizeForm13.type = \"text\";\r\n  rectAngleSizeForm13.classList.add(\"rectAngle-SizeForm13\");\r\n  rectAngleSizeForm13.placeholder = \"上辺丸点の右端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm14 = document.createElement('input');\r\n  rectAngleSizeForm14.type = \"text\";\r\n  rectAngleSizeForm14.classList.add(\"rectAngle-SizeForm14\");\r\n  rectAngleSizeForm14.placeholder = \"右辺丸点の上端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm15 = document.createElement('input');\r\n  rectAngleSizeForm15.type = \"text\";\r\n  rectAngleSizeForm15.classList.add(\"rectAngle-SizeForm15\");\r\n  rectAngleSizeForm15.placeholder = \"右辺丸点の下端からの長さを入力\";\r\n\r\n  const rectAngleConfirm7 = document.createElement('button');\r\n  rectAngleConfirm7.classList.add(\"rectAngle-confirm7\");\r\n  rectAngleConfirm7.append(\"決定\");\r\n\r\n  const div14 = document.createElement(\"div\");\r\n  div14.classList.add(\"div14\");\r\n\r\n  const div13 = document.createElement(\"div\");\r\n  div13.classList.add(\"div13\");\r\n\r\n  const note5 = document.createElement(\"p\");\r\n  note5.classList.add(\"note5\");\r\n\r\n  const note6 = document.createElement(\"p\");\r\n  note6.classList.add(\"note6\");\r\n\r\n  div14.append(note5,note6);\r\n  div14.append(rectAngleSizeForm12,rectAngleSizeForm13,rectAngleSizeForm14,rectAngleSizeForm15,rectAngleConfirm7);\r\n\r\n  div13.append(div14);\r\n  furniturecenterInner.append(div13);\r\n\r\n  document.querySelector(\".note5\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n  document.querySelector(\".note6\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n\r\n  document.querySelector(\".rectAngle-confirm7\").addEventListener(\"click\",handleConfirm7);\r\n  function handleConfirm7(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm12\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm13\").value;\r\n    const size4 =document.querySelector(\".rectAngle-SizeForm14\").value;\r\n    const size5 =document.querySelector(\".rectAngle-SizeForm15\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size4Y = Number.parseFloat(size4);\r\n    const size5Y = Number.parseFloat(size5);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    const size4Num = size4Y /1.06;\r\n    const size5Num = size5Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    console.log(size4Num)\r\n    console.log(size5Num)\r\n    \r\n    if (dots[0].y() === rectangle.y() && dots[1].x() === rectangle.x() + rectangle.width()) {\r\n    \r\n      const  firstRightNextTopPoints  = __webpack_require__(/*! src/FurnitureFirstRightNextTopPointsModule */ \"./Public/App/src/FurnitureFirstRightNextTopPointsModule.js\");\r\n      const firstRightNextTopPoints2 = () =>{\r\n  \r\n        firstRightNextTopPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm7,size2,size3,size4,size5)\r\n  \r\n      };\r\n  \r\n      firstRightNextTopPoints2();\r\n\r\n\r\n}else if (dots[0].x() === rectangle.x() + rectangle.width() && dots[1].y() === rectangle.y()) {\r\n\r\n  const  firstTopNextRightPoints  = __webpack_require__(/*! src/FurnitureFirstTopNextRightPointsModule */ \"./Public/App/src/FurnitureFirstTopNextRightPointsModule.js\");\r\n  const firstTopNextRightPoints2 = () =>{\r\n\r\n    firstTopNextRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm7,size2,size3,size4,size5)\r\n\r\n  };\r\n\r\n  firstTopNextRightPoints2();\r\n\r\n};\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureSideTopRightPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureSideTwoPointsModule.js":
/*!********************************************************!*\
  !*** ./Public/App/src/FurnitureSideTwoPointsModule.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function sideTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2){\r\n  stage.off(\"click\",handleClick2);\r\n        \r\n        \r\n\r\n  const rectAngleSizeForm3 = document.createElement('input');\r\n  rectAngleSizeForm3.type = \"text\";\r\n  rectAngleSizeForm3.classList.add(\"rectAngle-SizeForm3\");\r\n  rectAngleSizeForm3.placeholder = \"対象箇所の長さをcm単位で入力\";\r\n\r\n  const rectAngleConfirm2 = document.createElement('button');\r\n  rectAngleConfirm2.classList.add(\"rectAngle-confirm2\");\r\n  rectAngleConfirm2.append(\"決定\");\r\n  const div4 = document.createElement(\"div\");\r\n  div4.classList.add(\"div4\");\r\n  const div3 = document.createElement(\"div\");\r\n  div3.classList.add(\"div3\");\r\n\r\n  div4.append(rectAngleSizeForm3,rectAngleConfirm2);\r\n  div3.append(div4);\r\n  furniturecenterInner.append(div3);\r\n\r\n\r\n  document.querySelector(\".rectAngle-confirm2\").addEventListener(\"click\",handleConfirm2);\r\n  function handleConfirm2(){\r\n\r\n\r\n\r\n    const size1 =document.querySelector(\".rectAngle-SizeForm3\").value;\r\n    const sizeY = Number.parseFloat(size1);\r\n    const size1Num = sizeY /1.06;\r\n    console.log(size1Num)\r\n    \r\n    \r\n\r\n    if(Number.isNaN(size1Num)){\r\n     const sizeFormError2 = document.createElement(\"p\");\r\n     sizeFormError2.classList.add(\"size-form-error2\");\r\n     div4.append(sizeFormError2);\r\n     document.querySelector(\".size-form-error2\").textContent = \"※数値のみ入力してください※\";\r\n\r\n    } else {\r\n\r\n\r\n   // 長さを格納する変数\r\n   let length = size1Num; \r\n   \r\n   dots[0].destroy();\r\n   dots[1].destroy();\r\n   dashedLine.destroy();\r\n  \r\n\r\n  if( midRect.y() <= rectangle.y()){\r\n   \r\n    const  topTwoPoints  = __webpack_require__(/*! src/FurnitureTopTwoPointsModule */ \"./Public/App/src/FurnitureTopTwoPointsModule.js\");\r\n    const topTwoPoints2 = () =>{\r\n\r\n      topTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length)\r\n\r\n    };\r\n\r\n    topTwoPoints2();\r\n\r\n} else if( midRect.x() + midRect.width() >= rectangle.x() + rectangle.width()){\r\n\r\n    const  rightTwoPoints  = __webpack_require__(/*! src/FurnitureRightTwoPointsModule */ \"./Public/App/src/FurnitureRightTwoPointsModule.js\");\r\n    const rightTwoPoints2 = () =>{\r\n\r\n      rightTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length)\r\n\r\n    };\r\n\r\n    rightTwoPoints2();\r\n\r\n} else if( midRect.x() <= rectangle.x()){\r\n\r\n    const  leftTwoPoints  = __webpack_require__(/*! src/FurnitureLeftTwoPointsModule */ \"./Public/App/src/FurnitureLeftTwoPointsModule.js\");\r\n    const leftTwoPoints2 = () =>{\r\n\r\n      leftTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length)\r\n\r\n    };\r\n\r\n    leftTwoPoints2();\r\n\r\n\r\n} else if( midRect.y() + midRect.height() >= rectangle.y() + rectangle.height()){\r\n\r\n  const  bottomTwoPoints  = __webpack_require__(/*! src/FurnitureBottomTwoPointsModule */ \"./Public/App/src/FurnitureBottomTwoPointsModule.js\");\r\n  const bottomTwoPoints2 = () =>{\r\n\r\n    bottomTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length)\r\n\r\n  };\r\n\r\n  bottomTwoPoints2();\r\n\r\n\r\n  \r\n};\r\n\r\n   \r\n    };\r\n \r\n   \r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureSideTwoPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureSquareClickModule.js":
/*!******************************************************!*\
  !*** ./Public/App/src/FurnitureSquareClickModule.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nmodule.exports = function handleClick(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2){\r\n    \r\n  const pointerPos = stage.getPointerPosition();\r\n  const x = pointerPos.x;\r\n  const y = pointerPos.y;\r\n\r\n  // 図形の上辺、左辺、下辺、右辺上でのみ丸い点を追加\r\n  const border = isMouseOnBorder(rectangle, x, y);\r\n  if (border) {\r\n    // クリックした位置に丸い点を追加\r\n    let centerX, centerY;\r\n    switch (border) {\r\n      case 'top':\r\n        centerX = x;\r\n        centerY = rectangle.y();\r\n        break;\r\n      case 'left':\r\n        centerX = rectangle.x();\r\n        centerY = y;\r\n        break;\r\n      case 'bottom':\r\n        centerX = x;\r\n        centerY = rectangle.y() + rectangle.height();\r\n        break;\r\n      case 'right':\r\n        centerX = rectangle.x() + rectangle.width();\r\n        centerY = y;\r\n        break;\r\n    }\r\n\r\n    const dot = new Konva.Circle({\r\n      x: centerX,\r\n      y: centerY,\r\n      radius: 5,\r\n      fill: 'red', // 適宜調整\r\n      draggable: false,\r\n    });\r\n\r\n    // 丸い点が２つを超えたら古い順に削除\r\n    if (dots.length >= 2) {\r\n      const removedDot = dots.shift();\r\n      removedDot.destroy();\r\n    }\r\n\r\n    dots.push(dot);\r\n    layer.add(dot);\r\n    layer.batchDraw(); // レイヤーを再描画する必要があります\r\n\r\n    // 2つの丸い点の間に破線（実線）を描画\r\n    if (dots.length === 2) {\r\n      const startDot = dots[0];\r\n      const endDot = dots[1];\r\n      const startX = startDot.x();\r\n      const startY = startDot.y();\r\n      const endX = endDot.x();\r\n      const endY = endDot.y();\r\n\r\n      if (dashedLine) {\r\n        dashedLine.destroy(); // 既存の破線があれば削除\r\n      }\r\n\r\n      dashedLine = drawDashedLine(startX, startY, endX, endY);\r\n      layer.add(dashedLine);\r\n      layer.batchDraw();\r\n      isDashedLineVisible = true;\r\n\r\n      // 破線の真ん中に四角を表示\r\n      if (midRect) {\r\n        midRect.destroy(); // 既存の四角があれば削除\r\n      }\r\n\r\n      const midX = (startX + endX) / 2;\r\n      const midY = (startY + endY) / 2;\r\n\r\n      midRect = new Konva.Rect({\r\n        x: midX - 5,\r\n        y: midY - 5,\r\n        width: 10,\r\n        height: 10,\r\n        fill: 'red', // 適宜調整\r\n        draggable: false,\r\n      });\r\n\r\n      layer.add(midRect);\r\n    }\r\n  }\r\n \r\n  \r\n  \r\n  \r\n\r\n  if( dots.filter(dot => dot.y() === rectangle.y()).length === 2 ||\r\n      dots.filter(dot => dot.y() === rectangle.y() + rectangle.height()).length === 2 ||\r\n      dots.filter(dot => dot.x() === rectangle.x() + rectangle.width()).length === 2 ||\r\n      dots.filter(dot => dot.x() === rectangle.x()).length === 2 ) {\r\n        \r\n\r\n        \r\n        const sideTwoPoints  = __webpack_require__(/*! src/FurnitureSideTwoPointsModule */ \"./Public/App/src/FurnitureSideTwoPointsModule.js\");\r\n        const sideTwoPoints2 = () =>{\r\n          sideTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2)\r\n        };\r\n        sideTwoPoints2();\r\n\r\n  } else if(dots.length === 2 && dots[0].y() === rectangle.y() && dots[1].x() === rectangle.x() + rectangle.width() ||\r\n            dots.length === 2 && dots[0].x() === rectangle.x() + rectangle.width() && dots[1].y() === rectangle.y()){\r\n\r\n        const sideTopRightPoints  = __webpack_require__(/*! src/FurnitureSideTopRightPointsModule */ \"./Public/App/src/FurnitureSideTopRightPointsModule.js\");\r\n        const sideTopRightPoints2 = () =>{\r\n          sideTopRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2)\r\n        };\r\n        sideTopRightPoints2();\r\n\r\n  } else if(dots.length === 2 && dots[0].y() === rectangle.y() && dots[1].x() === rectangle.x() ||\r\n            dots.length === 2 && dots[0].x() === rectangle.x() && dots[1].y() === rectangle.y()){\r\n\r\n        const sideTopLeftPoints  = __webpack_require__(/*! src/FurnitureSideTopLeftPointsModule */ \"./Public/App/src/FurnitureSideTopLeftPointsModule.js\");\r\n        const sideTopLeftPoints2 = () =>{\r\n          sideTopLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2)\r\n        };\r\n        sideTopLeftPoints2();\r\n\r\n  } else if(dots.length === 2 && dots[0].x() === rectangle.x() + rectangle.width() && dots[1].y() === rectangle.y() + rectangle.height() ||\r\n            dots.length === 2 && dots[0].y() === rectangle.y() + rectangle.height() && dots[1].x() === rectangle.x() + rectangle.width()){\r\n\r\n        const sideBottomRightPoints  = __webpack_require__(/*! src/FurnitureSideBottomRightPointsModule */ \"./Public/App/src/FurnitureSideBottomRightPointsModule.js\");\r\n        const sideBottomRightPoints2 = () =>{\r\n          sideBottomRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2)\r\n        };\r\n        sideBottomRightPoints2();\r\n\r\n  } else if(dots.length === 2 && dots[0].y() === rectangle.y() + rectangle.height() && dots[1].x() === rectangle.x() ||\r\n            dots.length === 2 && dots[0].x() === rectangle.x() && dots[1].y() === rectangle.y() + rectangle.height()){\r\n\r\n        const sideBottomLeftPoints  = __webpack_require__(/*! src/FurnitureSideBottomLeftPointsModule */ \"./Public/App/src/FurnitureSideBottomLeftPointsModule.js\");\r\n        const sideBottomLeftPoints2 = () =>{\r\n          sideBottomLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2)\r\n        };\r\n        sideBottomLeftPoints2();\r\n\r\n  }\r\n\r\n\r\n\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureSquareClickModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureTopLeftCheckSquareModule.js":
/*!*************************************************************!*\
  !*** ./Public/App/src/FurnitureTopLeftCheckSquareModule.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function topLeftCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle1.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#8b4513', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#8b4513', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle1.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n        const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n        const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    \r\n        const clear = [minX, minY-1, maxX - minX, maxY - minY];\r\n    \r\n        console.log(clear);\r\n    \r\n        context.clearRect(...clear);\r\n    \r\n        shape.clear = clear;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n    };\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureTopLeftCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureTopLeftCheckTriangleModule.js":
/*!***************************************************************!*\
  !*** ./Public/App/src/FurnitureTopLeftCheckTriangleModule.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function topLeftCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#8b4513', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#8b4513', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle1.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n\r\n      function handleConfirm12(){\r\n\r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n         document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n         document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 下に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const customShape = new Konva.Shape({\r\n\r\n        sceneFunc: function (context, shape) {\r\n      \r\n          const x1 = circleX1; // 三角形の頂点1の X 座標\r\n          const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n          const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n          const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n          const x3 = circleX2; // 三角形の頂点3の X 座標\r\n          const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n          const clearLine1 = [x1, y1-1];\r\n          const clearLine2 = [x2, y2];\r\n          const clearLine3 = [x3, y3-1];\r\n\r\n          context.beginPath();\r\n          context.moveTo(...clearLine1);\r\n          context.lineTo(...clearLine2);\r\n          context.lineTo(...clearLine3);\r\n          context.closePath();\r\n      \r\n          // 三角形のパスをクリアする\r\n          context.globalCompositeOperation = 'destination-out';\r\n          context.fill();\r\n          context.globalCompositeOperation = 'source-over';\r\n      \r\n          shape.clearLine1 = clearLine1;\r\n          shape.clearLine2 = clearLine2;\r\n          shape.clearLine3 = clearLine3;\r\n      \r\n        },\r\n      \r\n        \r\n      });\r\n      \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n      circle1.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n      dashedLine7.destroy();\r\n      dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1, y1-1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3-1];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1, y1-1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3-1];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n       };\r\n\r\n     };\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureTopLeftCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureTopLeftLengthModule.js":
/*!********************************************************!*\
  !*** ./Public/App/src/FurnitureTopLeftLengthModule.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function topLeftLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm3){\r\n\r\n  if(Number.isNaN(size3Num)){\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";\r\n   } else {\r\n\r\n    // 長さを格納する変数\r\nlet length2 = size3Num; \r\n\r\ncircle2.destroy();\r\nmidRect.destroy();\r\ndashedLine5.destroy();\r\n\r\n// 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\nconst newLeftCircleX = rectangle.x() + length2;\r\n\r\n// 左の丸い点の座標を更新\r\ncircle1.x(newLeftCircleX);\r\nlayer.draw();\r\n\r\n\r\n // 丸い点の座標を取得\r\n const x = circle1.x();\r\n const y = circle1.y();\r\n\r\n // 破線を作成\r\n const dashedLine6 = new Konva.Line({\r\n   points: [x, y, x + length, y], // 例としてX座標から100ピクセル右に破線を表示\r\n   stroke: 'red',\r\n   strokeWidth: 2,\r\n   lineCap: 'round',\r\n   dash: [5, 10],\r\n });\r\n\r\n // 新しい丸い点を作成\r\n const newCircle = new Konva.Circle({\r\n   x: dashedLine6.points()[2], // 破線の一番右端のX座標を取得\r\n   y: dashedLine6.points()[3], // 破線の一番右端のY座標を取得\r\n   radius: 5,\r\n   fill: 'red',\r\n });\r\n\r\n\r\n const x2 = newCircle.x();\r\n const y2 = newCircle.y();\r\n\r\n const newRectX = (x + x2) / 2;\r\n const newRectY = (y + y2) / 2;\r\n const newRect = new Konva.Rect({\r\n   x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n   y: newRectY - 5,\r\n   width: 10,\r\n   height: 10,\r\n   fill: 'red',\r\n });\r\n\r\n layer.add(dashedLine6);\r\n layer.add(newCircle); \r\n layer.add(newRect);\r\n layer.draw();\r\n\r\n\r\n\r\nconst paturnText = document.createElement('p');\r\npaturnText.classList.add(\"paturn-text\");\r\n\r\nconst check1 = document.createElement('input');\r\ncheck1.type = \"checkbox\";\r\ncheck1.classList.add(\"check1\");\r\ncheck1.name = \"check\";\r\n\r\nconst check2 = document.createElement('input');\r\ncheck2.type = \"checkbox\";\r\ncheck2.classList.add(\"check2\");\r\ncheck2.name = \"check\";\r\n\r\nconst paturn1 = document.createElement('img');\r\npaturn1.src = \"/images/paturn1.png\";\r\npaturn1.classList.add(\"paturn1\");\r\n\r\nconst paturn2 = document.createElement('img');\r\npaturn2.src = \"/images/paturn2.png\";\r\npaturn2.classList.add(\"paturn2\");\r\n\r\nconst rectAngleSizeForm28 = document.createElement('input');\r\nrectAngleSizeForm28.type = \"text\";\r\nrectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\nrectAngleSizeForm28.placeholder = \"上方向に伸ばす長さを入力\";\r\n\r\nconst rectAngleSizeForm29 = document.createElement('input');\r\nrectAngleSizeForm29.type = \"text\";\r\nrectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\nrectAngleSizeForm29.placeholder = \"下方向に縮める長さを入力\";\r\n\r\nconst rectAngleConfirm11 = document.createElement('button');\r\nrectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\nrectAngleConfirm11.append(\"決定\");\r\n\r\nconst div22 = document.createElement(\"div\");\r\ndiv22.classList.add(\"div22\");\r\n\r\nconst div21 = document.createElement(\"div\");\r\ndiv21.classList.add(\"div21\");\r\n\r\nconst note13 = document.createElement(\"p\");\r\nnote13.classList.add(\"note13\");\r\n\r\ndiv22.append(note13);\r\ndiv22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\ndiv21.append(div22);\r\nfurniturecenterInner.append(div21);\r\n\r\ndocument.querySelector(\".note13\").textContent = \"上方向または下方向のどちらかを入力してください\";\r\ndocument.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\nconst check = document.querySelectorAll(\"[name=check\");\r\nfor(let i = 0; i < 2; i++){\r\ncheck[i].addEventListener(\"click\",function(){\r\n  const currentItem = this;\r\n  if(currentItem.checked){\r\n    check[0].checked = false;\r\n    check[1].checked = false;\r\n    currentItem.checked = true;\r\n  };\r\n});\r\n};\r\n\r\ndocument.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\ndocument.querySelector(\".rectAngle-confirm3\").removeEventListener(\"click\",handleConfirm3);\r\n\r\n\r\n\r\nwhile (document.querySelector(\".div5\").lastChild) {\r\n  document.querySelector(\".div5\").removeChild(document.querySelector(\".div5\").lastChild);\r\n  console.log(\"while\");\r\n }\r\n\r\n document.querySelector(\".div5\").parentNode.removeChild(document.querySelector(\".div5\"));\r\n\r\n  \r\n function handleConfirm11(){\r\n\r\nif(check[0].checked){\r\n\r\n  const  topLeftCheckTriangle  = __webpack_require__(/*! src/FurnitureTopLeftCheckTriangleModule */ \"./Public/App/src/FurnitureTopLeftCheckTriangleModule.js\");\r\n  const topLeftCheckTriangle2 = () =>{\r\n\r\n    topLeftCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n  };\r\n\r\n  topLeftCheckTriangle2();\r\n\r\n\r\n\r\n}else if(check[1].checked){\r\n\r\n  const  topLeftCheckSquare  = __webpack_require__(/*! src/FurnitureTopLeftCheckSquareModule */ \"./Public/App/src/FurnitureTopLeftCheckSquareModule.js\");\r\n  const topLeftCheckSquare2 = () =>{\r\n\r\n    topLeftCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n  };\r\n\r\n  topLeftCheckSquare2();\r\n\r\n\r\n\r\n}else{\r\n\r\n  const sizeFormError7 = document.createElement(\"p\");\r\n  sizeFormError7.classList.add(\"size-form-error7\");\r\n  div22.append(sizeFormError7);\r\n  document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n}\r\n\r\n};\r\n   };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureTopLeftLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureTopRightCheckSquareModule.js":
/*!**************************************************************!*\
  !*** ./Public/App/src/FurnitureTopRightCheckSquareModule.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("\r\n\r\nmodule.exports = function topRightCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n    \r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle2.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#8b4513', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#8b4513', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n    \r\n\r\n\r\n     \r\n     \r\n\r\n  \r\n     dots.length = 0 ;\r\n\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n     stage.off(\"click\",handleClick2);\r\n\r\n     stage.on(\"click\",handleClick2);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      console.log(\"while2\");\r\n     };\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n  \r\n    \r\n\r\n     \r\n\r\n    };\r\n\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle2.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    \r\n\r\n\r\n\r\nconst customShape = new Konva.Shape({\r\n\r\n  sceneFunc: function (context, shape) {\r\n\r\n    const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n    const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n    const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n\r\n    const clear = [minX, minY-1, maxX - minX, maxY - minY];\r\n\r\n    console.log(clear);\r\n\r\n    context.clearRect(...clear);\r\n\r\n    shape.clear = clear;\r\n\r\n  },\r\n\r\n  \r\n});\r\n\r\nlayer.add(customShape);\r\nlayer.draw();\r\n\r\n    \r\n     \r\n\r\n  \r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n  };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureTopRightCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureTopRightCheckTriangleModule.js":
/*!****************************************************************!*\
  !*** ./Public/App/src/FurnitureTopRightCheckTriangleModule.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function topRightCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n     function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#8b4513', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#8b4513', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      \r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n     \r\n     function handleConfirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else {\r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        \r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        }\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else {\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#8b4513', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#8b4513', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n       };\r\n       };\r\n\r\n     };\r\n\r\n\r\n    };\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 下に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     furniturecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const customShape = new Konva.Shape({\r\n\r\n        sceneFunc: function (context, shape) {\r\n      \r\n          const x1 = circleX1; // 三角形の頂点1の X 座標\r\n          const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n          const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n          const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n          const x3 = circleX2; // 三角形の頂点3の X 座標\r\n          const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n          const clearLine1 = [x1, y1-1];\r\n          const clearLine2 = [x2, y2];\r\n          const clearLine3 = [x3, y3-1];\r\n\r\n          context.beginPath();\r\n          context.moveTo(...clearLine1);\r\n          context.lineTo(...clearLine2);\r\n          context.lineTo(...clearLine3);\r\n          context.closePath();\r\n      \r\n          // 三角形のパスをクリアする\r\n          context.globalCompositeOperation = 'destination-out';\r\n          context.fill();\r\n          context.globalCompositeOperation = 'source-over';\r\n      \r\n          shape.clearLine1 = clearLine1;\r\n          shape.clearLine2 = clearLine2;\r\n          shape.clearLine3 = clearLine3;\r\n      \r\n        },\r\n      \r\n        \r\n      });\r\n      \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n      dashedLine7.destroy();\r\n      dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } \r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1, y1-1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3-1];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } \r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1, y1-1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3-1];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n\r\n       };\r\n\r\n     };\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureTopRightCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureTopRightLengthModule.js":
/*!*********************************************************!*\
  !*** ./Public/App/src/FurnitureTopRightLengthModule.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function topRightLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3){\r\n\r\n  if(Number.isNaN(size2Num)){\r\n\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError3);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n   } else {\r\n     console.log(\"A\");\r\n\r\n\r\n  // 長さを格納する変数\r\n  let length2 = size2Num; \r\n\r\n  circle1.destroy();\r\n  midRect.destroy();\r\n  dashedLine5.destroy();\r\n\r\n  // 図形の上辺の右端から指定した距離の位置を計算して新しい右の丸い点のX座標を設定\r\n  const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n\r\n  // 右の丸い点の座標を更新\r\n  circle2.x(newRightCircleX);\r\n  layer.draw();\r\n\r\n  \r\n    // 丸い点の座標を取得\r\n    const x = circle2.x();\r\n    const y = circle2.y();\r\n\r\n    // 破線を作成\r\n    const dashedLine6 = new Konva.Line({\r\n      points: [x, y, x - length, y], // 例としてX座標から100ピクセル右に破線を表示\r\n      stroke: 'red',\r\n      strokeWidth: 2,\r\n      lineCap: 'round',\r\n      dash: [5, 10],\r\n    });\r\n\r\n    // 新しい丸い点を作成\r\n    const newCircle = new Konva.Circle({\r\n      x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n      y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n      radius: 5,\r\n      fill: 'red',\r\n    });\r\n\r\n    const x2 = newCircle.x();\r\n    const y2 = newCircle.y();\r\n\r\n    const newRectX = (x + x2) / 2;\r\n    const newRectY = (y + y2) / 2;\r\n    const newRect = new Konva.Rect({\r\n      x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n      y: newRectY - 5,\r\n      width: 10,\r\n      height: 10,\r\n      fill: 'red',\r\n    });\r\n\r\n    layer.add(dashedLine6);\r\n    layer.add(newCircle); \r\n    layer.add(newRect);\r\n    layer.draw();\r\n\r\n  \r\n\r\n const paturnText = document.createElement('p');\r\n paturnText.classList.add(\"paturn-text\");\r\n\r\n const check1 = document.createElement('input');\r\n check1.type = \"checkbox\";\r\n check1.classList.add(\"check1\");\r\n check1.name = \"check\";\r\n\r\n const check2 = document.createElement('input');\r\n check2.type = \"checkbox\";\r\n check2.classList.add(\"check2\");\r\n check2.name = \"check\";\r\n\r\n const paturn1 = document.createElement('img');\r\n paturn1.src = \"/images/paturn1.png\";\r\n paturn1.classList.add(\"paturn1\");\r\n\r\n const paturn2 = document.createElement('img');\r\n paturn2.src = \"/images/paturn2.png\";\r\n paturn2.classList.add(\"paturn2\");\r\n\r\n const rectAngleSizeForm28 = document.createElement('input');\r\n rectAngleSizeForm28.type = \"text\";\r\n rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n rectAngleSizeForm28.placeholder = \"上方向に伸ばす長さを入力\";\r\n\r\n const rectAngleSizeForm29 = document.createElement('input');\r\n rectAngleSizeForm29.type = \"text\";\r\n rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n rectAngleSizeForm29.placeholder = \"下方向に縮める長さを入力\";\r\n\r\n const rectAngleConfirm11 = document.createElement('button');\r\n rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n rectAngleConfirm11.append(\"決定\");\r\n\r\n const div22 = document.createElement(\"div\");\r\n div22.classList.add(\"div22\");\r\n\r\n const div21 = document.createElement(\"div\");\r\n div21.classList.add(\"div21\");\r\n\r\n const note13 = document.createElement(\"p\");\r\n note13.classList.add(\"note13\");\r\n\r\n div22.append(note13);\r\n div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n div21.append(div22);\r\n furniturecenterInner.append(div21);\r\n\r\n\r\n\r\n document.querySelector(\".note13\").textContent = \"上方向または下方向のどちらかを入力してください\";\r\n document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n const check = document.querySelectorAll(\"[name=check\");\r\n for(let i = 0; i < 2; i++){\r\n   check[i].addEventListener(\"click\",function(){\r\n     const currentItem = this;\r\n     if(currentItem.checked){\r\n       check[0].checked = false;\r\n       check[1].checked = false;\r\n       currentItem.checked = true;\r\n     };\r\n   });\r\n };\r\n\r\n document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\n document.querySelector(\".rectAngle-confirm3\").removeEventListener(\"click\",handleConfirm3);\r\n\r\n\r\n\r\n while (document.querySelector(\".div5\").lastChild) {\r\n   document.querySelector(\".div5\").removeChild(document.querySelector(\".div5\").lastChild);\r\n   console.log(\"while\");\r\n  }\r\n\r\n  document.querySelector(\".div5\").parentNode.removeChild(document.querySelector(\".div5\"));\r\n\r\n\r\n\r\n\r\n \r\n function handleConfirm11(){\r\n   \r\n\r\n   if(check[0].checked){\r\n\r\n    const  topRightCheckTriangle  = __webpack_require__(/*! src/FurnitureTopRightCheckTriangleModule */ \"./Public/App/src/FurnitureTopRightCheckTriangleModule.js\");\r\n    const topRightCheckTriangle2 = () =>{\r\n\r\n      topRightCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n    };\r\n\r\n    topRightCheckTriangle2();\r\n\r\n\r\n   }else if(check[1].checked){\r\n\r\n    const  topRightCheckSquare  = __webpack_require__(/*! src/FurnitureTopRightCheckSquareModule */ \"./Public/App/src/FurnitureTopRightCheckSquareModule.js\");\r\n    const topRightCheckSquare2 = () =>{\r\n\r\n      topRightCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n    };\r\n\r\n    topRightCheckSquare2();\r\n\r\n\r\n   }else{\r\n\r\n     const sizeFormError7 = document.createElement(\"p\");\r\n     sizeFormError7.classList.add(\"size-form-error7\");\r\n     div22.append(sizeFormError7);\r\n     document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n   }\r\n  \r\n };\r\n\r\n\r\n\r\n};\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureTopRightLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/FurnitureTopTwoPointsModule.js":
/*!*******************************************************!*\
  !*** ./Public/App/src/FurnitureTopTwoPointsModule.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function topTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length){\r\n\r\n  const rectAngleSizeForm4 = document.createElement('input');\r\n  rectAngleSizeForm4.type = \"text\";\r\n  rectAngleSizeForm4.classList.add(\"rectAngle-SizeForm4\");\r\n  rectAngleSizeForm4.placeholder = \"右端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm5 = document.createElement('input');\r\n  rectAngleSizeForm5.type = \"text\";\r\n  rectAngleSizeForm5.classList.add(\"rectAngle-SizeForm5\");\r\n  rectAngleSizeForm5.placeholder = \"左端からの長さを入力\";\r\n\r\n  const rectAngleConfirm3 = document.createElement('button');\r\n  rectAngleConfirm3.classList.add(\"rectAngle-confirm3\");\r\n  rectAngleConfirm3.append(\"決定\");\r\n\r\n  const div6 = document.createElement(\"div\");\r\n  div6.classList.add(\"div6\");\r\n\r\n  const div5 = document.createElement(\"div\");\r\n  div5.classList.add(\"div5\");\r\n\r\n  const note1 = document.createElement(\"p\");\r\n  note1.classList.add(\"note1\");\r\n\r\n  div6.append(note1);\r\n  div6.append(rectAngleSizeForm4,rectAngleSizeForm5,rectAngleConfirm3);\r\n\r\n  div5.append(div6);\r\n  furniturecenterInner.append(div5);\r\n\r\n  console.log(div5);\r\n\r\n  document.querySelector(\".note1\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n\r\n  // 四角の中心座標を取得\r\n  const midRectX = midRect.x() + midRect.width() / 2;\r\n  const midRectY = midRect.y() + midRect.height() / 2;\r\n\r\n  // 横破線を描画する座標を計算\r\n  const dashedLineX1 = midRectX - length / 2;\r\n  const dashedLineY1 = midRectY;\r\n  const dashedLineX2 = midRectX + length / 2;\r\n  const dashedLineY2 = midRectY;\r\n\r\n  // 破線を作成\r\n  const dashedLine5 = new Konva.Line({\r\n    points: [dashedLineX1, dashedLineY1, dashedLineX2, dashedLineY2],\r\n    stroke: 'red',\r\n    strokeWidth: 2,\r\n    dash: [5, 10], // 破線のパターンを指定（length変数の値を使用）\r\n  });\r\n\r\n  // 丸い点を作成\r\n  const circle1 = new Konva.Circle({\r\n    x: dashedLineX1,\r\n    y: dashedLineY1,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  const circle2 = new Konva.Circle({\r\n    x: dashedLineX2,\r\n    y: dashedLineY2,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  // レイヤーに追加\r\n  \r\n  layer.add(dashedLine5, circle1, circle2, midRect);\r\n  stage.add(layer);\r\n\r\n  document.querySelector(\".rectAngle-confirm3\").addEventListener(\"click\",handleConfirm3);\r\n\r\n  document.querySelector(\".rectAngle-confirm2\").removeEventListener(\"click\",handleConfirm2);\r\n      \r\n  while (document.querySelector(\".div3\").lastChild) {\r\n    document.querySelector(\".div3\").removeChild(document.querySelector(\".div3\").lastChild);\r\n    console.log(\"while0\");\r\n\r\n   }\r\n\r\n   document.querySelector(\".div3\").parentNode.removeChild(document.querySelector(\".div3\"));\r\n   \r\n\r\n  function handleConfirm3(){\r\n    \r\n    \r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm4\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm5\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    \r\n    \r\n    if(size2 !== \"\" && size3 === \"\"){\r\n\r\n      const  topRightLength  = __webpack_require__(/*! src/FurnitureTopRightLengthModule */ \"./Public/App/src/FurnitureTopRightLengthModule.js\");\r\n      const topRightLength2 = () =>{\r\n  \r\n        topRightLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3)\r\n  \r\n      };\r\n  \r\n      topRightLength2();\r\n\r\n    } else if(size3 !== \"\" && size2 === \"\"){\r\n\r\n      const  topLeftLength  = __webpack_require__(/*! src/FurnitureTopLeftLengthModule */ \"./Public/App/src/FurnitureTopLeftLengthModule.js\");\r\n      const topLeftLength2 = () =>{\r\n  \r\n        topLeftLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,furniturecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm3)\r\n  \r\n      };\r\n  \r\n      topLeftLength2();\r\n\r\n    };  \r\n    \r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/FurnitureTopTwoPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceBottomLeftCheckSquareModule.js":
/*!************************************************************!*\
  !*** ./Public/App/src/SpaceBottomLeftCheckSquareModule.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function bottomLeftCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle1.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n        const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n        const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    \r\n        const clear = [minX, minY+1, maxX - minX, maxY - minY];\r\n    \r\n        console.log(clear);\r\n    \r\n        context.clearRect(...clear);\r\n    \r\n        shape.clear = clear;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle1.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#F0BE99', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#F0BE99', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceBottomLeftCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceBottomLeftCheckTriangleModule.js":
/*!**************************************************************!*\
  !*** ./Public/App/src/SpaceBottomLeftCheckTriangleModule.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function bottomLeftCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n     function handleConfirm13(){\r\n\r\n      const customShape = new Konva.Shape({\r\n\r\n        sceneFunc: function (context, shape) {\r\n      \r\n          const x1 = circleX1; // 三角形の頂点1の X 座標\r\n          const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n          const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n          const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n          const x3 = circleX2; // 三角形の頂点3の X 座標\r\n          const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n          const clearLine1 = [x1, y1+1];\r\n          const clearLine2 = [x2, y2];\r\n          const clearLine3 = [x3, y3+1];\r\n\r\n          context.beginPath();\r\n          context.moveTo(...clearLine1);\r\n          context.lineTo(...clearLine2);\r\n          context.lineTo(...clearLine3);\r\n          context.closePath();\r\n      \r\n          // 三角形のパスをクリアする\r\n          context.globalCompositeOperation = 'destination-out';\r\n          context.fill();\r\n          context.globalCompositeOperation = 'source-over';\r\n      \r\n          shape.clearLine1 = clearLine1;\r\n          shape.clearLine2 = clearLine2;\r\n          shape.clearLine3 = clearLine3;\r\n      \r\n        },\r\n      \r\n        \r\n      });\r\n      \r\n      layer.add(customShape);\r\n      layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n    dashedLine7.destroy();\r\n    dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n     \r\n     function handleConfirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1, y1+1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3+1];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1, y1+1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3+1];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 下に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#F0BE99', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#F0BE99', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle1.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceBottomLeftCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceBottomLeftLengthModule.js":
/*!*******************************************************!*\
  !*** ./Public/App/src/SpaceBottomLeftLengthModule.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function bottomLeftLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm6){\r\n\r\n  if(Number.isNaN(size3Num)){\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";\r\n   } else{\r\n\r\n    // 長さを格納する変数\r\nlet length2 = size3Num; \r\n\r\ncircle2.destroy();\r\nmidRect.destroy();\r\ndashedLine5.destroy();\r\n\r\n// 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\nconst newLeftCircleX = rectangle.x() + length2;\r\n\r\n// 左の丸い点の座標を更新\r\ncircle1.x(newLeftCircleX);\r\nlayer.draw();\r\n\r\n\r\n // 丸い点の座標を取得\r\n const x = circle1.x();\r\n const y = circle1.y();\r\n\r\n // 破線を作成\r\n const dashedLine6 = new Konva.Line({\r\n   points: [x, y, x + length, y], // 例としてX座標から100ピクセル右に破線を表示\r\n   stroke: 'red',\r\n   strokeWidth: 2,\r\n   lineCap: 'round',\r\n   dash: [5, 10],\r\n });\r\n\r\n // 新しい丸い点を作成\r\n const newCircle = new Konva.Circle({\r\n   x: dashedLine6.points()[2], // 破線の一番右端のX座標を取得\r\n   y: dashedLine6.points()[3], // 破線の一番右端のY座標を取得\r\n   radius: 5,\r\n   fill: 'red',\r\n });\r\n\r\n\r\n const x2 = newCircle.x();\r\n const y2 = newCircle.y();\r\n\r\n const newRectX = (x + x2) / 2;\r\n const newRectY = (y + y2) / 2;\r\n const newRect = new Konva.Rect({\r\n   x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n   y: newRectY - 5,\r\n   width: 10,\r\n   height: 10,\r\n   fill: 'red',\r\n });\r\n\r\n layer.add(dashedLine6);\r\n layer.add(newCircle); \r\n layer.add(newRect);\r\n layer.draw();\r\n\r\n\r\n\r\nconst paturnText = document.createElement('p');\r\npaturnText.classList.add(\"paturn-text\");\r\n\r\nconst check1 = document.createElement('input');\r\ncheck1.type = \"checkbox\";\r\ncheck1.classList.add(\"check1\");\r\ncheck1.name = \"check\";\r\n\r\nconst check2 = document.createElement('input');\r\ncheck2.type = \"checkbox\";\r\ncheck2.classList.add(\"check2\");\r\ncheck2.name = \"check\";\r\n\r\nconst paturn1 = document.createElement('img');\r\npaturn1.src = \"/images/paturn1.png\";\r\npaturn1.classList.add(\"paturn1\");\r\n\r\nconst paturn2 = document.createElement('img');\r\npaturn2.src = \"/images/paturn2.png\";\r\npaturn2.classList.add(\"paturn2\");\r\n\r\nconst rectAngleSizeForm28 = document.createElement('input');\r\nrectAngleSizeForm28.type = \"text\";\r\nrectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\nrectAngleSizeForm28.placeholder = \"上方向に縮める長さを入力\";\r\n\r\nconst rectAngleSizeForm29 = document.createElement('input');\r\nrectAngleSizeForm29.type = \"text\";\r\nrectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\nrectAngleSizeForm29.placeholder = \"下方向に伸ばす長さを入力\";\r\n\r\nconst rectAngleConfirm11 = document.createElement('button');\r\nrectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\nrectAngleConfirm11.append(\"決定\");\r\n\r\nconst div22 = document.createElement(\"div\");\r\ndiv22.classList.add(\"div22\");\r\n\r\nconst div21 = document.createElement(\"div\");\r\ndiv21.classList.add(\"div21\");\r\n\r\nconst note13 = document.createElement(\"p\");\r\nnote13.classList.add(\"note13\");\r\n\r\ndiv22.append(note13);\r\ndiv22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\ndiv21.append(div22);\r\nspacecenterInner.append(div21);\r\n\r\ndocument.querySelector(\".note13\").textContent = \"上方向または下方向のどちらかを入力してください\";\r\ndocument.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\nconst check = document.querySelectorAll(\"[name=check\");\r\nfor(let i = 0; i < 2; i++){\r\ncheck[i].addEventListener(\"click\",function(){\r\n  const currentItem = this;\r\n  if(currentItem.checked){\r\n    check[0].checked = false;\r\n    check[1].checked = false;\r\n    currentItem.checked = true;\r\n  };\r\n});\r\n};\r\n\r\ndocument.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\ndocument.querySelector(\".rectAngle-confirm6\").removeEventListener(\"click\",handleConfirm6);\r\n\r\n\r\n\r\nwhile (document.querySelector(\".div11\").lastChild) {\r\n  document.querySelector(\".div11\").removeChild(document.querySelector(\".div11\").lastChild);\r\n  console.log(\"while\");\r\n }\r\n\r\n document.querySelector(\".div11\").parentNode.removeChild(document.querySelector(\".div11\"));\r\n\r\n\r\n\r\n\r\n\r\nfunction handleConfirm11(){\r\n\r\nif(check[0].checked){\r\n\r\n  const  bottomLeftCheckTriangle  = __webpack_require__(/*! src/SpaceBottomLeftCheckTriangleModule */ \"./Public/App/src/SpaceBottomLeftCheckTriangleModule.js\");\r\n  const bottomLeftCheckTriangle2 = () =>{\r\n\r\n    bottomLeftCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n  };\r\n\r\n  bottomLeftCheckTriangle2();\r\n\r\n\r\n\r\n}else if(check[1].checked){\r\n\r\n  const  bottomLeftCheckSquare  = __webpack_require__(/*! src/SpaceBottomLeftCheckSquareModule */ \"./Public/App/src/SpaceBottomLeftCheckSquareModule.js\");\r\n  const bottomLeftCheckSquare2 = () =>{\r\n\r\n    bottomLeftCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n  };\r\n\r\n  bottomLeftCheckSquare2();\r\n\r\n\r\n\r\n}else{\r\n\r\n  const sizeFormError7 = document.createElement(\"p\");\r\n  sizeFormError7.classList.add(\"size-form-error7\");\r\n  div22.append(sizeFormError7);\r\n  document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n}\r\n\r\n};\r\n};\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceBottomLeftLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceBottomRightCheckSquareModule.js":
/*!*************************************************************!*\
  !*** ./Public/App/src/SpaceBottomRightCheckSquareModule.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function bottomRightCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle2.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n        const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n        const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    \r\n        const clear = [minX, minY+1, maxX - minX, maxY - minY];\r\n    \r\n        console.log(clear);\r\n    \r\n        context.clearRect(...clear);\r\n    \r\n        shape.clear = clear;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle2.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#F0BE99', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#F0BE99', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceBottomRightCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceBottomRightCheckTriangleModule.js":
/*!***************************************************************!*\
  !*** ./Public/App/src/SpaceBottomRightCheckTriangleModule.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function bottomRightCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n     function handleConfirm13(){\r\n\r\n      const customShape = new Konva.Shape({\r\n\r\n        sceneFunc: function (context, shape) {\r\n      \r\n          const x1 = circleX1; // 三角形の頂点1の X 座標\r\n          const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n          const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n          const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n          const x3 = circleX2; // 三角形の頂点3の X 座標\r\n          const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n          const clearLine1 = [x1, y1+1];\r\n          const clearLine2 = [x2, y2];\r\n          const clearLine3 = [x3, y3+1];\r\n\r\n          context.beginPath();\r\n          context.moveTo(...clearLine1);\r\n          context.lineTo(...clearLine2);\r\n          context.lineTo(...clearLine3);\r\n          context.closePath();\r\n      \r\n          // 三角形のパスをクリアする\r\n          context.globalCompositeOperation = 'destination-out';\r\n          context.fill();\r\n          context.globalCompositeOperation = 'source-over';\r\n      \r\n          shape.clearLine1 = clearLine1;\r\n          shape.clearLine2 = clearLine2;\r\n          shape.clearLine3 = clearLine3;\r\n      \r\n        },\r\n      \r\n        \r\n      });\r\n      \r\n      layer.add(customShape);\r\n      layer.draw();\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n      dashedLine7.destroy();\r\n      dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n     \r\n     function handleConfirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1, y1+1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3+1];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1, y1+1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3+1];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n\r\n        };\r\n       };\r\n\r\n     };\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 下に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#F0BE99', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#F0BE99', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceBottomRightCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceBottomRightLengthModule.js":
/*!********************************************************!*\
  !*** ./Public/App/src/SpaceBottomRightLengthModule.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function bottomRightLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm6){\r\n\r\n  if(Number.isNaN(size2Num)){\r\n\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError3);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n   } else{\r\n     console.log(\"A\");\r\n\r\n  // 長さを格納する変数\r\n  let length2 = size2Num; \r\n\r\n  circle1.destroy();\r\n  midRect.destroy();\r\n  dashedLine5.destroy();\r\n\r\n  // 図形の上辺の右端から指定した距離の位置を計算して新しい右の丸い点のX座標を設定\r\n  const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n\r\n  // 右の丸い点の座標を更新\r\n  circle2.x(newRightCircleX);\r\n  layer.draw();\r\n\r\n  \r\n    // 丸い点の座標を取得\r\n    const x = circle2.x();\r\n    const y = circle2.y();\r\n\r\n    // 破線を作成\r\n    const dashedLine6 = new Konva.Line({\r\n      points: [x, y, x - length, y], // 例としてX座標から100ピクセル右に破線を表示\r\n      stroke: 'red',\r\n      strokeWidth: 2,\r\n      lineCap: 'round',\r\n      dash: [5, 10],\r\n    });\r\n\r\n    // 新しい丸い点を作成\r\n    const newCircle = new Konva.Circle({\r\n      x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n      y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n      radius: 5,\r\n      fill: 'red',\r\n    });\r\n\r\n    const x2 = newCircle.x();\r\n    const y2 = newCircle.y();\r\n\r\n    const newRectX = (x + x2) / 2;\r\n    const newRectY = (y + y2) / 2;\r\n    const newRect = new Konva.Rect({\r\n      x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n      y: newRectY - 5,\r\n      width: 10,\r\n      height: 10,\r\n      fill: 'red',\r\n    });\r\n\r\n    layer.add(dashedLine6);\r\n    layer.add(newCircle); \r\n    layer.add(newRect);\r\n    layer.draw();\r\n \r\n\r\n\r\n const paturnText = document.createElement('p');\r\n paturnText.classList.add(\"paturn-text\");\r\n\r\n const check1 = document.createElement('input');\r\n check1.type = \"checkbox\";\r\n check1.classList.add(\"check1\");\r\n check1.name = \"check\";\r\n\r\n const check2 = document.createElement('input');\r\n check2.type = \"checkbox\";\r\n check2.classList.add(\"check2\");\r\n check2.name = \"check\";\r\n\r\n const paturn1 = document.createElement('img');\r\n paturn1.src = \"/images/paturn1.png\";\r\n paturn1.classList.add(\"paturn1\");\r\n\r\n const paturn2 = document.createElement('img');\r\n paturn2.src = \"/images/paturn2.png\";\r\n paturn2.classList.add(\"paturn2\");\r\n\r\n const rectAngleSizeForm28 = document.createElement('input');\r\n rectAngleSizeForm28.type = \"text\";\r\n rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n rectAngleSizeForm28.placeholder = \"上方向に縮める長さを入力\";\r\n\r\n const rectAngleSizeForm29 = document.createElement('input');\r\n rectAngleSizeForm29.type = \"text\";\r\n rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n rectAngleSizeForm29.placeholder = \"下方向に伸ばす長さを入力\";\r\n\r\n const rectAngleConfirm11 = document.createElement('button');\r\n rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n rectAngleConfirm11.append(\"決定\");\r\n\r\n const div22 = document.createElement(\"div\");\r\n div22.classList.add(\"div22\");\r\n\r\n const div21 = document.createElement(\"div\");\r\n div21.classList.add(\"div21\");\r\n\r\n const note13 = document.createElement(\"p\");\r\n note13.classList.add(\"note13\");\r\n\r\n div22.append(note13);\r\n div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n div21.append(div22);\r\n spacecenterInner.append(div21);\r\n\r\n document.querySelector(\".note13\").textContent = \"上方向または下方向のどちらかを入力してください\";\r\n document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n const check = document.querySelectorAll(\"[name=check\");\r\n for(let i = 0; i < 2; i++){\r\n   check[i].addEventListener(\"click\",function(){\r\n     const currentItem = this;\r\n     if(currentItem.checked){\r\n       check[0].checked = false;\r\n       check[1].checked = false;\r\n       currentItem.checked = true;\r\n     };\r\n   });\r\n };\r\n\r\n document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\n document.querySelector(\".rectAngle-confirm6\").removeEventListener(\"click\",handleConfirm6);\r\n\r\n\r\n\r\n while (document.querySelector(\".div11\").lastChild) {\r\n   document.querySelector(\".div11\").removeChild(document.querySelector(\".div11\").lastChild);\r\n   console.log(\"while\");\r\n  }\r\n\r\n  document.querySelector(\".div11\").parentNode.removeChild(document.querySelector(\".div11\"));\r\n\r\n\r\n\r\n\r\n \r\n function handleConfirm11(){\r\n\r\n   if(check[0].checked){\r\n\r\n    const  bottomRightCheckTriangle  = __webpack_require__(/*! src/SpaceBottomRightCheckTriangleModule */ \"./Public/App/src/SpaceBottomRightCheckTriangleModule.js\");\r\n    const bottomRightCheckTriangle2 = () =>{\r\n\r\n      bottomRightCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n    };\r\n\r\n    bottomRightCheckTriangle2();\r\n\r\n\r\n\r\n   }else if(check[1].checked){\r\n\r\n    const  bottomRightCheckSquare  = __webpack_require__(/*! src/SpaceBottomRightCheckSquareModule */ \"./Public/App/src/SpaceBottomRightCheckSquareModule.js\");\r\n    const bottomRightCheckSquare2 = () =>{\r\n\r\n      bottomRightCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm6,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n    };\r\n\r\n    bottomRightCheckSquare2();\r\n\r\n\r\n\r\n   }else{\r\n\r\n     const sizeFormError7 = document.createElement(\"p\");\r\n     sizeFormError7.classList.add(\"size-form-error7\");\r\n     div22.append(sizeFormError7);\r\n     document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n   }\r\n\r\n };\r\n};\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceBottomRightLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceBottomTwoPointsModule.js":
/*!******************************************************!*\
  !*** ./Public/App/src/SpaceBottomTwoPointsModule.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function bottomTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length){\r\n\r\n  const rectAngleSizeForm10 = document.createElement('input');\r\n  rectAngleSizeForm10.type = \"text\";\r\n  rectAngleSizeForm10.classList.add(\"rectAngle-SizeForm10\");\r\n  rectAngleSizeForm10.placeholder = \"右端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm11 = document.createElement('input');\r\n  rectAngleSizeForm11.type = \"text\";\r\n  rectAngleSizeForm11.classList.add(\"rectAngle-SizeForm11\");\r\n  rectAngleSizeForm11.placeholder = \"左端からの長さを入力\";\r\n\r\n  const rectAngleConfirm6 = document.createElement('button');\r\n  rectAngleConfirm6.classList.add(\"rectAngle-confirm6\");\r\n  rectAngleConfirm6.append(\"決定\");\r\n\r\n  const div12 = document.createElement(\"div\");\r\n  div12.classList.add(\"div12\");\r\n\r\n  const div11 = document.createElement(\"div\");\r\n  div11.classList.add(\"div11\");\r\n\r\n  const note4 = document.createElement(\"p\");\r\n  note4.classList.add(\"note4\");\r\n\r\n  div12.append(note4);\r\n  div12.append(rectAngleSizeForm10,rectAngleSizeForm11,rectAngleConfirm6);\r\n\r\n  div11.append(div12);\r\n  spacecenterInner.append(div11);\r\n\r\n  document.querySelector(\".note4\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n\r\n  // 四角の中心座標を取得\r\n  const midRectX = midRect.x() + midRect.width() / 2;\r\n  const midRectY = midRect.y() + midRect.height() / 2;\r\n\r\n  // 横破線を描画する座標を計算\r\n  const dashedLineX1 = midRectX - length / 2;\r\n  const dashedLineY1 = midRectY;\r\n  const dashedLineX2 = midRectX + length / 2;\r\n  const dashedLineY2 = midRectY;\r\n\r\n  // 破線を作成\r\n  const dashedLine5 = new Konva.Line({\r\n    points: [dashedLineX1, dashedLineY1, dashedLineX2, dashedLineY2],\r\n    stroke: 'red',\r\n    strokeWidth: 2,\r\n    dash: [5, 10], // 破線のパターンを指定（length変数の値を使用）\r\n  });\r\n\r\n  // 丸い点を作成\r\n  const circle1 = new Konva.Circle({\r\n    x: dashedLineX1,\r\n    y: dashedLineY1,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  const circle2 = new Konva.Circle({\r\n    x: dashedLineX2,\r\n    y: dashedLineY2,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  // レイヤーに追加\r\n  layer.add(dashedLine5, circle1, circle2, midRect);\r\n  stage.add(layer);\r\n\r\n  document.querySelector(\".rectAngle-confirm6\").addEventListener(\"click\",handleConfirm6);\r\n\r\n  document.querySelector(\".rectAngle-confirm2\").removeEventListener(\"click\",handleConfirm2);\r\n      \r\n  while (document.querySelector(\".div3\").lastChild) {\r\n    document.querySelector(\".div3\").removeChild(document.querySelector(\".div3\").lastChild);\r\n    console.log(\"while0\");\r\n\r\n   }\r\n\r\n   document.querySelector(\".div3\").parentNode.removeChild(document.querySelector(\".div3\"));\r\n   \r\n\r\n  function handleConfirm6(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm10\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm11\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    \r\n    \r\n    if(size2 !== \"\" && size3 === \"\"){\r\n\r\n      const  bottomRightLength  = __webpack_require__(/*! src/SpaceBottomRightLengthModule */ \"./Public/App/src/SpaceBottomRightLengthModule.js\");\r\n      const bottomRightLength2 = () =>{\r\n  \r\n        bottomRightLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm6)\r\n  \r\n      };\r\n  \r\n      bottomRightLength2();\r\n\r\n\r\n\r\n\r\n\r\n    } else if(size3 !== \"\" && size2 === \"\"){\r\n\r\n      const  bottomLeftLength  = __webpack_require__(/*! src/SpaceBottomLeftLengthModule */ \"./Public/App/src/SpaceBottomLeftLengthModule.js\");\r\n      const bottomLeftLength2 = () =>{\r\n  \r\n        bottomLeftLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm6)\r\n  \r\n      };\r\n  \r\n      bottomLeftLength2();\r\n\r\n    };  \r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceBottomTwoPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceCreateModule.js":
/*!*********************************************!*\
  !*** ./Public/App/src/SpaceCreateModule.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function spaceCreate(){\r\n\r\n  document.querySelector('.space-createbtn').style.display = \"none\";\r\n  if(document.querySelector('.space-createbtn').style.display === 'none'){\r\n\r\n   document.querySelector('.space-resetbtn').style.display = \"block\";\r\n    \r\n  }\r\n\r\n  document.querySelector('.space-resetbtn').addEventListener(\"click\",function(){\r\n    spaceForm.disabled = true;\r\n    spaceForm.value = \"\";\r\n    document.querySelector('.space-resetbtn').style.display = \"none\";\r\n    document.querySelector('.space-createbtn').style.display = \"block\";\r\n    while(document.querySelector('.spacecenter-inner').firstChild){\r\n      document.querySelector('.spacecenter-inner').removeChild(document.querySelector('.spacecenter-inner').firstChild);\r\n    }\r\n    layer.destroy();\r\n    stage.destroy();\r\n    \r\n  });\r\n\r\n  const spaceForm = document.querySelector('.space-form');\r\n  spaceForm.disabled = false;\r\n\r\n\r\n\r\n // 破線の間隔と破線の長さを設定\r\nconst dashInterval = 10;\r\nconst dashLength = 5;\r\nconst dashColor = 'red';\r\n\r\n// 2つの丸い点の間に破線（実線）を描画する関数\r\nfunction drawDashedLine(startX, startY, endX, endY) {\r\n  const dashedLine = new Konva.Line({\r\n    points: [startX, startY, endX, endY],\r\n    stroke: dashColor,\r\n    strokeWidth: 2,\r\n    dash: [dashLength, dashInterval],\r\n  });\r\n\r\n  return dashedLine;\r\n}\r\n\r\n\r\n\r\n\r\nconst spacecenterInner = document.querySelector('.spacecenter-inner');\r\nlet layer; // レイヤーをグローバル変数として定義\r\n\r\n\r\n\r\n// マウスの座標が図形の上辺、左辺、下辺、右辺のいずれかに乗っているかを判定する関数\r\nfunction isMouseOnBorder(rectangle, x, y) {\r\n  const borderSize = 5; // ボーダーと判定する幅\r\n  const outline = rectangle.getClientRect();\r\n  const centerX = outline.x + outline.width / 2;\r\n  const centerY = outline.y + outline.height / 2;\r\n\r\n  // 上辺の判定\r\n  if (x >= outline.x && x <= outline.x + outline.width &&\r\n      y >= outline.y - borderSize && y <= outline.y + borderSize) {\r\n    return 'top';\r\n  }\r\n  // 左辺の判定\r\n  if (x >= outline.x - borderSize && x <= outline.x + borderSize &&\r\n      y >= outline.y && y <= outline.y + outline.height) {\r\n    return 'left';\r\n  }\r\n  // 下辺の判定\r\n  if (x >= outline.x && x <= outline.x + outline.width &&\r\n      y >= outline.y + outline.height - borderSize && y <= outline.y + outline.height + borderSize) {\r\n    return 'bottom';\r\n  }\r\n  // 右辺の判定\r\n  if (x >= outline.x + outline.width - borderSize && x <= outline.x + outline.width + borderSize &&\r\n      y >= outline.y && y <= outline.y + outline.height) {\r\n    return 'right';\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n      // 丸い点を格納する配列\r\n      const dots = [];\r\n      let dashedLine = null; // 破線を格納する変数\r\n      let isDashedLineVisible = false; // 破線の表示状態\r\n      \r\n      // 破線の真ん中に四角を格納する変数\r\n      let midRect = null;\r\n\r\n  dots.length = 0 ;\r\n\r\n\r\n  const stage = new Konva.Stage({\r\n    container: spacecenterInner,\r\n    width: spacecenterInner.offsetWidth,\r\n    height: spacecenterInner.offsetHeight,\r\n  });\r\n\r\n  \r\n  \r\n  layer = new Konva.Layer(); // グローバル変数を使うために、constをletに変更\r\n  stage.add(layer)\r\n\r\n\r\n  \r\n  let widthValue = 0;\r\n  let heightValue = 0;\r\n  \r\n  // 図形を作成\r\n  const rectangle = new Konva.Rect({\r\n    x: (spacecenterInner.offsetWidth - widthValue) / 2, // spacecenterInnerの中央に配置\r\n    y: (spacecenterInner.offsetHeight - heightValue) / 2, // spacecenterInnerの中央に配置\r\n    width: widthValue, // 適宜調整\r\n    height: heightValue, // 適宜調整\r\n    fill: '#F0BE99', // 適宜調整\r\n    draggable: false,\r\n  });\r\n  \r\n  layer.add(rectangle);\r\n  layer.draw();\r\n  \r\n\r\n  const rectAngleSizeForm1 = document.createElement('input');\r\n  rectAngleSizeForm1.type = \"text\";\r\n  rectAngleSizeForm1.classList.add(\"rectAngle-SizeForm1\");\r\n  rectAngleSizeForm1.placeholder = \"お部屋の横幅をcm単位で入力\";\r\n  const rectAngleSizeForm2 = document.createElement('input');\r\n  rectAngleSizeForm2.type = \"text\";\r\n  rectAngleSizeForm2.classList.add(\"rectAngle-SizeForm2\");\r\n  rectAngleSizeForm2.placeholder = \"お部屋の縦幅をcm単位で入力\";\r\n  const rectAngleConfirm = document.createElement('button');\r\n  rectAngleConfirm.classList.add(\"rectAngle-confirm\");\r\n  rectAngleConfirm.append(\"決定\");\r\n  const div2 = document.createElement(\"div\");\r\n  div2.classList.add(\"div2\");\r\n  const div1 = document.createElement(\"div\");\r\n  div1.classList.add(\"div1\");\r\n\r\n  div2.append(rectAngleSizeForm1,rectAngleSizeForm2,rectAngleConfirm);\r\n  div1.append(div2);\r\n  spacecenterInner.append(div1);\r\n\r\n\r\n  document.querySelector(\".rectAngle-confirm\").addEventListener(\"click\",handleConfirm);\r\n  \r\n   function handleConfirm(){\r\n\r\n\r\n    const size1 =document.querySelector(\".rectAngle-SizeForm1\").value;\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm2\").value;\r\n    const sizeY = Number.parseFloat(size1);\r\n    const sizeX = Number.parseFloat(size2);\r\n    const size1Num = sizeY /1.06;\r\n    const size2Num = sizeX /1.06;\r\n    console.log(size1Num)\r\n\r\n    if(Number.isNaN(size1Num) && Number.isNaN(size2Num)){\r\n     const sizeFormError = document.createElement(\"p\");\r\n     sizeFormError.classList.add(\"size-form-error\");\r\n     div2.append(sizeFormError);\r\n     document.querySelector(\".size-form-error\").textContent = \"※数値のみ入力してください※\";\r\n\r\n    } else{\r\n\r\n    widthValue = size1Num;\r\n    heightValue = size2Num;\r\n\r\n    rectangle.setAttrs({\r\n      x: (spacecenterInner.offsetWidth - widthValue) / 2, // spacecenterInnerの中央に配置\r\n      y: (spacecenterInner.offsetHeight - heightValue) / 2, // spacecenterInnerの中央に配置\r\n      width: widthValue,\r\n      height: heightValue,\r\n    });\r\n    \r\n    // レイヤーを再描画\r\n    layer.batchDraw();\r\n\r\n\r\n    const  handleClick  = __webpack_require__(/*! src/SpaceSquareClickModule */ \"./Public/App/src/SpaceSquareClickModule.js\");\r\n\r\n    const handleClick2 = () =>{\r\n\r\n     handleClick(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2)\r\n\r\n    };\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n\r\n    while (document.querySelector(\".div1\").lastChild) {\r\n      document.querySelector(\".div1\").removeChild(document.querySelector(\".div1\").lastChild);\r\n    }\r\n\r\n    document.querySelector(\".div1\").parentNode.removeChild(document.querySelector(\".div1\"));\r\n\r\n\r\n\r\n    document.querySelector('.space-compbtn').addEventListener('click', spaceComp); \r\n    \r\n    function spaceComp(){\r\n\r\n      const spaceForm = document.querySelector('.space-form');\r\n      const spaceFormValue = spaceForm.value;\r\n      const ul = document.querySelector(\".space-list\");\r\n\r\n      function isDuplicateValuePresent(value, elements) {\r\n        let isDuplicate = false;\r\n        elements.forEach(element => {\r\n          if (element.textContent.trim() === value) {\r\n            isDuplicate = true;\r\n            return;\r\n          }\r\n        });\r\n        return isDuplicate;\r\n      };\r\n\r\n  \r\n       if( spaceFormValue === \"\"){\r\n         const spaceFormError = document.createElement(\"p\");\r\n         spaceFormError.classList.add(\"space-form-error\");\r\n         document.querySelector(\".spacecenter-outer\").append(spaceFormError);\r\n         document.querySelector(\".space-form-error\").textContent = \"※空間名を入力してください※\";\r\n       } else if(spaceFormValue.length >= 6){\r\n        const spaceFormError = document.createElement(\"p\");\r\n        spaceFormError.classList.add(\"space-form-error\");\r\n        document.querySelector(\".spacecenter-outer\").append(spaceFormError);\r\n        document.querySelector(\".space-form-error\").textContent = \"※５文字以内で指定してください※\";\r\n       }  else if (isDuplicateValuePresent(spaceFormValue+\"追加\"+\"取消\"+\"編集\", ul.querySelectorAll(\"li\"))) {\r\n        const spaceFormError = document.createElement(\"p\");\r\n        spaceFormError.classList.add(\"space-form-error\");\r\n        document.querySelector(\".spacecenter-outer\").append(spaceFormError);\r\n        document.querySelector(\".space-form-error\").textContent = \"※この空間名は既に登録されています※\";\r\n       } else {\r\n        \r\n        document.querySelector('.space-resetbtn').style.display = \"none\";\r\n        document.querySelector('.space-createbtn').style.display = \"block\";\r\n        spaceForm.disabled = true;\r\n\r\n        const sourceLayers = stage.getLayers(); // すべてのレイヤーの配列を取得\r\n\r\n\r\n        const layerData = {\r\n          layers: [],  // レイヤーの情報を格納する配列\r\n        };\r\n        \r\n        sourceLayers.forEach(layer => {\r\n          const layerInfo = {\r\n            name: spaceFormValue,  // レイヤーの名前を取得\r\n            children: [],      // 子要素の情報を格納する配列\r\n          };\r\n\r\n          function getShapeType(shape) {\r\n            if (shape instanceof Konva.Rect) {\r\n              return \"Rect\";\r\n            } else if (shape instanceof Konva.Line) {\r\n              return \"Line\";\r\n            } else if (shape instanceof Konva.Shape) {\r\n              return \"Shape\";\r\n            } \r\n          };\r\n          \r\n          layer.getChildren().forEach(shape => {\r\n            const shapeType = getShapeType(shape);\r\n            if (shapeType === \"Rect\") {\r\n            const rectData = {\r\n              type: shape.getType(),   // シェイプの種類（Rect、Circle など）\r\n              x: shape.x(),\r\n              y: shape.y(),\r\n              width: shape.width(),\r\n              height: shape.height(),\r\n              fill: shape.fill(),    \r\n            };\r\n            layerInfo.children.push(rectData); // 子要素の情報を配列に追加\r\n          }\r\n\r\n          if (shapeType === \"Line\") {\r\n            const lineData = {\r\n              type: shape.getType(),   // シェイプの種類（Rect、Circle など）\r\n              points: shape.points(),\r\n              stroke: shape.stroke(), // 線の色\r\n              strokeWidth: shape.strokeWidth(), // 線の太さ\r\n              closed: shape.closed(), // 閉じた形状として描画\r\n              fill: shape.fill(),    \r\n            };\r\n            layerInfo.children.push(lineData); // 子要素の情報を配列に追加\r\n          }\r\n            \r\n          if (shapeType === \"Shape\") {\r\n            const shapeData = {\r\n              type: shape.getType(),\r\n              clear: shape.clear,\r\n              clearLine1 : shape.clearLine1,\r\n              clearLine2 : shape.clearLine2,\r\n              clearLine3 : shape.clearLine3,\r\n            };\r\n            layerInfo.children.push(shapeData);\r\n          }\r\n\r\n            \r\n          });\r\n        \r\n          layerData.layers.push(layerInfo); // レイヤーの情報を配列に追加\r\n        });\r\n        \r\n        \r\n\r\n\r\n  const newData = {\r\n    spaceFormValue: spaceFormValue,\r\n    layerData: layerData,\r\n  };\r\n\r\n  // /user-data の fetch 処理\r\nfetch('/user-data', {\r\n  method: 'POST',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  },\r\n  body: JSON.stringify(newData),\r\n})\r\n  .then(response => {\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    return response.json();\r\n  })\r\n  .then(data => {\r\n    console.log('Server response:', data);\r\n    // サーバーからのレスポンスを処理\r\n  })\r\n  .catch(error => {\r\n    console.error('Error:', error);\r\n    // エラー処理\r\n  });\r\n\r\n// /get-new-data の fetch 処理\r\nfetch('/get-new-data')\r\n  .then(response => {\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    return response.json();\r\n  })\r\n  .then(data => {\r\n    const list = document.createElement(\"li\");\r\n    list.textContent = data.spaceFormValue;\r\n    list.classList.add(\"add-list\");\r\n    const addBtn = document.createElement(\"button\");\r\n    addBtn.append(\"追加\");\r\n    addBtn.classList.add(\"addBtn\");\r\n    const cancelBtn = document.createElement(\"button\");\r\n    cancelBtn.append(\"取消\");\r\n    cancelBtn.classList.add(\"cancelBtn\");\r\n    const editBtn = document.createElement(\"button\");\r\n    const trash = document.createElement(\"i\");\r\n    trash.classList.add(\"fa-solid\")\r\n    trash.classList.add(\"fa-trash-can\")\r\n    editBtn.append(trash);\r\n    editBtn.classList.add(\"editBtn\");\r\n    const btnBox = document.createElement(\"div\");\r\n    btnBox.classList.add(\"btn-box\");\r\n    btnBox.append(addBtn,cancelBtn,editBtn);\r\n    list.append(btnBox);\r\n    document.querySelector('.space-list').append(list);\r\n  })\r\n  .catch(error => {\r\n    console.error('Error getting new data:', error);\r\n    // エラー処理\r\n  });\r\n\r\n  layer.destroy();\r\n  spaceForm.value = \"\";\r\n  const errorElement = document.querySelector(\".space-form-error\");\r\n  if (errorElement && errorElement.textContent !== \"\") {\r\n      errorElement.textContent = \"\";\r\n  }  \r\n\r\n  document.querySelector('.space-compbtn').removeEventListener('click', spaceComp);\r\n        \r\n        \r\n        \r\n        \r\n        \r\n\r\n        \r\n\r\n\r\n        \r\n  \r\n  \r\n       };\r\n    \r\n  \r\n  \r\n    };\r\n  \r\n   \r\n    }\r\n  \r\n\r\n  };\r\n\r\n\r\n};\r\n\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceCreateModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceFirstBottomNextLeftPointsModule.js":
/*!****************************************************************!*\
  !*** ./Public/App/src/SpaceFirstBottomNextLeftPointsModule.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstBottomNextLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm10,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n   \r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1-1, y1];\r\n        const clearLine2 = [x2, y2+1];\r\n        const clearLine3 = [x3-1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     \r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1-1, y1];\r\n        const clearLine2 = [x2, y2+1];\r\n        const clearLine3 = [x3-1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1-1, y1];\r\n        const clearLine2 = [x2, y2+1];\r\n        const clearLine3 = [x3-1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1-1, y1];\r\n        const clearLine2 = [x2, y2+1];\r\n        const clearLine3 = [x3-1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n\r\n\r\n  };\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceFirstBottomNextLeftPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceFirstBottomNextRightPointsModule.js":
/*!*****************************************************************!*\
  !*** ./Public/App/src/SpaceFirstBottomNextRightPointsModule.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstBottomNextRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm9,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    console.log(\"B\")\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else {\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n   \r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2+1];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2+1];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2+1];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2+1];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n\r\n\r\n  };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceFirstBottomNextRightPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceFirstLeftNextBottomPointsModule.js":
/*!****************************************************************!*\
  !*** ./Public/App/src/SpaceFirstLeftNextBottomPointsModule.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstLeftNextBottomPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm10,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else {\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n   \r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else {\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm10\").removeEventListener(\"click\",handleConfirm10);\r\n\r\n     while (document.querySelector(\".div19\").lastChild) {\r\n       document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div19\").parentNode.removeChild(document.querySelector(\".div19\"));\r\n\r\n\r\n  };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceFirstLeftNextBottomPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceFirstLeftNextTopPointsModule.js":
/*!*************************************************************!*\
  !*** ./Public/App/src/SpaceFirstLeftNextTopPointsModule.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstLeftNextTopPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm8,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else {\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2-1, y2];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n\r\n  };\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceFirstLeftNextTopPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceFirstRightNextBottomPointsModule.js":
/*!*****************************************************************!*\
  !*** ./Public/App/src/SpaceFirstRightNextBottomPointsModule.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstRightNextBottomPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm9,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n    console.log(\"A\")\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else {\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n   \r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1+1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3+1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm9\").removeEventListener(\"click\",handleConfirm9);\r\n\r\n     while (document.querySelector(\".div17\").lastChild) {\r\n       document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div17\").parentNode.removeChild(document.querySelector(\".div17\"));\r\n\r\n\r\n\r\n  };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceFirstRightNextBottomPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceFirstRightNextTopPointsModule.js":
/*!**************************************************************!*\
  !*** ./Public/App/src/SpaceFirstRightNextTopPointsModule.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstRightNextTopPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm7,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n\r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else {\r\n     \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else {\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else {\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n  };\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[0].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[1].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[1].x(); \r\n     const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1, y1-1];\r\n        const clearLine2 = [x2+1, y2];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n\r\n  };\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceFirstRightNextTopPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceFirstTopNextLeftPointsModule.js":
/*!*************************************************************!*\
  !*** ./Public/App/src/SpaceFirstTopNextLeftPointsModule.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstTopNextLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm8,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else {\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   dashedLine.destroy();\r\n\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1-1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     midRect.destroy();\r\n    \r\n\r\n  \r\n     dots.length = 0 ;\r\n \r\n\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else {\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1-1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1-1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1-1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3-1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm8\").removeEventListener(\"click\",handleConfirm8);\r\n\r\n     while (document.querySelector(\".div15\").lastChild) {\r\n       document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div15\").parentNode.removeChild(document.querySelector(\".div15\"));\r\n\r\n\r\n\r\n  };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceFirstTopNextLeftPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceFirstTopNextRightPointsModule.js":
/*!**************************************************************!*\
  !*** ./Public/App/src/SpaceFirstTopNextRightPointsModule.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function firstTopNextRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm7,size2,size3,size4,size5){\r\n\r\n  if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else if(Number.isNaN(size4Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    } else {\r\n     \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n\r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n\r\n\r\n  };\r\n\r\n  }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else {\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size4Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else {\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size4Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newTopCircleX = rectangle.y() + length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newTopCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n  };\r\n\r\n  }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n    if(Number.isNaN(size3Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else if(Number.isNaN(size5Num)){\r\n\r\n      const sizeFormError3 = document.createElement(\"p\");\r\n      sizeFormError3.classList.add(\"size-form-error3\");\r\n      div6.append(sizeFormError3);\r\n      document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n     } else{\r\n       \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num;\r\n   let length3 = size5Num;  \r\n\r\n   midRect.destroy();\r\n   dashedLine.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n   // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n   // 左の丸い点の座標を更新\r\n   dots[1].x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   // 右の丸い点の座標を更新\r\n   dots[0].y(newBottomCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x1 = dots[0].x();\r\n     const y1 = dots[0].y();\r\n\r\n     // 丸い点の座標を取得\r\n     const x2 = dots[1].x();\r\n     const y2 = dots[1].y();\r\n\r\n     const intersectionX1 = dots[0].x(); \r\n     const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n     const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n\r\n        const x3 = intersectionX1; // 三角形の頂点3の X 座標\r\n        const y3 = intersectionY1; // 三角形の頂点3の Y 座標\r\n\r\n        const clearLine1 = [x1+1, y1];\r\n        const clearLine2 = [x2, y2-1];\r\n        const clearLine3 = [x3+1, y3-1];\r\n\r\n        context.beginPath();\r\n        context.moveTo(...clearLine1);\r\n        context.lineTo(...clearLine2);\r\n        context.lineTo(...clearLine3);\r\n        context.closePath();\r\n    \r\n        // 三角形のパスをクリアする\r\n        context.globalCompositeOperation = 'destination-out';\r\n        context.fill();\r\n        context.globalCompositeOperation = 'source-over';\r\n    \r\n        shape.clearLine1 = clearLine1;\r\n        shape.clearLine2 = clearLine2;\r\n        shape.clearLine3 = clearLine3;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n  layer.add(customShape);\r\n  layer.draw();\r\n     dots[0].destroy();\r\n     dots[1].destroy();\r\n     layer.draw();\r\n\r\n  \r\n     dots.length = 0 ;\r\n     stage.on(\"click\",handleClick2);\r\n     document.querySelector(\".rectAngle-confirm7\").removeEventListener(\"click\",handleConfirm7);\r\n\r\n     while (document.querySelector(\".div13\").lastChild) {\r\n       document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n      }\r\n\r\n\r\n       document.querySelector(\".div13\").parentNode.removeChild(document.querySelector(\".div13\"));\r\n\r\n  };\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceFirstTopNextRightPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceLeftBottomCheckSquareModule.js":
/*!************************************************************!*\
  !*** ./Public/App/src/SpaceLeftBottomCheckSquareModule.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function leftBottomCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle1.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n        const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n        const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    \r\n        const clear = [minX-1, minY, maxX - minX, maxY - minY];\r\n    \r\n        console.log(clear);\r\n    \r\n        context.clearRect(...clear);\r\n    \r\n        shape.clear = clear;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle1.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#F0BE99', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#F0BE99', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceLeftBottomCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceLeftBottomCheckTriangleModule.js":
/*!**************************************************************!*\
  !*** ./Public/App/src/SpaceLeftBottomCheckTriangleModule.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function leftBottomCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n      function handleConfirm13(){\r\n\r\n        const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1-1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3-1, y3];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n\r\n      circle1.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n      dashedLine7.destroy();\r\n      dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n     \r\n     function handleConfirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1-1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3-1, y3];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1-1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3-1, y3];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#F0BE99', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#F0BE99', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle1.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n    };\r\n\r\n  };\r\n  \r\n\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceLeftBottomCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceLeftBottomLengthModule.js":
/*!*******************************************************!*\
  !*** ./Public/App/src/SpaceLeftBottomLengthModule.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function leftBottomLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm5){\r\n\r\n  if(Number.isNaN(size3Num)){\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";\r\n   } else {\r\n\r\n// 長さを格納する変数\r\nlet length2 = size3Num; \r\n\r\ncircle2.destroy();\r\nmidRect.destroy();\r\ndashedLine5.destroy();\r\n\r\n// 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\nconst newRightCircleX = rectangle.y() + rectangle.height() - length2;\r\n\r\n// 右の丸い点の座標を更新\r\ncircle1.y(newRightCircleX);\r\nlayer.draw();\r\n\r\n\r\n // 丸い点の座標を取得\r\n const x = circle1.x();\r\n const y = circle1.y();\r\n\r\n // 破線を作成\r\n const dashedLine6 = new Konva.Line({\r\n   points: [x, y, x , y - length], // 例としてX座標から100ピクセル右に破線を表示\r\n   stroke: 'red',\r\n   strokeWidth: 2,\r\n   lineCap: 'round',\r\n   dash: [5, 10],\r\n });\r\n\r\n // 新しい丸い点を作成\r\n const newCircle = new Konva.Circle({\r\n   x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n   y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n   radius: 5,\r\n   fill: 'red',\r\n });\r\n\r\n const x2 = newCircle.x();\r\n const y2 = newCircle.y();\r\n\r\n const newRectX = (x + x2) / 2;\r\n const newRectY = (y + y2) / 2;\r\n const newRect = new Konva.Rect({\r\n   x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n   y: newRectY - 5,\r\n   width: 10,\r\n   height: 10,\r\n   fill: 'red',\r\n });\r\n\r\n layer.add(dashedLine6);\r\n layer.add(newCircle); \r\n layer.add(newRect);\r\n layer.draw();\r\n\r\n\r\n\r\nconst paturnText = document.createElement('p');\r\npaturnText.classList.add(\"paturn-text\");\r\n\r\nconst check1 = document.createElement('input');\r\ncheck1.type = \"checkbox\";\r\ncheck1.classList.add(\"check1\");\r\ncheck1.name = \"check\";\r\n\r\nconst check2 = document.createElement('input');\r\ncheck2.type = \"checkbox\";\r\ncheck2.classList.add(\"check2\");\r\ncheck2.name = \"check\";\r\n\r\nconst paturn1 = document.createElement('img');\r\npaturn1.src = \"/images/paturn1.png\";\r\npaturn1.classList.add(\"paturn1\");\r\n\r\nconst paturn2 = document.createElement('img');\r\npaturn2.src = \"/images/paturn2.png\";\r\npaturn2.classList.add(\"paturn2\");\r\n\r\nconst rectAngleSizeForm28 = document.createElement('input');\r\nrectAngleSizeForm28.type = \"text\";\r\nrectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\nrectAngleSizeForm28.placeholder = \"右方向に縮める長さを入力\";\r\n\r\nconst rectAngleSizeForm29 = document.createElement('input');\r\nrectAngleSizeForm29.type = \"text\";\r\nrectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\nrectAngleSizeForm29.placeholder = \"左方向に伸ばす長さを入力\";\r\n\r\nconst rectAngleConfirm11 = document.createElement('button');\r\nrectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\nrectAngleConfirm11.append(\"決定\");\r\n\r\nconst div22 = document.createElement(\"div\");\r\ndiv22.classList.add(\"div22\");\r\n\r\nconst div21 = document.createElement(\"div\");\r\ndiv21.classList.add(\"div21\");\r\n\r\nconst note13 = document.createElement(\"p\");\r\nnote13.classList.add(\"note13\");\r\n\r\ndiv22.append(note13);\r\ndiv22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\ndiv21.append(div22);\r\nspacecenterInner.append(div21);\r\n\r\ndocument.querySelector(\".note13\").textContent = \"右方向または左方向のどちらかを入力してください\";\r\ndocument.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\nconst check = document.querySelectorAll(\"[name=check\");\r\nfor(let i = 0; i < 2; i++){\r\ncheck[i].addEventListener(\"click\",function(){\r\n  const currentItem = this;\r\n  if(currentItem.checked){\r\n    check[0].checked = false;\r\n    check[1].checked = false;\r\n    currentItem.checked = true;\r\n  };\r\n});\r\n};\r\n\r\ndocument.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\ndocument.querySelector(\".rectAngle-confirm5\").removeEventListener(\"click\",handleConfirm5);\r\n\r\n\r\n\r\nwhile (document.querySelector(\".div9\").lastChild) {\r\n  document.querySelector(\".div9\").removeChild(document.querySelector(\".div9\").lastChild);\r\n  console.log(\"while\");\r\n }\r\n\r\n document.querySelector(\".div9\").parentNode.removeChild(document.querySelector(\".div9\"));\r\n\r\n  \r\n function handleConfirm11(){\r\n\r\nif(check[0].checked){\r\n\r\n  const  leftBottomCheckTriangle  = __webpack_require__(/*! src/SpaceLeftBottomCheckTriangleModule */ \"./Public/App/src/SpaceLeftBottomCheckTriangleModule.js\");\r\n  const leftBottomCheckTriangle2 = () =>{\r\n\r\n    leftBottomCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5)\r\n\r\n  };\r\n\r\n  leftBottomCheckTriangle2();\r\n\r\n\r\n}else if(check[1].checked){\r\n\r\n  const  leftBottomCheckSquare  = __webpack_require__(/*! src/SpaceLeftBottomCheckSquareModule */ \"./Public/App/src/SpaceLeftBottomCheckSquareModule.js\");\r\n  const leftBottomCheckSquare2 = () =>{\r\n\r\n    leftBottomCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5)\r\n\r\n  };\r\n\r\n  leftBottomCheckSquare2();\r\n\r\n\r\n\r\n}else{\r\n\r\n  const sizeFormError7 = document.createElement(\"p\");\r\n  sizeFormError7.classList.add(\"size-form-error7\");\r\n  div22.append(sizeFormError7);\r\n  document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n}\r\n\r\n};\r\n\r\n};\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceLeftBottomLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceLeftTopCheckSquareModule.js":
/*!*********************************************************!*\
  !*** ./Public/App/src/SpaceLeftTopCheckSquareModule.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function leftTopCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle2.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n        const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n        const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    \r\n        const clear = [minX-1, minY, maxX - minX, maxY - minY];\r\n    \r\n        console.log(clear);\r\n    \r\n        context.clearRect(...clear);\r\n    \r\n        shape.clear = clear;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle2.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#F0BE99', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#F0BE99', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n    };\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceLeftTopCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceLeftTopCheckTriangleModule.js":
/*!***********************************************************!*\
  !*** ./Public/App/src/SpaceLeftTopCheckTriangleModule.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function leftTopCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n      function handleConfirm13(){\r\n\r\n        const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1-1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3-1, y3];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n      dashedLine7.destroy();\r\n      dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n     \r\n     function handleConfirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1-1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3-1, y3];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n\r\n            const clearLine1 = [x1-1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3-1, y3];\r\n\r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#F0BE99', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#F0BE99', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n\r\n        };\r\n       };\r\n\r\n     };\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceLeftTopCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceLeftTopLengthModule.js":
/*!****************************************************!*\
  !*** ./Public/App/src/SpaceLeftTopLengthModule.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function leftTopLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm5){\r\n\r\n  if(Number.isNaN(size2Num)){\r\n\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError3);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n   } else{\r\n     console.log(\"A\");\r\n\r\n  // 長さを格納する変数\r\n  let length2 = size2Num; \r\n\r\n  circle1.destroy();\r\n  midRect.destroy();\r\n  dashedLine5.destroy();\r\n\r\n  // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n  const newRightCircleX = rectangle.y() + length2;\r\n\r\n  // 右の丸い点の座標を更新\r\n  circle2.y(newRightCircleX);\r\n  layer.draw();\r\n\r\n  \r\n    // 丸い点の座標を取得\r\n    const x = circle2.x();\r\n    const y = circle2.y();\r\n\r\n    // 破線を作成\r\n    const dashedLine6 = new Konva.Line({\r\n      points: [x, y, x , y + length], // 例としてX座標から100ピクセル右に破線を表示\r\n      stroke: 'red',\r\n      strokeWidth: 2,\r\n      lineCap: 'round',\r\n      dash: [5, 10],\r\n    });\r\n\r\n    // 新しい丸い点を作成\r\n    const newCircle = new Konva.Circle({\r\n      x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n      y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n      radius: 5,\r\n      fill: 'red',\r\n    });\r\n\r\n    const x2 = newCircle.x();\r\n    const y2 = newCircle.y();\r\n\r\n    const newRectX = (x + x2) / 2;\r\n    const newRectY = (y + y2) / 2;\r\n    const newRect = new Konva.Rect({\r\n      x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n      y: newRectY - 5,\r\n      width: 10,\r\n      height: 10,\r\n      fill: 'red',\r\n    });\r\n\r\n    layer.add(dashedLine6);\r\n    layer.add(newCircle); \r\n    layer.add(newRect);\r\n    layer.draw();\r\n \r\n\r\n const paturnText = document.createElement('p');\r\n paturnText.classList.add(\"paturn-text\");\r\n\r\n const check1 = document.createElement('input');\r\n check1.type = \"checkbox\";\r\n check1.classList.add(\"check1\");\r\n check1.name = \"check\";\r\n\r\n const check2 = document.createElement('input');\r\n check2.type = \"checkbox\";\r\n check2.classList.add(\"check2\");\r\n check2.name = \"check\";\r\n\r\n const paturn1 = document.createElement('img');\r\n paturn1.src = \"/images/paturn1.png\";\r\n paturn1.classList.add(\"paturn1\");\r\n\r\n const paturn2 = document.createElement('img');\r\n paturn2.src = \"/images/paturn2.png\";\r\n paturn2.classList.add(\"paturn2\");\r\n\r\n const rectAngleSizeForm28 = document.createElement('input');\r\n rectAngleSizeForm28.type = \"text\";\r\n rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n rectAngleSizeForm28.placeholder = \"右方向に縮める長さを入力\";\r\n\r\n const rectAngleSizeForm29 = document.createElement('input');\r\n rectAngleSizeForm29.type = \"text\";\r\n rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n rectAngleSizeForm29.placeholder = \"左方向に伸ばす長さを入力\";\r\n\r\n const rectAngleConfirm11 = document.createElement('button');\r\n rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n rectAngleConfirm11.append(\"決定\");\r\n\r\n const div22 = document.createElement(\"div\");\r\n div22.classList.add(\"div22\");\r\n\r\n const div21 = document.createElement(\"div\");\r\n div21.classList.add(\"div21\");\r\n\r\n const note13 = document.createElement(\"p\");\r\n note13.classList.add(\"note13\");\r\n\r\n div22.append(note13);\r\n div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n div21.append(div22);\r\n spacecenterInner.append(div21);\r\n\r\n document.querySelector(\".note13\").textContent = \"右方向または左方向のどちらかを入力してください\";\r\n document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n const check = document.querySelectorAll(\"[name=check\");\r\n for(let i = 0; i < 2; i++){\r\n   check[i].addEventListener(\"click\",function(){\r\n     const currentItem = this;\r\n     if(currentItem.checked){\r\n       check[0].checked = false;\r\n       check[1].checked = false;\r\n       currentItem.checked = true;\r\n     };\r\n   });\r\n };\r\n\r\n document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\n document.querySelector(\".rectAngle-confirm5\").removeEventListener(\"click\",handleConfirm5);\r\n\r\n\r\n\r\n while (document.querySelector(\".div9\").lastChild) {\r\n   document.querySelector(\".div9\").removeChild(document.querySelector(\".div9\").lastChild);\r\n   console.log(\"while\");\r\n  }\r\n\r\n  document.querySelector(\".div9\").parentNode.removeChild(document.querySelector(\".div9\"));\r\n\r\n\r\n  function handleConfirm11(){\r\n\r\n   if(check[0].checked){\r\n\r\n    const  leftTopCheckTriangle  = __webpack_require__(/*! src/SpaceLeftTopCheckTriangleModule */ \"./Public/App/src/SpaceLeftTopCheckTriangleModule.js\");\r\n    const leftTopCheckTriangle2 = () =>{\r\n\r\n      leftTopCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5)\r\n\r\n    };\r\n\r\n    leftTopCheckTriangle2();\r\n\r\n\r\n\r\n   }else if(check[1].checked){\r\n\r\n    const  leftTopCheckSquare  = __webpack_require__(/*! src/SpaceLeftTopCheckSquareModule */ \"./Public/App/src/SpaceLeftTopCheckSquareModule.js\");\r\n    const leftTopCheckSquare2 = () =>{\r\n\r\n      leftTopCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm5)\r\n\r\n    };\r\n\r\n    leftTopCheckSquare2();\r\n\r\n\r\n\r\n   }else{\r\n\r\n     const sizeFormError7 = document.createElement(\"p\");\r\n     sizeFormError7.classList.add(\"size-form-error7\");\r\n     div22.append(sizeFormError7);\r\n     document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n   }\r\n\r\n };\r\n};\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceLeftTopLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceLeftTwoPointsModule.js":
/*!****************************************************!*\
  !*** ./Public/App/src/SpaceLeftTwoPointsModule.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function leftTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length){\r\n\r\n  const rectAngleSizeForm8 = document.createElement('input');\r\n  rectAngleSizeForm8.type = \"text\";\r\n  rectAngleSizeForm8.classList.add(\"rectAngle-SizeForm8\");\r\n  rectAngleSizeForm8.placeholder = \"上端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm9 = document.createElement('input');\r\n  rectAngleSizeForm9.type = \"text\";\r\n  rectAngleSizeForm9.classList.add(\"rectAngle-SizeForm9\");\r\n  rectAngleSizeForm9.placeholder = \"下端からの長さを入力\";\r\n\r\n  const rectAngleConfirm5 = document.createElement('button');\r\n  rectAngleConfirm5.classList.add(\"rectAngle-confirm5\");\r\n  rectAngleConfirm5.append(\"決定\");\r\n\r\n  const div10 = document.createElement(\"div\");\r\n  div10.classList.add(\"div10\");\r\n\r\n  const div9 = document.createElement(\"div\");\r\n  div9.classList.add(\"div9\");\r\n\r\n  const note3 = document.createElement(\"p\");\r\n  note3.classList.add(\"note3\");\r\n\r\n  div10.append(note3);\r\n  div10.append(rectAngleSizeForm8,rectAngleSizeForm9,rectAngleConfirm5);\r\n\r\n  div9.append(div10);\r\n  spacecenterInner.append(div9);\r\n\r\n  document.querySelector(\".note3\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n\r\n  // 四角の中心座標を取得\r\n  const midRectX = midRect.x() + midRect.width() / 2;\r\n  const midRectY = midRect.y() + midRect.height() / 2;\r\n\r\n   // 縦破線を描画する座標を計算\r\n   const dashedLineX1 = midRectX;\r\n   const dashedLineY1 = midRectY - length / 2;\r\n   const dashedLineX2 = midRectX;\r\n   const dashedLineY2 = midRectY + length / 2;\r\n\r\n  // 破線を作成\r\n  const dashedLine5 = new Konva.Line({\r\n    points: [dashedLineX1, dashedLineY1, dashedLineX2, dashedLineY2],\r\n    stroke: 'red',\r\n    strokeWidth: 2,\r\n    dash: [5, 10], // 破線のパターンを指定（length変数の値を使用）\r\n  });\r\n\r\n  // 丸い点を作成\r\n  const circle1 = new Konva.Circle({\r\n    x: dashedLineX1,\r\n    y: dashedLineY1,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  const circle2 = new Konva.Circle({\r\n    x: dashedLineX2,\r\n    y: dashedLineY2,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  // レイヤーに追加\r\n  layer.add(dashedLine5, circle1, circle2, midRect);\r\n  stage.add(layer);\r\n\r\n  document.querySelector(\".rectAngle-confirm5\").addEventListener(\"click\",handleConfirm5);\r\n\r\n  document.querySelector(\".rectAngle-confirm2\").removeEventListener(\"click\",handleConfirm2);\r\n      \r\n  while (document.querySelector(\".div3\").lastChild) {\r\n    document.querySelector(\".div3\").removeChild(document.querySelector(\".div3\").lastChild);\r\n    console.log(\"while0\");\r\n\r\n   }\r\n\r\n   document.querySelector(\".div3\").parentNode.removeChild(document.querySelector(\".div3\"));\r\n\r\n   function handleConfirm5(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm8\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm9\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    \r\n    \r\n    if(size2 !== \"\" && size3 === \"\"){\r\n\r\n      const  leftTopLength  = __webpack_require__(/*! src/SpaceLeftTopLengthModule */ \"./Public/App/src/SpaceLeftTopLengthModule.js\");\r\n      const leftTopLength2 = () =>{\r\n  \r\n        leftTopLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm5)\r\n  \r\n      };\r\n  \r\n      leftTopLength2();\r\n\r\n\r\n    } else if(size3 !== \"\" && size2 === \"\"){\r\n\r\n      const  leftBottomLength  = __webpack_require__(/*! src/SpaceLeftBottomLengthModule */ \"./Public/App/src/SpaceLeftBottomLengthModule.js\");\r\n      const leftBottomLength2 = () =>{\r\n  \r\n        leftBottomLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm5)\r\n  \r\n      };\r\n  \r\n      leftBottomLength2();\r\n\r\n\r\n    };  \r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceLeftTwoPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceRightBottomCheckSquareModule.js":
/*!*************************************************************!*\
  !*** ./Public/App/src/SpaceRightBottomCheckSquareModule.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("module.exports = function rightBottomCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle1.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#F0BE99', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#F0BE99', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle1.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n        const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n        const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    \r\n        const clear = [minX+1, minY, maxX - minX, maxY - minY];\r\n    \r\n        console.log(clear);\r\n    \r\n        context.clearRect(...clear);\r\n    \r\n        shape.clear = clear;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceRightBottomCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceRightBottomCheckTriangleModule.js":
/*!***************************************************************!*\
  !*** ./Public/App/src/SpaceRightBottomCheckTriangleModule.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function rightBottomCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n      function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#F0BE99', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#F0BE99', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle1.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n     \r\n     function handleConfirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n\r\n        };\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n\r\n        };\r\n       };\r\n\r\n     };\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const customShape = new Konva.Shape({\r\n\r\n        sceneFunc: function (context, shape) {\r\n      \r\n          const x1 = circleX1; // 三角形の頂点1の X 座標\r\n          const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n          const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n          const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n          const x3 = circleX2; // 三角形の頂点3の X 座標\r\n          const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n          const clearLine1 = [x1+1, y1];\r\n          const clearLine2 = [x2, y2];\r\n          const clearLine3 = [x3+1, y3];\r\n\r\n          context.beginPath();\r\n          context.moveTo(...clearLine1);\r\n          context.lineTo(...clearLine2);\r\n          context.lineTo(...clearLine3);\r\n          context.closePath();\r\n      \r\n          // 三角形のパスをクリアする\r\n          context.globalCompositeOperation = 'destination-out';\r\n          context.fill();\r\n          context.globalCompositeOperation = 'source-over';\r\n      \r\n          shape.clearLine1 = clearLine1;\r\n          shape.clearLine2 = clearLine2;\r\n          shape.clearLine3 = clearLine3;\r\n      \r\n        },\r\n      \r\n        \r\n      });\r\n      \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n      circle1.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n      dashedLine7.destroy();\r\n      dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else {\r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1+1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3+1, y3];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1+1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3+1, y3];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceRightBottomCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceRightBottomLengthModule.js":
/*!********************************************************!*\
  !*** ./Public/App/src/SpaceRightBottomLengthModule.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function rightBottomLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm4){\r\n\r\n  if(Number.isNaN(size3Num)){\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";\r\n   } else {\r\n\r\n// 長さを格納する変数\r\nlet length2 = size3Num; \r\n\r\ncircle2.destroy();\r\nmidRect.destroy();\r\ndashedLine5.destroy();\r\n\r\n// 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\nconst newRightCircleX = rectangle.y() + rectangle.height() - length2;\r\n\r\n// 右の丸い点の座標を更新\r\ncircle1.y(newRightCircleX);\r\nlayer.draw();\r\n\r\n\r\n // 丸い点の座標を取得\r\n const x = circle1.x();\r\n const y = circle1.y();\r\n\r\n // 破線を作成\r\n const dashedLine6 = new Konva.Line({\r\n   points: [x, y, x , y - length], // 例としてX座標から100ピクセル右に破線を表示\r\n   stroke: 'red',\r\n   strokeWidth: 2,\r\n   lineCap: 'round',\r\n   dash: [5, 10],\r\n });\r\n\r\n // 新しい丸い点を作成\r\n const newCircle = new Konva.Circle({\r\n   x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n   y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n   radius: 5,\r\n   fill: 'red',\r\n });\r\n\r\n const x2 = newCircle.x();\r\n const y2 = newCircle.y();\r\n\r\n const newRectX = (x + x2) / 2;\r\n const newRectY = (y + y2) / 2;\r\n const newRect = new Konva.Rect({\r\n   x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n   y: newRectY - 5,\r\n   width: 10,\r\n   height: 10,\r\n   fill: 'red',\r\n });\r\n\r\n layer.add(dashedLine6);\r\n layer.add(newCircle); \r\n layer.add(newRect);\r\n layer.draw();\r\n\r\n\r\nconst paturnText = document.createElement('p');\r\npaturnText.classList.add(\"paturn-text\");\r\n\r\nconst check1 = document.createElement('input');\r\ncheck1.type = \"checkbox\";\r\ncheck1.classList.add(\"check1\");\r\ncheck1.name = \"check\";\r\n\r\nconst check2 = document.createElement('input');\r\ncheck2.type = \"checkbox\";\r\ncheck2.classList.add(\"check2\");\r\ncheck2.name = \"check\";\r\n\r\nconst paturn1 = document.createElement('img');\r\npaturn1.src = \"/images/paturn1.png\";\r\npaturn1.classList.add(\"paturn1\");\r\n\r\nconst paturn2 = document.createElement('img');\r\npaturn2.src = \"/images/paturn2.png\";\r\npaturn2.classList.add(\"paturn2\");\r\n\r\nconst rectAngleSizeForm28 = document.createElement('input');\r\nrectAngleSizeForm28.type = \"text\";\r\nrectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\nrectAngleSizeForm28.placeholder = \"右方向に伸ばす長さを入力\";\r\n\r\nconst rectAngleSizeForm29 = document.createElement('input');\r\nrectAngleSizeForm29.type = \"text\";\r\nrectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\nrectAngleSizeForm29.placeholder = \"左方向に縮める長さを入力\";\r\n\r\nconst rectAngleConfirm11 = document.createElement('button');\r\nrectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\nrectAngleConfirm11.append(\"決定\");\r\n\r\nconst div22 = document.createElement(\"div\");\r\ndiv22.classList.add(\"div22\");\r\n\r\nconst div21 = document.createElement(\"div\");\r\ndiv21.classList.add(\"div21\");\r\n\r\nconst note13 = document.createElement(\"p\");\r\nnote13.classList.add(\"note13\");\r\n\r\ndiv22.append(note13);\r\ndiv22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\ndiv21.append(div22);\r\nspacecenterInner.append(div21);\r\n\r\ndocument.querySelector(\".note13\").textContent = \"右方向または左方向のどちらかを入力してください\";\r\ndocument.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\nconst check = document.querySelectorAll(\"[name=check\");\r\nfor(let i = 0; i < 2; i++){\r\ncheck[i].addEventListener(\"click\",function(){\r\n  const currentItem = this;\r\n  if(currentItem.checked){\r\n    check[0].checked = false;\r\n    check[1].checked = false;\r\n    currentItem.checked = true;\r\n  };\r\n});\r\n};\r\n\r\n\r\n\r\ndocument.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\ndocument.querySelector(\".rectAngle-confirm4\").removeEventListener(\"click\",handleConfirm4);\r\n\r\n\r\n\r\nwhile (document.querySelector(\".div7\").lastChild) {\r\n  document.querySelector(\".div7\").removeChild(document.querySelector(\".div7\").lastChild);\r\n  console.log(\"while\");\r\n }\r\n\r\n document.querySelector(\".div7\").parentNode.removeChild(document.querySelector(\".div7\"));\r\n\r\n  \r\n function handleConfirm11(){\r\n\r\nif(check[0].checked){\r\n\r\n  const  rightBottomCheckTriangle  = __webpack_require__(/*! src/SpaceRightBottomCheckTriangleModule */ \"./Public/App/src/SpaceRightBottomCheckTriangleModule.js\");\r\n  const rightBottomCheckTriangle2 = () =>{\r\n\r\n    rightBottomCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4)\r\n\r\n  };\r\n\r\n  rightBottomCheckTriangle2();\r\n\r\n\r\n\r\n}else if(check[1].checked){\r\n\r\n  const  rightBottomCheckSquare  = __webpack_require__(/*! src/SpaceRightBottomCheckSquareModule */ \"./Public/App/src/SpaceRightBottomCheckSquareModule.js\");\r\n  const rightBottomCheckSquare2 = () =>{\r\n\r\n    rightBottomCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4)\r\n\r\n  };\r\n\r\n  rightBottomCheckSquare2();\r\n\r\n\r\n\r\n}else{\r\n\r\n  const sizeFormError7 = document.createElement(\"p\");\r\n  sizeFormError7.classList.add(\"size-form-error7\");\r\n  div22.append(sizeFormError7);\r\n  document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n}\r\n\r\n};\r\n\r\n};\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceRightBottomLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceRightTopCheckSquareModule.js":
/*!**********************************************************!*\
  !*** ./Public/App/src/SpaceRightTopCheckSquareModule.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function rightTopCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle2.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#F0BE99', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#F0BE99', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionY1 = newCircle.y(); \r\n    const intersectionX1 = newRect.x()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionY2 = circle2.y(); \r\n    const intersectionX2 = newRect.x()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n        const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n        const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    \r\n        const clear = [minX+1, minY, maxX - minX, maxY - minY];\r\n    \r\n        console.log(clear);\r\n    \r\n        context.clearRect(...clear);\r\n    \r\n        shape.clear = clear;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n  };\r\n\r\n};\r\n\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceRightTopCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceRightTopCheckTriangleModule.js":
/*!************************************************************!*\
  !*** ./Public/App/src/SpaceRightTopCheckTriangleModule.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function rightTopCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 右に移動させる距離を指定\r\n    const offsetX = size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n      function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#F0BE99', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#F0BE99', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n     \r\n     function handleConfirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n\r\n       };\r\n      };\r\n\r\n     };\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 左に移動させる距離を指定\r\n    const offsetX = -size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX + offsetX;\r\n    const newY = currentY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const customShape = new Konva.Shape({\r\n\r\n        sceneFunc: function (context, shape) {\r\n      \r\n          const x1 = circleX1; // 三角形の頂点1の X 座標\r\n          const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n          const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n          const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n          const x3 = circleX2; // 三角形の頂点3の X 座標\r\n          const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n          const clearLine1 = [x1+1, y1];\r\n          const clearLine2 = [x2, y2];\r\n          const clearLine3 = [x3+1, y3];\r\n\r\n          context.beginPath();\r\n          context.moveTo(...clearLine1);\r\n          context.lineTo(...clearLine2);\r\n          context.lineTo(...clearLine3);\r\n          context.closePath();\r\n      \r\n          // 三角形のパスをクリアする\r\n          context.globalCompositeOperation = 'destination-out';\r\n          context.fill();\r\n          context.globalCompositeOperation = 'source-over';\r\n      \r\n          shape.clearLine1 = clearLine1;\r\n          shape.clearLine2 = clearLine2;\r\n          shape.clearLine3 = clearLine3;\r\n      \r\n        },\r\n      \r\n        \r\n      });\r\n      \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n      dashedLine7.destroy();\r\n      dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else { \r\n  \r\n         const offsetX = -size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1+1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3+1, y3];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX;\r\n         const newY = currentY + offsetX;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1+1, y1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3+1, y3];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n    };\r\n\r\n  };\r\n\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceRightTopCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceRightTopLengthModule.js":
/*!*****************************************************!*\
  !*** ./Public/App/src/SpaceRightTopLengthModule.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function rightTopLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm4){\r\n\r\n  if(Number.isNaN(size2Num)){\r\n\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError3);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n   } else {\r\n     console.log(\"A\");\r\n\r\n  // 長さを格納する変数\r\n  let length2 = size2Num; \r\n\r\n  circle1.destroy();\r\n  midRect.destroy();\r\n  dashedLine5.destroy();\r\n\r\n  // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n  const newRightCircleX = rectangle.y() + length2;\r\n\r\n  // 右の丸い点の座標を更新\r\n  circle2.y(newRightCircleX);\r\n  layer.draw();\r\n\r\n  \r\n    // 丸い点の座標を取得\r\n    const x = circle2.x();\r\n    const y = circle2.y();\r\n\r\n    // 破線を作成\r\n    const dashedLine6 = new Konva.Line({\r\n      points: [x, y, x , y + length], // 例としてX座標から100ピクセル右に破線を表示\r\n      stroke: 'red',\r\n      strokeWidth: 2,\r\n      lineCap: 'round',\r\n      dash: [5, 10],\r\n    });\r\n\r\n    // 新しい丸い点を作成\r\n    const newCircle = new Konva.Circle({\r\n      x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n      y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n      radius: 5,\r\n      fill: 'red',\r\n    });\r\n\r\n    const x2 = newCircle.x();\r\n    const y2 = newCircle.y();\r\n\r\n    const newRectX = (x + x2) / 2;\r\n    const newRectY = (y + y2) / 2;\r\n    const newRect = new Konva.Rect({\r\n      x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n      y: newRectY - 5,\r\n      width: 10,\r\n      height: 10,\r\n      fill: 'red',\r\n    });\r\n\r\n    layer.add(dashedLine6);\r\n    layer.add(newCircle); \r\n    layer.add(newRect);\r\n    layer.draw();\r\n \r\n\r\n\r\n\r\n const paturnText = document.createElement('p');\r\n paturnText.classList.add(\"paturn-text\");\r\n\r\n const check1 = document.createElement('input');\r\n check1.type = \"checkbox\";\r\n check1.classList.add(\"check1\");\r\n check1.name = \"check\";\r\n\r\n const check2 = document.createElement('input');\r\n check2.type = \"checkbox\";\r\n check2.classList.add(\"check2\");\r\n check2.name = \"check\";\r\n\r\n const paturn1 = document.createElement('img');\r\n paturn1.src = \"/images/paturn1.png\";\r\n paturn1.classList.add(\"paturn1\");\r\n\r\n const paturn2 = document.createElement('img');\r\n paturn2.src = \"/images/paturn2.png\";\r\n paturn2.classList.add(\"paturn2\");\r\n\r\n const rectAngleSizeForm28 = document.createElement('input');\r\n rectAngleSizeForm28.type = \"text\";\r\n rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n rectAngleSizeForm28.placeholder = \"右方向に伸ばす長さを入力\";\r\n\r\n const rectAngleSizeForm29 = document.createElement('input');\r\n rectAngleSizeForm29.type = \"text\";\r\n rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n rectAngleSizeForm29.placeholder = \"左方向に縮める長さを入力\";\r\n\r\n const rectAngleConfirm11 = document.createElement('button');\r\n rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n rectAngleConfirm11.append(\"決定\");\r\n\r\n const div22 = document.createElement(\"div\");\r\n div22.classList.add(\"div22\");\r\n\r\n const div21 = document.createElement(\"div\");\r\n div21.classList.add(\"div21\");\r\n\r\n const note13 = document.createElement(\"p\");\r\n note13.classList.add(\"note13\");\r\n\r\n div22.append(note13);\r\n div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n div21.append(div22);\r\n spacecenterInner.append(div21);\r\n\r\n document.querySelector(\".note13\").textContent = \"右方向または左方向のどちらかを入力してください\";\r\n document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n const check = document.querySelectorAll(\"[name=check\");\r\n for(let i = 0; i < 2; i++){\r\n   check[i].addEventListener(\"click\",function(){\r\n     const currentItem = this;\r\n     if(currentItem.checked){\r\n       check[0].checked = false;\r\n       check[1].checked = false;\r\n       currentItem.checked = true;\r\n     };\r\n   });\r\n };\r\n\r\n document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\n document.querySelector(\".rectAngle-confirm4\").removeEventListener(\"click\",handleConfirm4);\r\n\r\n\r\n\r\n while (document.querySelector(\".div7\").lastChild) {\r\n   document.querySelector(\".div7\").removeChild(document.querySelector(\".div7\").lastChild);\r\n   console.log(\"while\");\r\n  }\r\n\r\n  document.querySelector(\".div7\").parentNode.removeChild(document.querySelector(\".div7\"));\r\n\r\n\r\n  function handleConfirm11(){\r\n\r\n   if(check[0].checked){\r\n\r\n    const  rightTopCheckTriangle  = __webpack_require__(/*! src/SpaceRightTopCheckTriangleModule */ \"./Public/App/src/SpaceRightTopCheckTriangleModule.js\");\r\n    const rightTopCheckTriangle2 = () =>{\r\n\r\n      rightTopCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4)\r\n\r\n    };\r\n\r\n    rightTopCheckTriangle2();\r\n\r\n\r\n   }else if(check[1].checked){\r\n\r\n    const  rightTopCheckSquare  = __webpack_require__(/*! src/SpaceRightTopCheckSquareModule */ \"./Public/App/src/SpaceRightTopCheckSquareModule.js\");\r\n    const rightTopCheckSquare2 = () =>{\r\n\r\n      rightTopCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,check,dashedLine6,newCircle,newRect,handleConfirm11,handleConfirm4)\r\n\r\n    };\r\n\r\n    rightTopCheckSquare2();\r\n\r\n\r\n\r\n   }else{\r\n\r\n     const sizeFormError7 = document.createElement(\"p\");\r\n     sizeFormError7.classList.add(\"size-form-error7\");\r\n     div22.append(sizeFormError7);\r\n     document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n   }\r\n\r\n };\r\n};\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceRightTopLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceRightTwoPointsModule.js":
/*!*****************************************************!*\
  !*** ./Public/App/src/SpaceRightTwoPointsModule.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function rightTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length){\r\n\r\n  const rectAngleSizeForm6 = document.createElement('input');\r\n  rectAngleSizeForm6.type = \"text\";\r\n  rectAngleSizeForm6.classList.add(\"rectAngle-SizeForm6\");\r\n  rectAngleSizeForm6.placeholder = \"上端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm7 = document.createElement('input');\r\n  rectAngleSizeForm7.type = \"text\";\r\n  rectAngleSizeForm7.classList.add(\"rectAngle-SizeForm7\");\r\n  rectAngleSizeForm7.placeholder = \"下端からの長さを入力\";\r\n\r\n  const rectAngleConfirm4 = document.createElement('button');\r\n  rectAngleConfirm4.classList.add(\"rectAngle-confirm4\");\r\n  rectAngleConfirm4.append(\"決定\");\r\n\r\n  const div8 = document.createElement(\"div\");\r\n  div8.classList.add(\"div8\");\r\n\r\n  const div7 = document.createElement(\"div\");\r\n  div7.classList.add(\"div7\");\r\n\r\n  const note2 = document.createElement(\"p\");\r\n  note2.classList.add(\"note2\");\r\n\r\n  div8.append(note2);\r\n  div8.append(rectAngleSizeForm6,rectAngleSizeForm7,rectAngleConfirm4);\r\n\r\n  div7.append(div8);\r\n  spacecenterInner.append(div7);\r\n  \r\n  document.querySelector(\".note2\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n\r\n   // 四角の中心座標を取得\r\n  const midRectX = midRect.x() + midRect.width() / 2;\r\n  const midRectY = midRect.y() + midRect.height() / 2;\r\n\r\n   // 縦破線を描画する座標を計算\r\n   const dashedLineX1 = midRectX;\r\n   const dashedLineY1 = midRectY - length / 2;\r\n   const dashedLineX2 = midRectX;\r\n   const dashedLineY2 = midRectY + length / 2;\r\n\r\n  // 破線を作成\r\n  const dashedLine5 = new Konva.Line({\r\n    points: [dashedLineX1, dashedLineY1, dashedLineX2, dashedLineY2],\r\n    stroke: 'red',\r\n    strokeWidth: 2,\r\n    dash: [5, 10], // 破線のパターンを指定（length変数の値を使用）\r\n  });\r\n\r\n  // 丸い点を作成\r\n  const circle1 = new Konva.Circle({\r\n    x: dashedLineX1,\r\n    y: dashedLineY1,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  const circle2 = new Konva.Circle({\r\n    x: dashedLineX2,\r\n    y: dashedLineY2,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  // レイヤーに追加\r\n\r\n  layer.add(dashedLine5, circle1, circle2, midRect);\r\n  stage.add(layer);\r\n\r\n  document.querySelector(\".rectAngle-confirm4\").addEventListener(\"click\",handleConfirm4);\r\n\r\n  document.querySelector(\".rectAngle-confirm2\").removeEventListener(\"click\",handleConfirm2);\r\n      \r\n  while (document.querySelector(\".div3\").lastChild) {\r\n    document.querySelector(\".div3\").removeChild(document.querySelector(\".div3\").lastChild);\r\n    console.log(\"while0\");\r\n\r\n   }\r\n\r\n   document.querySelector(\".div3\").parentNode.removeChild(document.querySelector(\".div3\"));\r\n\r\n   function handleConfirm4(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm6\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm7\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    \r\n    \r\n    if(size2 !== \"\" && size3 === \"\"){\r\n\r\n      const  rightTopLength  = __webpack_require__(/*! src/SpaceRightTopLengthModule */ \"./Public/App/src/SpaceRightTopLengthModule.js\");\r\n      const rightTopLength2 = () =>{\r\n  \r\n        rightTopLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm4)\r\n  \r\n      };\r\n  \r\n      rightTopLength2();\r\n\r\n\r\n    } else if(size3 !== \"\" && size2 === \"\"){\r\n\r\n      const  rightBottomLength  = __webpack_require__(/*! src/SpaceRightBottomLengthModule */ \"./Public/App/src/SpaceRightBottomLengthModule.js\");\r\n      const rightBottomLength2 = () =>{\r\n  \r\n        rightBottomLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm4)\r\n  \r\n      };\r\n  \r\n      rightBottomLength2();\r\n\r\n    };  \r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceRightTwoPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceSideBottomLeftPointsModule.js":
/*!***********************************************************!*\
  !*** ./Public/App/src/SpaceSideBottomLeftPointsModule.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function sideBottomLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2){\r\n  stage.off(\"click\",handleClick2);\r\n\r\n  const rectAngleSizeForm24 = document.createElement('input');\r\n  rectAngleSizeForm24.type = \"text\";\r\n  rectAngleSizeForm24.classList.add(\"rectAngle-SizeForm24\");\r\n  rectAngleSizeForm24.placeholder = \"下辺丸点の左端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm25 = document.createElement('input');\r\n  rectAngleSizeForm25.type = \"text\";\r\n  rectAngleSizeForm25.classList.add(\"rectAngle-SizeForm25\");\r\n  rectAngleSizeForm25.placeholder = \"下辺丸点の右端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm26 = document.createElement('input');\r\n  rectAngleSizeForm26.type = \"text\";\r\n  rectAngleSizeForm26.classList.add(\"rectAngle-SizeForm26\");\r\n  rectAngleSizeForm26.placeholder = \"左辺丸点の上端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm27 = document.createElement('input');\r\n  rectAngleSizeForm27.type = \"text\";\r\n  rectAngleSizeForm27.classList.add(\"rectAngle-SizeForm27\");\r\n  rectAngleSizeForm27.placeholder = \"左辺丸点の下端からの長さを入力\";\r\n\r\n  const rectAngleConfirm10 = document.createElement('button');\r\n  rectAngleConfirm10.classList.add(\"rectAngle-confirm10\");\r\n  rectAngleConfirm10.append(\"決定\");\r\n\r\n  const div20 = document.createElement(\"div\");\r\n  div20.classList.add(\"div20\");\r\n\r\n  const div19 = document.createElement(\"div\");\r\n  div19.classList.add(\"div19\");\r\n\r\n  const note11 = document.createElement(\"p\");\r\n  note11.classList.add(\"note11\");\r\n\r\n  const note12 = document.createElement(\"p\");\r\n  note12.classList.add(\"note12\");\r\n\r\n  div20.append(note11,note12);\r\n  div20.append(rectAngleSizeForm24,rectAngleSizeForm25,rectAngleSizeForm26,rectAngleSizeForm27,rectAngleConfirm10);\r\n\r\n  div19.append(div20);\r\n  spacecenterInner.append(div19);\r\n\r\n  document.querySelector(\".note11\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n  document.querySelector(\".note12\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n\r\n  document.querySelector(\".rectAngle-confirm10\").addEventListener(\"click\",handleConfirm10);\r\n  function handleConfirm10(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm24\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm25\").value;\r\n    const size4 =document.querySelector(\".rectAngle-SizeForm26\").value;\r\n    const size5 =document.querySelector(\".rectAngle-SizeForm27\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size4Y = Number.parseFloat(size4);\r\n    const size5Y = Number.parseFloat(size5);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    const size4Num = size4Y /1.06;\r\n    const size5Num = size5Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    console.log(size4Num)\r\n    console.log(size5Num)\r\n    \r\n    if (dots[0].y() === rectangle.y() + rectangle.height() && dots[1].x() === rectangle.x()) {\r\n    \r\n      const  firstLeftNextBottomPoints  = __webpack_require__(/*! src/SpaceFirstLeftNextBottomPointsModule */ \"./Public/App/src/SpaceFirstLeftNextBottomPointsModule.js\");\r\n      const firstLeftNextBottomPoints2 = () =>{\r\n  \r\n        firstLeftNextBottomPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm10,size2,size3,size4,size5)\r\n  \r\n      };\r\n  \r\n      firstLeftNextBottomPoints2();\r\n\r\n}else if (dots[0].x() === rectangle.x() && dots[1].y() === rectangle.y() + rectangle.height()) {\r\n\r\n        const  firstBottomNextLeftPoints  = __webpack_require__(/*! src/SpaceFirstBottomNextLeftPointsModule */ \"./Public/App/src/SpaceFirstBottomNextLeftPointsModule.js\");\r\n      const firstBottomNextLeftPoints2 = () =>{\r\n  \r\n        firstBottomNextLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm10,size2,size3,size4,size5)\r\n  \r\n      };\r\n  \r\n      firstBottomNextLeftPoints2();\r\n\r\n};\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceSideBottomLeftPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceSideBottomRightPointsModule.js":
/*!************************************************************!*\
  !*** ./Public/App/src/SpaceSideBottomRightPointsModule.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function sideBottomRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2){\r\n  stage.off(\"click\",handleClick2);\r\n\r\n  const rectAngleSizeForm20 = document.createElement('input');\r\n  rectAngleSizeForm20.type = \"text\";\r\n  rectAngleSizeForm20.classList.add(\"rectAngle-SizeForm20\");\r\n  rectAngleSizeForm20.placeholder = \"下辺丸点の左端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm21 = document.createElement('input');\r\n  rectAngleSizeForm21.type = \"text\";\r\n  rectAngleSizeForm21.classList.add(\"rectAngle-SizeForm21\");\r\n  rectAngleSizeForm21.placeholder = \"下辺丸点の右端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm22 = document.createElement('input');\r\n  rectAngleSizeForm22.type = \"text\";\r\n  rectAngleSizeForm22.classList.add(\"rectAngle-SizeForm22\");\r\n  rectAngleSizeForm22.placeholder = \"右辺丸点の上端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm23 = document.createElement('input');\r\n  rectAngleSizeForm23.type = \"text\";\r\n  rectAngleSizeForm23.classList.add(\"rectAngle-SizeForm23\");\r\n  rectAngleSizeForm23.placeholder = \"右辺丸点の下端からの長さを入力\";\r\n\r\n  const rectAngleConfirm9 = document.createElement('button');\r\n  rectAngleConfirm9.classList.add(\"rectAngle-confirm9\");\r\n  rectAngleConfirm9.append(\"決定\");\r\n\r\n  const div18 = document.createElement(\"div\");\r\n  div18.classList.add(\"div18\");\r\n\r\n  const div17 = document.createElement(\"div\");\r\n  div17.classList.add(\"div17\");\r\n\r\n  const note9 = document.createElement(\"p\");\r\n  note9.classList.add(\"note9\");\r\n\r\n  const note10 = document.createElement(\"p\");\r\n  note10.classList.add(\"note10\");\r\n\r\n  div18.append(note9,note10);\r\n  div18.append(rectAngleSizeForm20,rectAngleSizeForm21,rectAngleSizeForm22,rectAngleSizeForm23,rectAngleConfirm9);\r\n\r\n  div17.append(div18);\r\n  spacecenterInner.append(div17);\r\n\r\n  document.querySelector(\".note9\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n  document.querySelector(\".note10\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n\r\n  document.querySelector(\".rectAngle-confirm9\").addEventListener(\"click\",handleConfirm9);\r\n  function handleConfirm9(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm20\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm21\").value;\r\n    const size4 =document.querySelector(\".rectAngle-SizeForm22\").value;\r\n    const size5 =document.querySelector(\".rectAngle-SizeForm23\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size4Y = Number.parseFloat(size4);\r\n    const size5Y = Number.parseFloat(size5);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    const size4Num = size4Y /1.06;\r\n    const size5Num = size5Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    console.log(size4Num)\r\n    console.log(size5Num)\r\n    \r\n    if (dots[0].y() === rectangle.y() + rectangle.height() && dots[1].x() === rectangle.x() + rectangle.width()) {\r\n    \r\n      const  firstRightNextBottomPoints  = __webpack_require__(/*! src/SpaceFirstRightNextBottomPointsModule */ \"./Public/App/src/SpaceFirstRightNextBottomPointsModule.js\");\r\n      const firstRightNextBottomPoints2 = () =>{\r\n  \r\n        firstRightNextBottomPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm9,size2,size3,size4,size5)\r\n  \r\n      };\r\n  \r\n      firstRightNextBottomPoints2();\r\n\r\n      console.log(\"A\")\r\n\r\n}else if (dots[0].x() === rectangle.x() + rectangle.width() && dots[1].y() === rectangle.y() + rectangle.height()) {\r\n\r\n      const  firstBottomNextRightPoints  = __webpack_require__(/*! src/SpaceFirstBottomNextRightPointsModule */ \"./Public/App/src/SpaceFirstBottomNextRightPointsModule.js\");\r\n      const firstBottomNextRightPoints2 = () =>{\r\n  \r\n        firstBottomNextRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm9,size2,size3,size4,size5)\r\n  \r\n      };\r\n  \r\n      firstBottomNextRightPoints2();\r\n\r\n      console.log(\"B\")\r\n\r\n}\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceSideBottomRightPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceSideTopLeftPointsModule.js":
/*!********************************************************!*\
  !*** ./Public/App/src/SpaceSideTopLeftPointsModule.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function sideTopLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2){\r\n  stage.off(\"click\",handleClick2);\r\n\r\n  const rectAngleSizeForm16 = document.createElement('input');\r\n  rectAngleSizeForm16.type = \"text\";\r\n  rectAngleSizeForm16.classList.add(\"rectAngle-SizeForm16\");\r\n  rectAngleSizeForm16.placeholder = \"上辺丸点の左端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm17 = document.createElement('input');\r\n  rectAngleSizeForm17.type = \"text\";\r\n  rectAngleSizeForm17.classList.add(\"rectAngle-SizeForm17\");\r\n  rectAngleSizeForm17.placeholder = \"上辺丸点の右端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm18 = document.createElement('input');\r\n  rectAngleSizeForm18.type = \"text\";\r\n  rectAngleSizeForm18.classList.add(\"rectAngle-SizeForm18\");\r\n  rectAngleSizeForm18.placeholder = \"左辺丸点の上端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm19 = document.createElement('input');\r\n  rectAngleSizeForm19.type = \"text\";\r\n  rectAngleSizeForm19.classList.add(\"rectAngle-SizeForm19\");\r\n  rectAngleSizeForm19.placeholder = \"左辺丸点の下端からの長さを入力\";\r\n\r\n  const rectAngleConfirm8 = document.createElement('button');\r\n  rectAngleConfirm8.classList.add(\"rectAngle-confirm8\");\r\n  rectAngleConfirm8.append(\"決定\");\r\n\r\n  const div16 = document.createElement(\"div\");\r\n  div16.classList.add(\"div16\");\r\n\r\n  const div15 = document.createElement(\"div\");\r\n  div15.classList.add(\"div15\");\r\n\r\n  const note7 = document.createElement(\"p\");\r\n  note7.classList.add(\"note7\");\r\n\r\n  const note8 = document.createElement(\"p\");\r\n  note8.classList.add(\"note8\");\r\n\r\n  div16.append(note7,note8);\r\n  div16.append(rectAngleSizeForm16,rectAngleSizeForm17,rectAngleSizeForm18,rectAngleSizeForm19,rectAngleConfirm8);\r\n\r\n  div15.append(div16);\r\n  spacecenterInner.append(div15);\r\n\r\n  document.querySelector(\".note7\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n  document.querySelector(\".note8\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n\r\n  document.querySelector(\".rectAngle-confirm8\").addEventListener(\"click\",handleConfirm8);\r\n  function handleConfirm8(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm16\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm17\").value;\r\n    const size4 =document.querySelector(\".rectAngle-SizeForm18\").value;\r\n    const size5 =document.querySelector(\".rectAngle-SizeForm19\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size4Y = Number.parseFloat(size4);\r\n    const size5Y = Number.parseFloat(size5);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    const size4Num = size4Y /1.06;\r\n    const size5Num = size5Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    console.log(size4Num)\r\n    console.log(size5Num)\r\n    \r\n    if (dots[0].y() === rectangle.y() && dots[1].x() === rectangle.x()) {\r\n\r\n      console.log(\"qqq\");\r\n    \r\n      const  firstLeftNextTopPoints  = __webpack_require__(/*! src/SpaceFirstLeftNextTopPointsModule */ \"./Public/App/src/SpaceFirstLeftNextTopPointsModule.js\");\r\n      const firstLeftNextTopPoints2 = () =>{\r\n  \r\n        firstLeftNextTopPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm8,size2,size3,size4,size5)\r\n  \r\n      };\r\n  \r\n      firstLeftNextTopPoints2();\r\n\r\n}else if (dots[0].x() === rectangle.x() && dots[1].y() === rectangle.y()) {\r\n\r\n  console.log(\"qqqaaa\");\r\n\r\n      const  firstTopNextLeftPoints  = __webpack_require__(/*! src/SpaceFirstTopNextLeftPointsModule */ \"./Public/App/src/SpaceFirstTopNextLeftPointsModule.js\");\r\n      const firstTopNextLeftPoints2 = () =>{\r\n  \r\n        firstTopNextLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm8,size2,size3,size4,size5)\r\n  \r\n      };\r\n  \r\n      firstTopNextLeftPoints2();\r\n\r\n}\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceSideTopLeftPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceSideTopRightPointsModule.js":
/*!*********************************************************!*\
  !*** ./Public/App/src/SpaceSideTopRightPointsModule.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function sideTopRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2){\r\n  stage.off(\"click\",handleClick2);\r\n\r\n  const rectAngleSizeForm12 = document.createElement('input');\r\n  rectAngleSizeForm12.type = \"text\";\r\n  rectAngleSizeForm12.classList.add(\"rectAngle-SizeForm12\");\r\n  rectAngleSizeForm12.placeholder = \"上辺丸点の左端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm13 = document.createElement('input');\r\n  rectAngleSizeForm13.type = \"text\";\r\n  rectAngleSizeForm13.classList.add(\"rectAngle-SizeForm13\");\r\n  rectAngleSizeForm13.placeholder = \"上辺丸点の右端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm14 = document.createElement('input');\r\n  rectAngleSizeForm14.type = \"text\";\r\n  rectAngleSizeForm14.classList.add(\"rectAngle-SizeForm14\");\r\n  rectAngleSizeForm14.placeholder = \"右辺丸点の上端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm15 = document.createElement('input');\r\n  rectAngleSizeForm15.type = \"text\";\r\n  rectAngleSizeForm15.classList.add(\"rectAngle-SizeForm15\");\r\n  rectAngleSizeForm15.placeholder = \"右辺丸点の下端からの長さを入力\";\r\n\r\n  const rectAngleConfirm7 = document.createElement('button');\r\n  rectAngleConfirm7.classList.add(\"rectAngle-confirm7\");\r\n  rectAngleConfirm7.append(\"決定\");\r\n\r\n  const div14 = document.createElement(\"div\");\r\n  div14.classList.add(\"div14\");\r\n\r\n  const div13 = document.createElement(\"div\");\r\n  div13.classList.add(\"div13\");\r\n\r\n  const note5 = document.createElement(\"p\");\r\n  note5.classList.add(\"note5\");\r\n\r\n  const note6 = document.createElement(\"p\");\r\n  note6.classList.add(\"note6\");\r\n\r\n  div14.append(note5,note6);\r\n  div14.append(rectAngleSizeForm12,rectAngleSizeForm13,rectAngleSizeForm14,rectAngleSizeForm15,rectAngleConfirm7);\r\n\r\n  div13.append(div14);\r\n  spacecenterInner.append(div13);\r\n\r\n  document.querySelector(\".note5\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n  document.querySelector(\".note6\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n\r\n  document.querySelector(\".rectAngle-confirm7\").addEventListener(\"click\",handleConfirm7);\r\n  function handleConfirm7(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm12\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm13\").value;\r\n    const size4 =document.querySelector(\".rectAngle-SizeForm14\").value;\r\n    const size5 =document.querySelector(\".rectAngle-SizeForm15\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size4Y = Number.parseFloat(size4);\r\n    const size5Y = Number.parseFloat(size5);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    const size4Num = size4Y /1.06;\r\n    const size5Num = size5Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    console.log(size4Num)\r\n    console.log(size5Num)\r\n    \r\n    if (dots[0].y() === rectangle.y() && dots[1].x() === rectangle.x() + rectangle.width()) {\r\n    \r\n      const  firstRightNextTopPoints  = __webpack_require__(/*! src/SpaceFirstRightNextTopPointsModule */ \"./Public/App/src/SpaceFirstRightNextTopPointsModule.js\");\r\n      const firstRightNextTopPoints2 = () =>{\r\n  \r\n        firstRightNextTopPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm7,size2,size3,size4,size5)\r\n  \r\n      };\r\n  \r\n      firstRightNextTopPoints2();\r\n\r\n\r\n}else if (dots[0].x() === rectangle.x() + rectangle.width() && dots[1].y() === rectangle.y()) {\r\n\r\n  const  firstTopNextRightPoints  = __webpack_require__(/*! src/SpaceFirstTopNextRightPointsModule */ \"./Public/App/src/SpaceFirstTopNextRightPointsModule.js\");\r\n  const firstTopNextRightPoints2 = () =>{\r\n\r\n    firstTopNextRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,size2Num,size3Num,size4Num,size5Num,handleConfirm7,size2,size3,size4,size5)\r\n\r\n  };\r\n\r\n  firstTopNextRightPoints2();\r\n\r\n};\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceSideTopRightPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceSideTwoPointsModule.js":
/*!****************************************************!*\
  !*** ./Public/App/src/SpaceSideTwoPointsModule.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function sideTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2){\r\n  stage.off(\"click\",handleClick2);\r\n        \r\n        \r\n\r\n  const rectAngleSizeForm3 = document.createElement('input');\r\n  rectAngleSizeForm3.type = \"text\";\r\n  rectAngleSizeForm3.classList.add(\"rectAngle-SizeForm3\");\r\n  rectAngleSizeForm3.placeholder = \"対象箇所の長さをcm単位で入力\";\r\n\r\n  const rectAngleConfirm2 = document.createElement('button');\r\n  rectAngleConfirm2.classList.add(\"rectAngle-confirm2\");\r\n  rectAngleConfirm2.append(\"決定\");\r\n  const div4 = document.createElement(\"div\");\r\n  div4.classList.add(\"div4\");\r\n  const div3 = document.createElement(\"div\");\r\n  div3.classList.add(\"div3\");\r\n\r\n  div4.append(rectAngleSizeForm3,rectAngleConfirm2);\r\n  div3.append(div4);\r\n  spacecenterInner.append(div3);\r\n\r\n\r\n  document.querySelector(\".rectAngle-confirm2\").addEventListener(\"click\",handleConfirm2);\r\n  function handleConfirm2(){\r\n\r\n\r\n\r\n    const size1 =document.querySelector(\".rectAngle-SizeForm3\").value;\r\n    const sizeY = Number.parseFloat(size1);\r\n    const size1Num = sizeY /1.06;\r\n    console.log(size1Num)\r\n    \r\n    \r\n\r\n    if(Number.isNaN(size1Num)){\r\n     const sizeFormError2 = document.createElement(\"p\");\r\n     sizeFormError2.classList.add(\"size-form-error2\");\r\n     div4.append(sizeFormError2);\r\n     document.querySelector(\".size-form-error2\").textContent = \"※数値のみ入力してください※\";\r\n\r\n    } else {\r\n\r\n\r\n   // 長さを格納する変数\r\n   let length = size1Num; \r\n   \r\n   dots[0].destroy();\r\n   dots[1].destroy();\r\n   dashedLine.destroy();\r\n  \r\n\r\n  if( midRect.y() <= rectangle.y()){\r\n   \r\n    const  topTwoPoints  = __webpack_require__(/*! src/SpaceTopTwoPointsModule */ \"./Public/App/src/SpaceTopTwoPointsModule.js\");\r\n    const topTwoPoints2 = () =>{\r\n\r\n      topTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length)\r\n\r\n    };\r\n\r\n    topTwoPoints2();\r\n\r\n} else if( midRect.x() + midRect.width() >= rectangle.x() + rectangle.width()){\r\n\r\n    const  rightTwoPoints  = __webpack_require__(/*! src/SpaceRightTwoPointsModule */ \"./Public/App/src/SpaceRightTwoPointsModule.js\");\r\n    const rightTwoPoints2 = () =>{\r\n\r\n      rightTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length)\r\n\r\n    };\r\n\r\n    rightTwoPoints2();\r\n\r\n} else if( midRect.x() <= rectangle.x()){\r\n\r\n    const  leftTwoPoints  = __webpack_require__(/*! src/SpaceLeftTwoPointsModule */ \"./Public/App/src/SpaceLeftTwoPointsModule.js\");\r\n    const leftTwoPoints2 = () =>{\r\n\r\n      leftTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length)\r\n\r\n    };\r\n\r\n    leftTwoPoints2();\r\n\r\n\r\n} else if( midRect.y() + midRect.height() >= rectangle.y() + rectangle.height()){\r\n\r\n  const  bottomTwoPoints  = __webpack_require__(/*! src/SpaceBottomTwoPointsModule */ \"./Public/App/src/SpaceBottomTwoPointsModule.js\");\r\n  const bottomTwoPoints2 = () =>{\r\n\r\n    bottomTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length)\r\n\r\n  };\r\n\r\n  bottomTwoPoints2();\r\n\r\n\r\n  \r\n};\r\n\r\n   \r\n    };\r\n \r\n   \r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceSideTwoPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceSquareClickModule.js":
/*!**************************************************!*\
  !*** ./Public/App/src/SpaceSquareClickModule.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nmodule.exports = function handleClick(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2){\r\n    \r\n  const pointerPos = stage.getPointerPosition();\r\n  const x = pointerPos.x;\r\n  const y = pointerPos.y;\r\n\r\n  // 図形の上辺、左辺、下辺、右辺上でのみ丸い点を追加\r\n  const border = isMouseOnBorder(rectangle, x, y);\r\n  if (border) {\r\n    // クリックした位置に丸い点を追加\r\n    let centerX, centerY;\r\n    switch (border) {\r\n      case 'top':\r\n        centerX = x;\r\n        centerY = rectangle.y();\r\n        break;\r\n      case 'left':\r\n        centerX = rectangle.x();\r\n        centerY = y;\r\n        break;\r\n      case 'bottom':\r\n        centerX = x;\r\n        centerY = rectangle.y() + rectangle.height();\r\n        break;\r\n      case 'right':\r\n        centerX = rectangle.x() + rectangle.width();\r\n        centerY = y;\r\n        break;\r\n    }\r\n\r\n    const dot = new Konva.Circle({\r\n      x: centerX,\r\n      y: centerY,\r\n      radius: 5,\r\n      fill: 'red', // 適宜調整\r\n      draggable: false,\r\n    });\r\n\r\n    // 丸い点が２つを超えたら古い順に削除\r\n    if (dots.length >= 2) {\r\n      const removedDot = dots.shift();\r\n      removedDot.destroy();\r\n    }\r\n\r\n    dots.push(dot);\r\n    layer.add(dot);\r\n    layer.batchDraw(); // レイヤーを再描画する必要があります\r\n\r\n    // 2つの丸い点の間に破線（実線）を描画\r\n    if (dots.length === 2) {\r\n      const startDot = dots[0];\r\n      const endDot = dots[1];\r\n      const startX = startDot.x();\r\n      const startY = startDot.y();\r\n      const endX = endDot.x();\r\n      const endY = endDot.y();\r\n\r\n      if (dashedLine) {\r\n        dashedLine.destroy(); // 既存の破線があれば削除\r\n      }\r\n\r\n      dashedLine = drawDashedLine(startX, startY, endX, endY);\r\n      layer.add(dashedLine);\r\n      layer.batchDraw();\r\n      isDashedLineVisible = true;\r\n\r\n      // 破線の真ん中に四角を表示\r\n      if (midRect) {\r\n        midRect.destroy(); // 既存の四角があれば削除\r\n      }\r\n\r\n      const midX = (startX + endX) / 2;\r\n      const midY = (startY + endY) / 2;\r\n\r\n      midRect = new Konva.Rect({\r\n        x: midX - 5,\r\n        y: midY - 5,\r\n        width: 10,\r\n        height: 10,\r\n        fill: 'red', // 適宜調整\r\n        draggable: false,\r\n      });\r\n\r\n      layer.add(midRect);\r\n    }\r\n  }\r\n \r\n  \r\n  \r\n  \r\n\r\n  if( dots.filter(dot => dot.y() === rectangle.y()).length === 2 ||\r\n      dots.filter(dot => dot.y() === rectangle.y() + rectangle.height()).length === 2 ||\r\n      dots.filter(dot => dot.x() === rectangle.x() + rectangle.width()).length === 2 ||\r\n      dots.filter(dot => dot.x() === rectangle.x()).length === 2 ) {\r\n        \r\n\r\n        \r\n        const sideTwoPoints  = __webpack_require__(/*! src/SpaceSideTwoPointsModule */ \"./Public/App/src/SpaceSideTwoPointsModule.js\");\r\n        const sideTwoPoints2 = () =>{\r\n          sideTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2)\r\n        };\r\n        sideTwoPoints2();\r\n\r\n  } else if(dots.length === 2 && dots[0].y() === rectangle.y() && dots[1].x() === rectangle.x() + rectangle.width() ||\r\n            dots.length === 2 && dots[0].x() === rectangle.x() + rectangle.width() && dots[1].y() === rectangle.y()){\r\n\r\n        const sideTopRightPoints  = __webpack_require__(/*! src/SpaceSideTopRightPointsModule */ \"./Public/App/src/SpaceSideTopRightPointsModule.js\");\r\n        const sideTopRightPoints2 = () =>{\r\n          sideTopRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2)\r\n        };\r\n        sideTopRightPoints2();\r\n\r\n  } else if(dots.length === 2 && dots[0].y() === rectangle.y() && dots[1].x() === rectangle.x() ||\r\n            dots.length === 2 && dots[0].x() === rectangle.x() && dots[1].y() === rectangle.y()){\r\n\r\n        const sideTopLeftPoints  = __webpack_require__(/*! src/SpaceSideTopLeftPointsModule */ \"./Public/App/src/SpaceSideTopLeftPointsModule.js\");\r\n        const sideTopLeftPoints2 = () =>{\r\n          sideTopLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2)\r\n        };\r\n        sideTopLeftPoints2();\r\n\r\n  } else if(dots.length === 2 && dots[0].x() === rectangle.x() + rectangle.width() && dots[1].y() === rectangle.y() + rectangle.height() ||\r\n            dots.length === 2 && dots[0].y() === rectangle.y() + rectangle.height() && dots[1].x() === rectangle.x() + rectangle.width()){\r\n\r\n        const sideBottomRightPoints  = __webpack_require__(/*! src/SpaceSideBottomRightPointsModule */ \"./Public/App/src/SpaceSideBottomRightPointsModule.js\");\r\n        const sideBottomRightPoints2 = () =>{\r\n          sideBottomRightPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2)\r\n        };\r\n        sideBottomRightPoints2();\r\n\r\n  } else if(dots.length === 2 && dots[0].y() === rectangle.y() + rectangle.height() && dots[1].x() === rectangle.x() ||\r\n            dots.length === 2 && dots[0].x() === rectangle.x() && dots[1].y() === rectangle.y() + rectangle.height()){\r\n\r\n        const sideBottomLeftPoints  = __webpack_require__(/*! src/SpaceSideBottomLeftPointsModule */ \"./Public/App/src/SpaceSideBottomLeftPointsModule.js\");\r\n        const sideBottomLeftPoints2 = () =>{\r\n          sideBottomLeftPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2)\r\n        };\r\n        sideBottomLeftPoints2();\r\n\r\n  }\r\n\r\n\r\n\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceSquareClickModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceTopLeftCheckSquareModule.js":
/*!*********************************************************!*\
  !*** ./Public/App/src/SpaceTopLeftCheckSquareModule.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function topLeftCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle1.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#F0BE99', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#F0BE99', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle1.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n        const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n        const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    \r\n        const clear = [minX, minY-1, maxX - minX, maxY - minY];\r\n    \r\n        console.log(clear);\r\n    \r\n        context.clearRect(...clear);\r\n    \r\n        shape.clear = clear;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n    circle1.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n    };\r\n\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceTopLeftCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceTopLeftCheckTriangleModule.js":
/*!***********************************************************!*\
  !*** ./Public/App/src/SpaceTopLeftCheckTriangleModule.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function topLeftCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#F0BE99', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#F0BE99', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle1.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n\r\n      function handleConfirm12(){\r\n\r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n         document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n         document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       };\r\n\r\n     };\r\n\r\n\r\n    };\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 下に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle1.x();\r\n    const circleY2 = circle1.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const customShape = new Konva.Shape({\r\n\r\n        sceneFunc: function (context, shape) {\r\n      \r\n          const x1 = circleX1; // 三角形の頂点1の X 座標\r\n          const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n          const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n          const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n          const x3 = circleX2; // 三角形の頂点3の X 座標\r\n          const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n          const clearLine1 = [x1, y1-1];\r\n          const clearLine2 = [x2, y2];\r\n          const clearLine3 = [x3, y3-1];\r\n\r\n          context.beginPath();\r\n          context.moveTo(...clearLine1);\r\n          context.lineTo(...clearLine2);\r\n          context.lineTo(...clearLine3);\r\n          context.closePath();\r\n      \r\n          // 三角形のパスをクリアする\r\n          context.globalCompositeOperation = 'destination-out';\r\n          context.fill();\r\n          context.globalCompositeOperation = 'source-over';\r\n      \r\n          shape.clearLine1 = clearLine1;\r\n          shape.clearLine2 = clearLine2;\r\n          shape.clearLine3 = clearLine3;\r\n      \r\n        },\r\n      \r\n        \r\n      });\r\n      \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n      circle1.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n      dashedLine7.destroy();\r\n      dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1, y1-1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3-1];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else{\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle1.x();\r\n         const circleY2A = circle1.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1, y1-1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3-1];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        };\r\n       };\r\n\r\n     };\r\n\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceTopLeftCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceTopLeftLengthModule.js":
/*!****************************************************!*\
  !*** ./Public/App/src/SpaceTopLeftLengthModule.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function topLeftLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm3){\r\n\r\n  if(Number.isNaN(size3Num)){\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";\r\n   } else {\r\n\r\n    // 長さを格納する変数\r\nlet length2 = size3Num; \r\n\r\ncircle2.destroy();\r\nmidRect.destroy();\r\ndashedLine5.destroy();\r\n\r\n// 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\nconst newLeftCircleX = rectangle.x() + length2;\r\n\r\n// 左の丸い点の座標を更新\r\ncircle1.x(newLeftCircleX);\r\nlayer.draw();\r\n\r\n\r\n // 丸い点の座標を取得\r\n const x = circle1.x();\r\n const y = circle1.y();\r\n\r\n // 破線を作成\r\n const dashedLine6 = new Konva.Line({\r\n   points: [x, y, x + length, y], // 例としてX座標から100ピクセル右に破線を表示\r\n   stroke: 'red',\r\n   strokeWidth: 2,\r\n   lineCap: 'round',\r\n   dash: [5, 10],\r\n });\r\n\r\n // 新しい丸い点を作成\r\n const newCircle = new Konva.Circle({\r\n   x: dashedLine6.points()[2], // 破線の一番右端のX座標を取得\r\n   y: dashedLine6.points()[3], // 破線の一番右端のY座標を取得\r\n   radius: 5,\r\n   fill: 'red',\r\n });\r\n\r\n\r\n const x2 = newCircle.x();\r\n const y2 = newCircle.y();\r\n\r\n const newRectX = (x + x2) / 2;\r\n const newRectY = (y + y2) / 2;\r\n const newRect = new Konva.Rect({\r\n   x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n   y: newRectY - 5,\r\n   width: 10,\r\n   height: 10,\r\n   fill: 'red',\r\n });\r\n\r\n layer.add(dashedLine6);\r\n layer.add(newCircle); \r\n layer.add(newRect);\r\n layer.draw();\r\n\r\n\r\n\r\nconst paturnText = document.createElement('p');\r\npaturnText.classList.add(\"paturn-text\");\r\n\r\nconst check1 = document.createElement('input');\r\ncheck1.type = \"checkbox\";\r\ncheck1.classList.add(\"check1\");\r\ncheck1.name = \"check\";\r\n\r\nconst check2 = document.createElement('input');\r\ncheck2.type = \"checkbox\";\r\ncheck2.classList.add(\"check2\");\r\ncheck2.name = \"check\";\r\n\r\nconst paturn1 = document.createElement('img');\r\npaturn1.src = \"/images/paturn1.png\";\r\npaturn1.classList.add(\"paturn1\");\r\n\r\nconst paturn2 = document.createElement('img');\r\npaturn2.src = \"/images/paturn2.png\";\r\npaturn2.classList.add(\"paturn2\");\r\n\r\nconst rectAngleSizeForm28 = document.createElement('input');\r\nrectAngleSizeForm28.type = \"text\";\r\nrectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\nrectAngleSizeForm28.placeholder = \"上方向に伸ばす長さを入力\";\r\n\r\nconst rectAngleSizeForm29 = document.createElement('input');\r\nrectAngleSizeForm29.type = \"text\";\r\nrectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\nrectAngleSizeForm29.placeholder = \"下方向に縮める長さを入力\";\r\n\r\nconst rectAngleConfirm11 = document.createElement('button');\r\nrectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\nrectAngleConfirm11.append(\"決定\");\r\n\r\nconst div22 = document.createElement(\"div\");\r\ndiv22.classList.add(\"div22\");\r\n\r\nconst div21 = document.createElement(\"div\");\r\ndiv21.classList.add(\"div21\");\r\n\r\nconst note13 = document.createElement(\"p\");\r\nnote13.classList.add(\"note13\");\r\n\r\ndiv22.append(note13);\r\ndiv22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\ndiv21.append(div22);\r\nspacecenterInner.append(div21);\r\n\r\ndocument.querySelector(\".note13\").textContent = \"上方向または下方向のどちらかを入力してください\";\r\ndocument.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\nconst check = document.querySelectorAll(\"[name=check\");\r\nfor(let i = 0; i < 2; i++){\r\ncheck[i].addEventListener(\"click\",function(){\r\n  const currentItem = this;\r\n  if(currentItem.checked){\r\n    check[0].checked = false;\r\n    check[1].checked = false;\r\n    currentItem.checked = true;\r\n  };\r\n});\r\n};\r\n\r\ndocument.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\ndocument.querySelector(\".rectAngle-confirm3\").removeEventListener(\"click\",handleConfirm3);\r\n\r\n\r\n\r\nwhile (document.querySelector(\".div5\").lastChild) {\r\n  document.querySelector(\".div5\").removeChild(document.querySelector(\".div5\").lastChild);\r\n  console.log(\"while\");\r\n }\r\n\r\n document.querySelector(\".div5\").parentNode.removeChild(document.querySelector(\".div5\"));\r\n\r\n  \r\n function handleConfirm11(){\r\n\r\nif(check[0].checked){\r\n\r\n  const  topLeftCheckTriangle  = __webpack_require__(/*! src/SpaceTopLeftCheckTriangleModule */ \"./Public/App/src/SpaceTopLeftCheckTriangleModule.js\");\r\n  const topLeftCheckTriangle2 = () =>{\r\n\r\n    topLeftCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n  };\r\n\r\n  topLeftCheckTriangle2();\r\n\r\n\r\n\r\n}else if(check[1].checked){\r\n\r\n  const  topLeftCheckSquare  = __webpack_require__(/*! src/SpaceTopLeftCheckSquareModule */ \"./Public/App/src/SpaceTopLeftCheckSquareModule.js\");\r\n  const topLeftCheckSquare2 = () =>{\r\n\r\n    topLeftCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n  };\r\n\r\n  topLeftCheckSquare2();\r\n\r\n\r\n\r\n}else{\r\n\r\n  const sizeFormError7 = document.createElement(\"p\");\r\n  sizeFormError7.classList.add(\"size-form-error7\");\r\n  div22.append(sizeFormError7);\r\n  document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n}\r\n\r\n};\r\n   };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceTopLeftLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceTopRightCheckSquareModule.js":
/*!**********************************************************!*\
  !*** ./Public/App/src/SpaceTopRightCheckSquareModule.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("\r\n\r\nmodule.exports = function topRightCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n    \r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle2.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const polygon = new Konva.Line({\r\n      points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n      stroke: '#F0BE99', // 線の色\r\n      strokeWidth: 2, // 線の太さ\r\n      closed: true, // 閉じた形状として描画\r\n      fill: '#F0BE99', // 塗りつぶし色（透明）\r\n    });\r\n    \r\n    layer.add(polygon);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n    \r\n\r\n\r\n     \r\n     \r\n\r\n  \r\n     dots.length = 0 ;\r\n\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n     stage.off(\"click\",handleClick2);\r\n\r\n     stage.on(\"click\",handleClick2);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      console.log(\"while2\");\r\n     };\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n  \r\n    \r\n\r\n     \r\n\r\n    };\r\n\r\n\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else{\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    //丸い点と四角が垂直に交わる座標\r\n    const intersectionX1 = newCircle.x(); \r\n    const intersectionY1 = newRect.y()+5;\r\n\r\n    //もう一方の丸い点と四角が垂直に交わる座標\r\n    const intersectionX2 = circle2.x(); \r\n    const intersectionY2 = newRect.y()+5;\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    const customShape = new Konva.Shape({\r\n\r\n      sceneFunc: function (context, shape) {\r\n    \r\n        const minX = Math.min(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const minY = Math.min(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n        const maxX = Math.max(circleX1, intersectionX1, midRectX1, intersectionX2, circleX2);\r\n        const maxY = Math.max(circleY1, intersectionY1, midRectY1, intersectionY2, circleY2);\r\n    \r\n        const clear = [minX, minY-1, maxX - minX, maxY - minY];\r\n    \r\n        console.log(clear);\r\n    \r\n        context.clearRect(...clear);\r\n    \r\n        shape.clear = clear;\r\n    \r\n      },\r\n    \r\n      \r\n    });\r\n    \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n    circle2.destroy();\r\n    newRect.destroy();\r\n    newCircle.destroy();\r\n\r\n    dots.length = 0 ;\r\n\r\n    document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n    stage.off(\"click\",handleClick2);\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    while (document.querySelector(\".div21\").lastChild) {\r\n     document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     console.log(\"while2\");\r\n    };\r\n\r\n    document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n  };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceTopRightCheckSquareModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceTopRightCheckTriangleModule.js":
/*!************************************************************!*\
  !*** ./Public/App/src/SpaceTopRightCheckTriangleModule.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function topRightCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n     function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: '#F0BE99', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: '#F0BE99', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      \r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n     \r\n     function handleConfirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else {\r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        \r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        }\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else {\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: '#F0BE99', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: '#F0BE99', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n       };\r\n       };\r\n\r\n     };\r\n\r\n\r\n    };\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 下に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const customShape = new Konva.Shape({\r\n\r\n        sceneFunc: function (context, shape) {\r\n      \r\n          const x1 = circleX1; // 三角形の頂点1の X 座標\r\n          const y1 = circleY1; // 三角形の頂点1の Y 座標\r\n          const x2 = midRectX1; // 三角形の頂点2の X 座標\r\n          const y2 = midRectY1; // 三角形の頂点2の Y 座標\r\n          const x3 = circleX2; // 三角形の頂点3の X 座標\r\n          const y3 = circleY2; // 三角形の頂点3の Y 座標\r\n\r\n          const clearLine1 = [x1, y1-1];\r\n          const clearLine2 = [x2, y2];\r\n          const clearLine3 = [x3, y3-1];\r\n\r\n          context.beginPath();\r\n          context.moveTo(...clearLine1);\r\n          context.lineTo(...clearLine2);\r\n          context.lineTo(...clearLine3);\r\n          context.closePath();\r\n      \r\n          // 三角形のパスをクリアする\r\n          context.globalCompositeOperation = 'destination-out';\r\n          context.fill();\r\n          context.globalCompositeOperation = 'source-over';\r\n      \r\n          shape.clearLine1 = clearLine1;\r\n          shape.clearLine2 = clearLine2;\r\n          shape.clearLine3 = clearLine3;\r\n      \r\n        },\r\n      \r\n        \r\n      });\r\n      \r\n    layer.add(customShape);\r\n    layer.draw();\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n      dashedLine7.destroy();\r\n      dashedLine8.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\", handle2Confirm12);\r\n     \r\n     function handle2Confirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } \r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1, y1-1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3-1];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } \r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const customShape = new Konva.Shape({\r\n\r\n          sceneFunc: function (context, shape) {\r\n        \r\n            const x1 = circleX1A; // 三角形の頂点1の X 座標\r\n            const y1 = circleY1A; // 三角形の頂点1の Y 座標\r\n            const x2 = midRectX1A; // 三角形の頂点2の X 座標\r\n            const y2 = midRectY1A; // 三角形の頂点2の Y 座標\r\n            const x3 = circleX2A; // 三角形の頂点3の X 座標\r\n            const y3 = circleY2A; // 三角形の頂点3の Y 座標\r\n  \r\n            const clearLine1 = [x1, y1-1];\r\n            const clearLine2 = [x2, y2];\r\n            const clearLine3 = [x3, y3-1];\r\n  \r\n            context.beginPath();\r\n            context.moveTo(...clearLine1);\r\n            context.lineTo(...clearLine2);\r\n            context.lineTo(...clearLine3);\r\n            context.closePath();\r\n        \r\n            // 三角形のパスをクリアする\r\n            context.globalCompositeOperation = 'destination-out';\r\n            context.fill();\r\n            context.globalCompositeOperation = 'source-over';\r\n        \r\n            shape.clearLine1 = clearLine1;\r\n            shape.clearLine2 = clearLine2;\r\n            shape.clearLine3 = clearLine3;\r\n        \r\n          },\r\n        \r\n          \r\n        });\r\n        \r\n      layer.add(customShape);\r\n      layer.draw();\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handle2Confirm12);\r\n  \r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n  \r\n  \r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n\r\n       };\r\n\r\n     };\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceTopRightCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceTopRightLengthModule.js":
/*!*****************************************************!*\
  !*** ./Public/App/src/SpaceTopRightLengthModule.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function topRightLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3){\r\n\r\n  if(Number.isNaN(size2Num)){\r\n\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError3);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n   } else {\r\n     console.log(\"A\");\r\n\r\n\r\n  // 長さを格納する変数\r\n  let length2 = size2Num; \r\n\r\n  circle1.destroy();\r\n  midRect.destroy();\r\n  dashedLine5.destroy();\r\n\r\n  // 図形の上辺の右端から指定した距離の位置を計算して新しい右の丸い点のX座標を設定\r\n  const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n\r\n  // 右の丸い点の座標を更新\r\n  circle2.x(newRightCircleX);\r\n  layer.draw();\r\n\r\n  \r\n    // 丸い点の座標を取得\r\n    const x = circle2.x();\r\n    const y = circle2.y();\r\n\r\n    // 破線を作成\r\n    const dashedLine6 = new Konva.Line({\r\n      points: [x, y, x - length, y], // 例としてX座標から100ピクセル右に破線を表示\r\n      stroke: 'red',\r\n      strokeWidth: 2,\r\n      lineCap: 'round',\r\n      dash: [5, 10],\r\n    });\r\n\r\n    // 新しい丸い点を作成\r\n    const newCircle = new Konva.Circle({\r\n      x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n      y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n      radius: 5,\r\n      fill: 'red',\r\n    });\r\n\r\n    const x2 = newCircle.x();\r\n    const y2 = newCircle.y();\r\n\r\n    const newRectX = (x + x2) / 2;\r\n    const newRectY = (y + y2) / 2;\r\n    const newRect = new Konva.Rect({\r\n      x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n      y: newRectY - 5,\r\n      width: 10,\r\n      height: 10,\r\n      fill: 'red',\r\n    });\r\n\r\n    layer.add(dashedLine6);\r\n    layer.add(newCircle); \r\n    layer.add(newRect);\r\n    layer.draw();\r\n\r\n  \r\n\r\n const paturnText = document.createElement('p');\r\n paturnText.classList.add(\"paturn-text\");\r\n\r\n const check1 = document.createElement('input');\r\n check1.type = \"checkbox\";\r\n check1.classList.add(\"check1\");\r\n check1.name = \"check\";\r\n\r\n const check2 = document.createElement('input');\r\n check2.type = \"checkbox\";\r\n check2.classList.add(\"check2\");\r\n check2.name = \"check\";\r\n\r\n const paturn1 = document.createElement('img');\r\n paturn1.src = \"/images/paturn1.png\";\r\n paturn1.classList.add(\"paturn1\");\r\n\r\n const paturn2 = document.createElement('img');\r\n paturn2.src = \"/images/paturn2.png\";\r\n paturn2.classList.add(\"paturn2\");\r\n\r\n const rectAngleSizeForm28 = document.createElement('input');\r\n rectAngleSizeForm28.type = \"text\";\r\n rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n rectAngleSizeForm28.placeholder = \"上方向に伸ばす長さを入力\";\r\n\r\n const rectAngleSizeForm29 = document.createElement('input');\r\n rectAngleSizeForm29.type = \"text\";\r\n rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n rectAngleSizeForm29.placeholder = \"下方向に縮める長さを入力\";\r\n\r\n const rectAngleConfirm11 = document.createElement('button');\r\n rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n rectAngleConfirm11.append(\"決定\");\r\n\r\n const div22 = document.createElement(\"div\");\r\n div22.classList.add(\"div22\");\r\n\r\n const div21 = document.createElement(\"div\");\r\n div21.classList.add(\"div21\");\r\n\r\n const note13 = document.createElement(\"p\");\r\n note13.classList.add(\"note13\");\r\n\r\n div22.append(note13);\r\n div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n div21.append(div22);\r\n spacecenterInner.append(div21);\r\n\r\n\r\n\r\n document.querySelector(\".note13\").textContent = \"上方向または下方向のどちらかを入力してください\";\r\n document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n const check = document.querySelectorAll(\"[name=check\");\r\n for(let i = 0; i < 2; i++){\r\n   check[i].addEventListener(\"click\",function(){\r\n     const currentItem = this;\r\n     if(currentItem.checked){\r\n       check[0].checked = false;\r\n       check[1].checked = false;\r\n       currentItem.checked = true;\r\n     };\r\n   });\r\n };\r\n\r\n document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\n document.querySelector(\".rectAngle-confirm3\").removeEventListener(\"click\",handleConfirm3);\r\n\r\n\r\n\r\n while (document.querySelector(\".div5\").lastChild) {\r\n   document.querySelector(\".div5\").removeChild(document.querySelector(\".div5\").lastChild);\r\n   console.log(\"while\");\r\n  }\r\n\r\n  document.querySelector(\".div5\").parentNode.removeChild(document.querySelector(\".div5\"));\r\n\r\n\r\n\r\n\r\n \r\n function handleConfirm11(){\r\n   \r\n\r\n   if(check[0].checked){\r\n\r\n    const  topRightCheckTriangle  = __webpack_require__(/*! src/SpaceTopRightCheckTriangleModule */ \"./Public/App/src/SpaceTopRightCheckTriangleModule.js\");\r\n    const topRightCheckTriangle2 = () =>{\r\n\r\n      topRightCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n    };\r\n\r\n    topRightCheckTriangle2();\r\n\r\n\r\n   }else if(check[1].checked){\r\n\r\n    const  topRightCheckSquare  = __webpack_require__(/*! src/SpaceTopRightCheckSquareModule */ \"./Public/App/src/SpaceTopRightCheckSquareModule.js\");\r\n    const topRightCheckSquare2 = () =>{\r\n\r\n      topRightCheckSquare(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n    };\r\n\r\n    topRightCheckSquare2();\r\n\r\n\r\n   }else{\r\n\r\n     const sizeFormError7 = document.createElement(\"p\");\r\n     sizeFormError7.classList.add(\"size-form-error7\");\r\n     div22.append(sizeFormError7);\r\n     document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n   }\r\n  \r\n };\r\n\r\n\r\n\r\n};\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceTopRightLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceTopTwoPointsModule.js":
/*!***************************************************!*\
  !*** ./Public/App/src/SpaceTopTwoPointsModule.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function topTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length){\r\n\r\n  const rectAngleSizeForm4 = document.createElement('input');\r\n  rectAngleSizeForm4.type = \"text\";\r\n  rectAngleSizeForm4.classList.add(\"rectAngle-SizeForm4\");\r\n  rectAngleSizeForm4.placeholder = \"右端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm5 = document.createElement('input');\r\n  rectAngleSizeForm5.type = \"text\";\r\n  rectAngleSizeForm5.classList.add(\"rectAngle-SizeForm5\");\r\n  rectAngleSizeForm5.placeholder = \"左端からの長さを入力\";\r\n\r\n  const rectAngleConfirm3 = document.createElement('button');\r\n  rectAngleConfirm3.classList.add(\"rectAngle-confirm3\");\r\n  rectAngleConfirm3.append(\"決定\");\r\n\r\n  const div6 = document.createElement(\"div\");\r\n  div6.classList.add(\"div6\");\r\n\r\n  const div5 = document.createElement(\"div\");\r\n  div5.classList.add(\"div5\");\r\n\r\n  const note1 = document.createElement(\"p\");\r\n  note1.classList.add(\"note1\");\r\n\r\n  div6.append(note1);\r\n  div6.append(rectAngleSizeForm4,rectAngleSizeForm5,rectAngleConfirm3);\r\n\r\n  div5.append(div6);\r\n  spacecenterInner.append(div5);\r\n\r\n  console.log(div5);\r\n\r\n  document.querySelector(\".note1\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n\r\n  // 四角の中心座標を取得\r\n  const midRectX = midRect.x() + midRect.width() / 2;\r\n  const midRectY = midRect.y() + midRect.height() / 2;\r\n\r\n  // 横破線を描画する座標を計算\r\n  const dashedLineX1 = midRectX - length / 2;\r\n  const dashedLineY1 = midRectY;\r\n  const dashedLineX2 = midRectX + length / 2;\r\n  const dashedLineY2 = midRectY;\r\n\r\n  // 破線を作成\r\n  const dashedLine5 = new Konva.Line({\r\n    points: [dashedLineX1, dashedLineY1, dashedLineX2, dashedLineY2],\r\n    stroke: 'red',\r\n    strokeWidth: 2,\r\n    dash: [5, 10], // 破線のパターンを指定（length変数の値を使用）\r\n  });\r\n\r\n  // 丸い点を作成\r\n  const circle1 = new Konva.Circle({\r\n    x: dashedLineX1,\r\n    y: dashedLineY1,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  const circle2 = new Konva.Circle({\r\n    x: dashedLineX2,\r\n    y: dashedLineY2,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  // レイヤーに追加\r\n  \r\n  layer.add(dashedLine5, circle1, circle2, midRect);\r\n  stage.add(layer);\r\n\r\n  document.querySelector(\".rectAngle-confirm3\").addEventListener(\"click\",handleConfirm3);\r\n\r\n  document.querySelector(\".rectAngle-confirm2\").removeEventListener(\"click\",handleConfirm2);\r\n      \r\n  while (document.querySelector(\".div3\").lastChild) {\r\n    document.querySelector(\".div3\").removeChild(document.querySelector(\".div3\").lastChild);\r\n    console.log(\"while0\");\r\n\r\n   }\r\n\r\n   document.querySelector(\".div3\").parentNode.removeChild(document.querySelector(\".div3\"));\r\n   \r\n\r\n  function handleConfirm3(){\r\n    \r\n    \r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm4\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm5\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    \r\n    \r\n    if(size2 !== \"\" && size3 === \"\"){\r\n\r\n      const  topRightLength  = __webpack_require__(/*! src/SpaceTopRightLengthModule */ \"./Public/App/src/SpaceTopRightLengthModule.js\");\r\n      const topRightLength2 = () =>{\r\n  \r\n        topRightLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3)\r\n  \r\n      };\r\n  \r\n      topRightLength2();\r\n\r\n    } else if(size3 !== \"\" && size2 === \"\"){\r\n\r\n      const  topLeftLength  = __webpack_require__(/*! src/SpaceTopLeftLengthModule */ \"./Public/App/src/SpaceTopLeftLengthModule.js\");\r\n      const topLeftLength2 = () =>{\r\n  \r\n        topLeftLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size3Num,dashedLine5, circle1, circle2,handleConfirm3)\r\n  \r\n      };\r\n  \r\n      topLeftLength2();\r\n\r\n    };  \r\n    \r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceTopTwoPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/index.js":
/*!*********************************!*\
  !*** ./Public/App/src/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nconst contentHome = document.querySelector('#content-home');\r\nconst contentSpace = document.querySelector('#content-space');\r\nconst contentFurniture = document.querySelector('#content-furniture');\r\nconst contentHelp = document.querySelector('#content-help');\r\nconst contentPrint = document.querySelector('#content-print');\r\nconst contentPhoto = document.querySelector('#content-photo');\r\nconst contentInquiry = document.querySelector('#content-inquiry');\r\n\r\n\r\n// セッション情報を取得してユーザー名を表示する関数\r\nfunction getSessionData() {\r\n  fetch('/get-session')\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      \r\n      const username = data.username;\r\n      console.log(username);\r\n      const userNameElement = document.querySelector('.user-name');\r\n      userNameElement.textContent = `${username}`;\r\n    })\r\n    .catch(error => {\r\n      console.error('エラー:', error);\r\n    });\r\n}\r\n\r\n// ページがロードされたときにセッション情報を取得して表示する\r\nwindow.addEventListener('load', getSessionData);\r\n\r\n// ログアウトボタンをクリックしたときの処理\r\nconst logoutButton = document.querySelector('#logout-button');\r\nlogoutButton.addEventListener('click', () => {\r\n  // サーバーにログアウトリクエストを送信\r\n  fetch('/logout', {\r\n    method: 'POST',\r\n    credentials: 'same-origin', \r\n  })\r\n    .then((response) => {\r\n      if (response.ok) {\r\n        // ログアウトに成功した場合はログイン画面にリダイレクト\r\n        window.location.href = '/index.html'; \r\n      } else {\r\n        console.error('Logout failed');\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during logout:', error);\r\n    });\r\n});\r\n\r\n\r\n\r\n\r\n// モーダルメニューのコンテンツを非表示にする関数\r\nfunction hideModalContent() {\r\n  contentPrint.style.display = 'none';\r\n  contentPhoto.style.display = 'none';\r\n  contentInquiry.style.display = 'none';\r\n}\r\n\r\n// すべてのコンテンツを非表示にする関数\r\nfunction hideAllContent() {\r\n  contentHome.style.display = 'none';\r\n  contentSpace.style.display = 'none';\r\n  contentFurniture.style.display = 'none';\r\n  contentHelp.style.display = 'none';\r\n  hideModalContent();\r\n  // content-print, content-photo, content-inquiryも非表示にする\r\n  contentPrint.style.display = 'none';\r\n  contentPhoto.style.display = 'none';\r\n  contentInquiry.style.display = 'none';\r\n}\r\n\r\n// ロード時にcontent-homeのみを表示\r\nhideAllContent();\r\ncontentHome.style.display = 'block';\r\n\r\nfunction changeBackgroundColor(color) {\r\n  document.body.style.backgroundColor = color;\r\n}\r\n\r\n// タブ切り替えのイベントリスナーを設定\r\nconst tabs = document.querySelectorAll('.tab');\r\ntabs.forEach(tab => {\r\n  \r\n   // すべてのタブからactiveクラスを削除\r\n tabs.forEach(t => t.classList.remove('active'));\r\n const homeTab = document.querySelector('[data-target=\"content-home\"]');\r\n homeTab.classList.add('active');\r\n\r\n  tab.addEventListener('click', () => {\r\n\r\n     // クリックされたタブのdata-color属性から背景色を取得\r\n    const color = tab.getAttribute('data-color');\r\n    // 背景色を変更する関数を呼び出す\r\n    changeBackgroundColor(color);\r\n    \r\n\r\n    // すべてのタブの色を元に戻す\r\n    tabs.forEach(t => t.classList.remove('active'));\r\n\r\n    // クリックされたタブに色を付ける\r\n    tab.classList.add('active');\r\n\r\n    // クリックされたタブに対応するコンテンツを取得\r\n    const targetContent = tab.getAttribute('data-target');\r\n    const content = document.querySelector(`#${targetContent}`);\r\n\r\n    // タブが既にアクティブ（表示中）の場合は何もしない\r\n    if (content.style.display === 'block') {\r\n      return;\r\n    }\r\n    \r\n\r\n    // すべてのコンテンツを非表示にする\r\n    hideAllContent();\r\n\r\n    // クリックされたタブに対応するコンテンツを表示する\r\n    content.style.display = 'block';\r\n  });\r\n});\r\n\r\n// 設定タブのドロップダウンメニューの表示・非表示を切り替える\r\nconst dropdownTab = document.querySelector('.tab-dropdown');\r\nconst dropdownMenu = document.querySelector('.dropdown-menu');\r\nlet dropdownOpen = false; // ドロップダウンメニューが開いているかのフラグ\r\n\r\n\r\n// ドロップダウンメニューをクリックしてもメニューが開かないようにする\r\ndropdownTab.addEventListener('click', (event) => {\r\n\r\n  event.stopPropagation(); // クリックイベントが親要素に伝搬しないようにする\r\n  dropdownMenu.style.display = dropdownOpen ? 'none' : 'flex'; // displayをflexに変更\r\n  dropdownOpen = !dropdownOpen;\r\n  \r\n});\r\n\r\n// ドロップダウンメニュー以外の場所をクリックしたらメニューを閉じる\r\ndocument.addEventListener('click', (event) => {\r\n  if (!dropdownTab.contains(event.target) && !dropdownMenu.contains(event.target)) {\r\n    dropdownMenu.style.display = 'none';\r\n    dropdownOpen = false;\r\n  }\r\n});\r\n\r\n// ドロップダウンメニューの中の各メニューのクリックイベントを設定\r\nconst dropdownItems = document.querySelectorAll('.dropdown-item');\r\ndropdownItems.forEach(item => {\r\n  item.addEventListener('click', () => {\r\n    \r\n    // クリックされたドロップダウンメニューに対応するコンテンツを表示する\r\n    const targetContent = item.getAttribute('data-target');\r\n    const color = item.getAttribute('data-color');\r\n    const content = document.querySelector(`#${targetContent}`);\r\n    \r\n\r\n    // すでに表示されているコンテンツの場合は非表示にしない\r\n    if (content.style.display !== 'block') {\r\n      // すべてのコンテンツを非表示にする\r\n      hideAllContent();\r\n      changeBackgroundColor(color);\r\n\r\n      // クリックされたコンテンツを表示する\r\n      content.style.display = 'block';\r\n    }\r\n\r\n\r\n    \r\n\r\n    // ドロップダウンメニューを非表示にする\r\n    dropdownMenu.style.display = 'none';\r\n    dropdownOpen = false;\r\n  });\r\n\r\n  // ドロップダウンメニューの文字をクリックしたらドロップダウンメニューを閉じる\r\n  item.addEventListener('click', (event) => {\r\n    event.stopPropagation(); // クリックイベントが親要素に伝搬しないようにする\r\n    dropdownMenu.style.display = 'none';\r\n    dropdownOpen = false;\r\n  });\r\n});\r\n\r\n\r\nlet n = 1;\r\ndocument.querySelector('.caret-down')\r\n  .addEventListener('click', function() {\r\n    document.querySelector('.genre-dropdown').classList.toggle('is-open');\r\n\r\n    if (n === 0 && document.querySelector('.caret-down').innerHTML === '<i class=\"fa-solid fa-caret-up\"></i>') {\r\n      document.querySelector('.caret-down').innerHTML = '<i class=\"fa-solid fa-caret-down\"></i>'; // メニューが閉じている時のアイコン\r\n      n++;\r\n    } else if(n === 0 && document.querySelector('.caret-down').innerHTML === '<i class=\"fa-solid fa-caret-down\"></i>'){\r\n\r\n      console.log(\"ok\")\r\n      document.querySelector('.caret-down').innerHTML = '<i class=\"fa-solid fa-caret-up\"></i>'; // メニューが開いた時のアイコン\r\n      n = 0;\r\n\r\n    } else {\r\n      document.querySelector('.caret-down').innerHTML = '<i class=\"fa-solid fa-caret-up\"></i>'; // メニューが開いた時のアイコン\r\n      n--;\r\n    }\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n // 空間新規作成ボタンがクリックされたときの処理\r\n  const spaceResetBtn = document.createElement('button');\r\n  spaceResetBtn.classList.add(\"space-resetbtn\");\r\n  spaceResetBtn.append(\"リセット\");\r\n  document.querySelector('.spacecenter-outer').append(spaceResetBtn);\r\n  document.querySelector('.space-resetbtn').style.display = \"none\";\r\n\r\n  const spaceCreate  = __webpack_require__(/*! src/SpaceCreateModule */ \"./Public/App/src/SpaceCreateModule.js\");\r\n  const spaceForm = document.querySelector('.space-form');\r\n  spaceForm.disabled = true;\r\n  const spaceCreateBtn = document.querySelector('.space-createbtn')\r\n\r\n  spaceCreateBtn.addEventListener('click', spaceCreate);\r\n\r\n\r\n\r\n // 家具新規作成ボタンがクリックされたときの処理\r\n  const furnitureCreate  = __webpack_require__(/*! src/FurnitureCreateModule */ \"./Public/App/src/FurnitureCreateModule.js\");\r\n  const furnitureForm = document.querySelector('.furniture-form');\r\n  const genreForm = document.querySelector('.genre-form');\r\n  furnitureForm.disabled = true;\r\n  genreForm.disabled = true;\r\n  const furnitureCreateBtn = document.querySelector('.furniture-createbtn');\r\n  furnitureCreateBtn.addEventListener('click', furnitureCreate);\r\n\r\n\r\n  const homecenterInner = document.querySelector('.homecenter-inner');    \r\n  console.log(homecenterInner.offsetWidth, homecenterInner.offsetHeight);\r\n\r\n  const stage2 = new Konva.Stage({\r\n    container: homecenterInner,\r\n    width: homecenterInner.offsetWidth,\r\n    height: homecenterInner.offsetHeight,\r\n  });\r\n\r\n  console.log(stage2.width(), stage2.height());\r\n\r\n  const spaceList = document.querySelector(\".space-list\");\r\n\r\n  let rectSpBoundsX = [];\r\n  let rectSpBoundsY = [];\r\n  let rectSpBoundsW = [];\r\n  let rectSpBoundsH = [];\r\n  \r\n\r\n\r\n  spaceList.addEventListener(\"click\", event => {\r\n    if (event.target.classList.contains(\"addBtn\")) {\r\n      if (stage2.getChildren().length === 0) {\r\n\r\n      const liElement = event.target.closest(\"li\");\r\n      const spaceFormValue = liElement.firstChild.textContent.trim();\r\n      const requestData = {\r\n          spaceFormValue: spaceFormValue\r\n      };\r\n        \r\n        fetch('/get-layer-data', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(requestData)\r\n        })\r\n        .then(response => response.json())\r\n        .then(layerData => {\r\n        \r\n          // レイヤーごとに新しい Layer を作成\r\n          layerData.layerData.layers.forEach(layerInfo => {\r\n            const newLayer = new Konva.Layer({\r\n              name: layerInfo.name, \r\n          });\r\n            \r\n            layerInfo.children.forEach(shapeData => {\r\n                // shapeData から必要な情報を取得して図形を作成\r\n                const rect = new Konva.Rect({\r\n                  x: (homecenterInner.offsetWidth - shapeData.width) / 2, \r\n                  y: (homecenterInner.offsetHeight - shapeData.height) / 2,\r\n                  width: shapeData.width,\r\n                  height: shapeData.height,\r\n                  fill: shapeData.fill,\r\n                  // その他の必要なプロパティを設定\r\n                });\r\n\r\n                const line = new Konva.Line({\r\n                  points: shapeData.points,\r\n                  stroke: shapeData.stroke, \r\n                  strokeWidth: shapeData.strokeWidth, \r\n                  closed: shapeData.closed,\r\n                  fill: shapeData.fill,\r\n                  // その他の必要なプロパティを設定\r\n                });\r\n\r\n                const shape = new Konva.Shape({\r\n                  sceneFunc: function (context, shape) {\r\n                    const clear = shapeData.clear;\r\n                    shape.clear = clear;\r\n                    const clearLine1 = shapeData.clearLine1;\r\n                    const clearLine2 = shapeData.clearLine2;\r\n                    const clearLine3 = shapeData.clearLine3;\r\n                    shape.clearLine1 = clearLine1;\r\n                    shape.clearLine2 = clearLine2;\r\n                    shape.clearLine3 = clearLine3;\r\n                    layerInfo.children.forEach(child => {\r\n                      if (child.clear) {\r\n\r\n                        context.clearRect(...child.clear);\r\n                      }\r\n                      if (child.clearLine1||child.clearLine2||child.clearLine3){\r\n\r\n                        context.beginPath();\r\n                        context.moveTo(...child.clearLine1);\r\n                        context.lineTo(...child.clearLine2);\r\n                        context.lineTo(...child.clearLine3);\r\n                        context.closePath();\r\n                    \r\n                        // 三角形のパスをクリアする\r\n                        context.globalCompositeOperation = 'destination-out';\r\n                        context.fill();\r\n                        context.globalCompositeOperation = 'source-over';\r\n                      }\r\n                    });               \r\n                  },\r\n                });\r\n                \r\n\r\n\r\n                console.log(rect);\r\n                newLayer.add(line);\r\n                newLayer.add(rect);\r\n                newLayer.add(shape);\r\n                newLayer.draw();\r\n              \r\n              // 他の図形タイプに対する処理も同様に追加可能\r\n            });\r\n            \r\n            stage2.add(newLayer); // 新しいレイヤーを stage2 に追加\r\n\r\n        \r\n            stage2.draw();\r\n\r\n\r\n\r\n            const foundRect = newLayer.getChildren().find(node => node instanceof Konva.Rect);\r\n            const rectX = foundRect.x();\r\n            rectSpBoundsX.push(rectX);\r\n            const rectY = foundRect.y();\r\n            rectSpBoundsY.push(rectY);\r\n            const rectW = foundRect.width();\r\n            rectSpBoundsW.push(rectW);\r\n            const rectH = foundRect.height();\r\n            rectSpBoundsH.push(rectH);\r\n\r\n            let topRectBorder = [];\r\n            let bottomRectBorder = [];\r\n            let rightRectBorder = [];\r\n            let leftRectBorder = [];\r\n\r\n            newLayer.getChildren().forEach(obj => {\r\n\r\n            if(obj instanceof Konva.Line){\r\n\r\n              if(rectX === obj.points()[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: obj.points(),\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                if(obj.points().length === 10){\r\n                  leftRectBorder.push(obj.points()[1],obj.points()[9]);\r\n                }else if(obj.points().length === 6){\r\n                  leftRectBorder.push(obj.points()[1],obj.points()[5]);\r\n                };\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(rectX + rectW === obj.points()[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: obj.points(),\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                if(obj.points().length === 10){\r\n                  rightRectBorder.push(obj.points()[1],obj.points()[9]);\r\n                }else if(obj.points().length === 6){\r\n                  rightRectBorder.push(obj.points()[1],obj.points()[5]);\r\n                };\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(rectY === obj.points()[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: obj.points(),\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                if(obj.points().length === 10){\r\n                  topRectBorder.push(obj.points()[0],obj.points()[8]);\r\n                  topSpaceRange.push({x1:obj.points()[0],x2:obj.points()[8],y:obj.points()[3],name:obj.name()});\r\n                }else if(obj.points().length === 6){\r\n                  topRectBorder.push(obj.points()[0],obj.points()[4]);\r\n                  topSpaceRange.push({x1:obj.points()[0],x2:obj.points()[4],y:obj.points()[3],name:obj.name()});\r\n                };\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(rectY + rectH === obj.points()[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: obj.points(),\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                if(obj.points().length === 10){\r\n                  bottomRectBorder.push(obj.points()[0],obj.points()[8]);\r\n                }else if(obj.points().length === 6){\r\n                  bottomRectBorder.push(obj.points()[0],obj.points()[4]);\r\n                };\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              };\r\n\r\n            }else if(obj instanceof Konva.Shape){\r\n              if(obj.clear && rectX === obj.clear[0] && rectY-1 === obj.clear[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                topRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                leftRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n               \r\n              }else if(obj.clear && rectX + rectW - obj.clear[2] === obj.clear[0] && rectY-1 === obj.clear[1]){  \r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                topRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                rightRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clear && rectY === obj.clear[1] && rectX-1 === obj.clear[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                topRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                leftRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clear && rectY + rectH - obj.clear[3] === obj.clear[1] && rectX-1 === obj.clear[0]){  \r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                bottomRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                leftRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clear && rectY+1 + rectH - obj.clear[3] === obj.clear[1] && rectX === obj.clear[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                bottomRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                leftRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n                \r\n              }else if(obj.clear && rectY+1 + rectH - obj.clear[3] === obj.clear[1] && rectX + rectW - obj.clear[2] === obj.clear[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                bottomRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                rightRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);        \r\n                \r\n              }else if(obj.clear && rectX+1 + rectW - obj.clear[2] === obj.clear[0] && rectY === obj.clear[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                topRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                rightRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clear && rectX+1 + rectW - obj.clear[2] === obj.clear[0] && rectY + rectH - obj.clear[3] === obj.clear[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                bottomRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                rightRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else {\r\n\r\n              if(obj.clear && rectX-1 === obj.clear[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                leftRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clear && rectX + rectW - obj.clear[2]+1 === obj.clear[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)                   \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                rightRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clear && rectY-1 === obj.clear[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)   \r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                topRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                topSpaceRange.push({x1:obj.clear[0],x2:obj.clear[0]+obj.clear[2],y:obj.clear[1]+obj.clear[3],name:obj.name()});\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n              \r\n              }else if(obj.clear && rectY + rectH - obj.clear[3]+1 === obj.clear[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)         \r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)   \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                bottomRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectX-1 === obj.clearLine1[0] && rectY-1 !== obj.clearLine2[1] && rectY + rectH+1 !== obj.clearLine2[1] &&\r\n              !(rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0]) && \r\n              !(rectX + rectW === obj.clearLine2[0] && rectX + rectW === obj.clearLine3[0]) &&\r\n              !(rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1]) &&\r\n              !(rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1])){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                \r\n                    obj.clearLine3[0], obj.clearLine3[1],                \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                leftRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectX+1 + rectW === obj.clearLine1[0] && rectY-1 !== obj.clearLine2[1] && rectY + rectH+1 !== obj.clearLine2[1] && \r\n              !(rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0]) && \r\n              !(rectX + rectW === obj.clearLine2[0] && rectX + rectW === obj.clearLine3[0]) &&\r\n              !(rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1]) &&\r\n              !(rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1])){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                \r\n                    obj.clearLine3[0], obj.clearLine3[1],                \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                rightRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectY-1 === obj.clearLine1[1] && \r\n              !(rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0]) && \r\n              !(rectX + rectW === obj.clearLine2[0] && rectX + rectW === obj.clearLine3[0]) &&\r\n              !(Math.round(rectX + rectW) === Math.round(obj.clearLine2[0]) && Math.round(rectX + rectW) === Math.round(obj.clearLine3[0])) &&\r\n              !(rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1]) &&\r\n              !(rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1])){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                \r\n                    obj.clearLine3[0], obj.clearLine3[1],                \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectY+1 + rectH === obj.clearLine1[1] && \r\n              !(rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0]) && \r\n              !(rectX + rectW === obj.clearLine2[0] && rectX + rectW === obj.clearLine3[0]) &&\r\n              !(Math.round(rectX + rectW) === Math.round(obj.clearLine2[0]) && Math.round(rectX + rectW) === Math.round(obj.clearLine3[0])) &&\r\n              !(rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1]) &&\r\n              !(rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1])){\r\n                \r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                \r\n                    obj.clearLine3[0], obj.clearLine3[1],                \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] === obj.clearLine3[0] && rectY-1 === obj.clearLine1[1] && rectY-1 === obj.clearLine3[1] && \r\n              !(rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0]) && \r\n              !(rectX + rectW === obj.clearLine2[0] && rectX + rectW === obj.clearLine3[0]) &&\r\n              !(rectX + rectW+1 === obj.clearLine2[0] && rectX + rectW+1 === obj.clearLine3[0]) &&\r\n              !(rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1]) &&\r\n              !(rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1]) &&\r\n              !(rectX-1 === obj.clearLine2[0]) &&\r\n              !(rectX-1 === obj.clearLine1[0])){\r\n\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                \r\n                    obj.clearLine3[0], obj.clearLine3[1],                \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] === obj.clearLine3[0] && rectY+1 + rectH === obj.clearLine1[1] && rectY+1 + rectH === obj.clearLine3[1] && \r\n              !(rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0]) && \r\n              !(rectX + rectW === obj.clearLine2[0] && rectX + rectW === obj.clearLine3[0]) &&\r\n              !(rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1]) &&\r\n              !(rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1]) &&\r\n              !(rectX-1 === obj.clearLine2[0]) &&\r\n              !(rectX + rectW+1 === obj.clearLine2[0])){\r\n\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                \r\n                    obj.clearLine3[0], obj.clearLine3[1],                \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0] && rectY-1 === obj.clearLine1[1] && rectY-1 === obj.clearLine3[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && Math.round(rectX + rectW) === Math.round(obj.clearLine2[0]) && Math.round(rectX + rectW) === Math.round(obj.clearLine3[0]) && rectY-1 === obj.clearLine1[1] && rectY-1 === obj.clearLine3[1]){\r\n\r\n                \r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0] && rectY+1 + rectH === obj.clearLine1[1] && rectY+1 + rectH === obj.clearLine3[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && Math.round(rectX + rectW) === Math.round(obj.clearLine2[0]) && Math.round(rectX + rectW) === Math.round(obj.clearLine3[0]) && rectY+1 + rectH === obj.clearLine1[1] && rectY+1 + rectH === obj.clearLine3[1]){\r\n                \r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1] && rectX-1 === obj.clearLine1[0] && rectX-1 === obj.clearLine3[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1] && rectX+1 + rectW === obj.clearLine1[0] && rectX+1 + rectW === obj.clearLine3[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1] && rectX-1 === obj.clearLine1[0] && rectX-1 === obj.clearLine3[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1] && rectX+1 + rectW === obj.clearLine1[0] && rectX+1 + rectW === obj.clearLine3[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n                \r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] === obj.clearLine3[0] && rectY-1 === obj.clearLine1[1] && rectX-1 === obj.clearLine2[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectX-1 === obj.clearLine1[0] && rectY-1 === obj.clearLine2[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] === obj.clearLine3[0] && rectY-1 === obj.clearLine1[1] && rectX + rectW +1 === obj.clearLine2[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectX + rectW +1 === obj.clearLine1[0] && rectY-1 === obj.clearLine2[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] === obj.clearLine3[0] && rectY + rectH+1 === obj.clearLine1[1] && rectX-1 === obj.clearLine2[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectX-1 === obj.clearLine1[0] && rectY + rectH+1  === obj.clearLine2[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] === obj.clearLine3[0] && rectY + rectH+1 === obj.clearLine1[1] && rectX + rectW+1 === obj.clearLine2[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectX + rectW+1 === obj.clearLine1[0] && rectY + rectH+1 === obj.clearLine2[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }\r\n\r\n            };\r\n\r\n            };\r\n             \r\n            });\r\n\r\n\r\n            const topBorder = topRectBorder.sort((a, b) => a - b);\r\n            const topMax = topBorder.length;\r\n            const bottomBorder = bottomRectBorder.sort((a, b) => a - b);\r\n            const bottomMax = bottomBorder.length;\r\n            const leftBorder = leftRectBorder.sort((a, b) => a - b);\r\n            const leftMax = leftBorder.length;\r\n            const rightBorder = rightRectBorder.sort((a, b) => a - b);\r\n            const rightMax = rightBorder.length;\r\n\r\n          if (topBorder.length === topMax) {\r\n            if(topBorder.length === 0){\r\n              const line = new Konva.Line({\r\n                points: [rectX,rectY,rectX+rectW,rectY],\r\n                stroke: \"black\", \r\n                strokeWidth: 2, \r\n                closed: false,\r\n              });\r\n  \r\n              newLayer.add(line);\r\n              stage2.add(newLayer);\r\n            }else{\r\n              const firstPoint = topBorder.shift();\r\n              const line = new Konva.Line({\r\n                points: [rectX,rectY,firstPoint,rectY],\r\n                stroke: \"black\", \r\n                strokeWidth: 2, \r\n                closed: false,\r\n              });\r\n\r\n              newLayer.add(line);\r\n              stage2.add(newLayer);\r\n            }\r\n          }\r\n\r\n          while (topBorder.length > 1) {\r\n              const point1 = topBorder.shift();\r\n              const point2 = topBorder.shift();\r\n\r\n              const line = new Konva.Line({\r\n                points: [point1,rectY,point2,rectY],\r\n                stroke: \"black\", \r\n                strokeWidth: 2, \r\n                closed: false,\r\n              });\r\n\r\n              newLayer.add(line);\r\n              stage2.add(newLayer);       \r\n          }\r\n          \r\n          if (topBorder.length === 1) {\r\n\r\n              const lastPoint = topBorder.shift();\r\n              const line = new Konva.Line({\r\n                points: [lastPoint,rectY,rectX+rectW,rectY],\r\n                stroke: \"black\", \r\n                strokeWidth: 2, \r\n                closed: false,\r\n              });\r\n\r\n              newLayer.add(line);\r\n              stage2.add(newLayer);\r\n          }\r\n\r\n\r\n          if (bottomBorder.length === bottomMax) {\r\n            if(bottomBorder.length === 0){\r\n              const line = new Konva.Line({\r\n                points: [rectX,rectY+rectH,rectX+rectW,rectY+rectH],\r\n                stroke: \"black\", \r\n                strokeWidth: 2, \r\n                closed: false,\r\n              });\r\n    \r\n              newLayer.add(line);\r\n              stage2.add(newLayer);\r\n            }else{\r\n            const firstPoint = bottomBorder.shift();\r\n            const line = new Konva.Line({\r\n              points: [rectX,rectY+rectH,firstPoint,rectY+rectH],\r\n              stroke: \"black\", \r\n              strokeWidth: 2, \r\n              closed: false,\r\n            });\r\n\r\n            newLayer.add(line);\r\n            stage2.add(newLayer);\r\n          }\r\n        }\r\n\r\n        while (bottomBorder.length > 1) {\r\n            const point1 = bottomBorder.shift();\r\n            const point2 = bottomBorder.shift();\r\n\r\n            const line = new Konva.Line({\r\n              points: [point1,rectY+rectH,point2,rectY+rectH],\r\n              stroke: \"black\", \r\n              strokeWidth: 2, \r\n              closed: false,\r\n            });\r\n\r\n            newLayer.add(line);\r\n            stage2.add(newLayer);       \r\n        }\r\n        \r\n        if (bottomBorder.length === 1) {\r\n\r\n            const lastPoint = bottomBorder.shift();\r\n            const line = new Konva.Line({\r\n              points: [lastPoint,rectY+rectH,rectX+rectW,rectY+rectH],\r\n              stroke: \"black\", \r\n              strokeWidth: 2, \r\n              closed: false,\r\n            });\r\n\r\n            newLayer.add(line);\r\n            stage2.add(newLayer);\r\n        }\r\n       \r\n\r\n        if (leftBorder.length === leftMax) {\r\n          if(leftBorder.length === 0){\r\n            const line = new Konva.Line({\r\n              points: [rectX,rectY,rectX,rectY+rectH],\r\n              stroke: \"black\", \r\n              strokeWidth: 2, \r\n              closed: false,\r\n            });\r\n    \r\n            newLayer.add(line);\r\n            stage2.add(newLayer);\r\n          }else{\r\n          const firstPoint = leftBorder.shift();\r\n          const line = new Konva.Line({\r\n            points: [rectX,rectY,rectX,firstPoint],\r\n            stroke: \"black\", \r\n            strokeWidth: 2, \r\n            closed: false,\r\n          });\r\n\r\n          newLayer.add(line);\r\n          stage2.add(newLayer);\r\n          }  \r\n      }\r\n\r\n      while (leftBorder.length > 1) {\r\n          const point1 = leftBorder.shift();\r\n          const point2 = leftBorder.shift();\r\n\r\n          const line = new Konva.Line({\r\n            points: [rectX,point1,rectX,point2],\r\n            stroke: \"black\", \r\n            strokeWidth: 2, \r\n            closed: false,\r\n          });\r\n\r\n          newLayer.add(line);\r\n          stage2.add(newLayer);       \r\n      }\r\n      \r\n      if (leftBorder.length === 1) {\r\n\r\n          const lastPoint = leftBorder.shift();\r\n          const line = new Konva.Line({\r\n            points: [rectX,lastPoint,rectX,rectY+rectH],\r\n            stroke: \"black\", \r\n            strokeWidth: 2, \r\n            closed: false,\r\n          });\r\n\r\n          newLayer.add(line);\r\n          stage2.add(newLayer);\r\n      }\r\n\r\n\r\n      if (rightBorder.length === rightMax) {\r\n        if(rightBorder.length === 0){\r\n          const line = new Konva.Line({\r\n            points: [rectX+rectW,rectY,rectX+rectW,rectY+rectH],\r\n            stroke: \"black\", \r\n            strokeWidth: 2, \r\n            closed: false,\r\n          });\r\n    \r\n          newLayer.add(line);\r\n          stage2.add(newLayer);\r\n        }else{\r\n        const firstPoint = rightBorder.shift();\r\n        const line = new Konva.Line({\r\n          points: [rectX+rectW,rectY,rectX+rectW,firstPoint],\r\n          stroke: \"black\", \r\n          strokeWidth: 2, \r\n          closed: false,\r\n        });\r\n\r\n        newLayer.add(line);\r\n        stage2.add(newLayer);\r\n      } \r\n    }\r\n\r\n    while (rightBorder.length > 1) {\r\n        const point1 = rightBorder.shift();\r\n        const point2 = rightBorder.shift();\r\n\r\n        const line = new Konva.Line({\r\n          points: [rectX+rectW,point1,rectX+rectW,point2],\r\n          stroke: \"black\", \r\n          strokeWidth: 2, \r\n          closed: false,\r\n        });\r\n\r\n        newLayer.add(line);\r\n        stage2.add(newLayer);       \r\n    }\r\n    \r\n    if (rightBorder.length === 1) {\r\n\r\n        const lastPoint = rightBorder.shift();\r\n        const line = new Konva.Line({\r\n          points: [rectX+rectW,lastPoint,rectX+rectW,rectY+rectH],\r\n          stroke: \"black\", \r\n          strokeWidth: 2, \r\n          closed: false,\r\n        });\r\n\r\n        newLayer.add(line);\r\n        stage2.add(newLayer);\r\n    }\r\n\r\n  \r\n            // 描画が完了した後の処理を行う\r\n            newLayer.on('draw', function () {\r\n              console.log('レイヤーの描画が完了しました。');\r\n             \r\n            });\r\n          });\r\n\r\n          const errorElement = document.querySelector(\".space-form-error\");\r\n          if (errorElement && errorElement.textContent !== \"\") {\r\n              errorElement.textContent = \"\";\r\n          }  \r\n    \r\n        })\r\n\r\n        .catch(error => {\r\n            console.error('Error:', error);\r\n        });\r\n\r\n      } else {\r\n        const spaceFormError = document.createElement(\"p\");\r\n         spaceFormError.classList.add(\"space-form-error\");\r\n         document.querySelector(\".homecenter-outer\").append(spaceFormError);\r\n         document.querySelector(\".space-form-error\").textContent = \"※既に空間が追加されています。新たに空間を追加する場合は追加済みの空間を取消してください※\";\r\n      }\r\n        \r\n      } else if (event.target.classList.contains(\"cancelBtn\")) {\r\n        // 削除ボタンをクリックした場合の処理\r\n        const liElement = event.target.closest(\"li\");\r\n        const spaceFormValue = liElement.firstChild.textContent.trim();\r\n\r\n    \r\n        // 削除対象のレイヤーを特定\r\n        const layerToRemove = stage2.find(node => node.name() === spaceFormValue)[0];\r\n\r\n        console.log('spaceFormValue:', spaceFormValue);\r\n        console.log('すべてのステージの子要素:', stage2.children);\r\n        console.log('削除するレイヤー:', layerToRemove);\r\n        console.log(\"layerToRemoveの名前:\",layerToRemove.name());\r\n        \r\n        if (layerToRemove instanceof Konva.Layer) {\r\n          layerToRemove.destroy();\r\n          stage2.getChildren().forEach(function(layer) {\r\n            if (layer instanceof Konva.Layer) {\r\n              layer.destroy();\r\n            }\r\n          });\r\n\r\n          const errorElement = document.querySelector(\".space-form-error\");\r\n          if (errorElement && errorElement.textContent !== \"\") {\r\n              errorElement.textContent = \"\";\r\n          }  \r\n        } else {\r\n          console.log('対象のレイヤーが見つかりませんでした。');\r\n        }\r\n\r\n      }\r\n  });\r\n\r\n \r\n\r\n\r\n  spaceList.addEventListener(\"click\", event => {\r\n    if (event.target.classList.contains(\"deleteBtn\")||event.target.classList.contains(\"fa-trash-can\")) {\r\n\r\n      const liElement = event.target.closest(\"li\");\r\n      const spaceFormValue = liElement.firstChild.textContent.trim();\r\n\r\n\r\n       if (liElement && spaceList.contains(liElement)) {\r\n        // 存在する場合、liElement を削除\r\n        spaceList.removeChild(liElement);\r\n\r\n        const layerToRemove = stage2.find(node => node.name() === spaceFormValue)[0];\r\n\r\n        if(layerToRemove instanceof Konva.Layer){\r\n          layerToRemove.destroy();\r\n        }\r\n      }\r\n\r\n      fetch('/delete-data', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({spaceFormValue}),\r\n      })\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          console.log('Server response:', data);\r\n          // サーバーからのレスポンスを処理\r\n        })\r\n        .catch(error => {\r\n          console.error('Error:', error);\r\n          // エラー処理\r\n        });\r\n\r\n      };\r\n  \r\n      \r\n  });\r\n\r\n\r\n  const furnitureList = document.querySelector(\".furniture-list\");\r\n\r\n  let topSpaceRange = [];\r\n\r\n\r\n  furnitureList.addEventListener(\"click\", event => {\r\n    if (event.target.classList.contains(\"deleteBtn\")||event.target.classList.contains(\"fa-trash-can\")) {\r\n\r\n      const liElement = event.target.closest(\"li\");\r\n      const furnitureFormValue = liElement.firstChild.textContent.trim();\r\n\r\n\r\n       if (liElement && furnitureList.contains(liElement)) {\r\n        // 存在する場合、liElement を削除\r\n        furnitureList.removeChild(liElement);\r\n\r\n        const layerToRemove = stage2.find(node => node.name() === furnitureFormValue)[0];\r\n\r\n        if(layerToRemove instanceof Konva.Layer){\r\n          layerToRemove.destroy();\r\n        }\r\n\r\n      }\r\n\r\n      fetch('/delete-data2', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({furnitureFormValue}),\r\n      })\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          console.log('Server response:', data);\r\n          // サーバーからのレスポンスを処理\r\n        })\r\n        .catch(error => {\r\n          console.error('Error:', error);\r\n          // エラー処理\r\n        });\r\n\r\n      };\r\n  \r\n      \r\n  });\r\n\r\n\r\n  let rectFnBoundsX = [];\r\n  let rectFnBoundsY = [];\r\n  let rectFnBoundsW = [];\r\n  let rectFnBoundsH = [];\r\n\r\n\r\n  furnitureList.addEventListener(\"click\", event => {\r\n    if (event.target.classList.contains(\"addBtn\")) {\r\n      if (stage2.getChildren().length > 0) {\r\n\r\n      const liElement = event.target.closest(\"li\");\r\n      const furnitureFormValue = liElement.firstChild.textContent.trim();\r\n      const requestData = {\r\n        furnitureFormValue: furnitureFormValue\r\n      };\r\n        \r\n        fetch('/get-layer-data2', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(requestData)\r\n        })\r\n        .then(response => response.json())\r\n        .then(layerData => {\r\n      \r\n         /* ドラッグ範囲制御機能一時中断 \r\n          let first1X0 = null;\r\n          let first2X0 = null;\r\n          let first0Y = null;\r\n\r\n          let firstX1 = null;\r\n          let first1Y = null;\r\n\r\n          let firstX2 = null;\r\n          let first2Y = null;\r\n\r\n\r\n          let firstShape1X0 = null;\r\n          let firstShape2X0 = null;\r\n          let firstShape0Y = null;\r\n\r\n          let firstShapeX1 = null;\r\n          let firstShape1Y = null;\r\n\r\n          let firstShapeX2 = null;\r\n          let firstShape2Y = null;\r\n\r\n          let firstShape2X1 = null;\r\n          let firstShape2X2 = null;\r\n\r\n          let lock = false;*/\r\n          layerData.layerData.layers.forEach(layerInfo => {\r\n            console.log(rectSpBoundsX[0])\r\n            const newLayer = new Konva.Layer({\r\n              name: layerInfo.name, \r\n              draggable: true,\r\n              \r\n              /* ドラッグ範囲制御機能一時中断 \r\n              \r\n              dragBoundFunc: (pos) =>{\r\n                \r\n                const sameNameW = rectFnBoundsW.find(n => n.name === furnitureFormValue);\r\n                const sameNameH = rectFnBoundsH.find(n => n.name === furnitureFormValue);\r\n\r\n               \r\n\r\n\r\n                let newY = pos.y;\r\n                let newX = pos.x;\r\n\r\n                const minRectX = rectSpBoundsX[0]-(homecenterInner.offsetWidth/2)+(sameNameW.width/2);\r\n                const maxRectX = rectSpBoundsX[0]-(homecenterInner.offsetWidth/2) + rectSpBoundsW[0]-(sameNameW.width/2);   \r\n                const minRectY = rectSpBoundsY[0]-(homecenterInner.offsetHeight/2)+(sameNameH.height/2); \r\n                const maxRectY = rectSpBoundsY[0]-(homecenterInner.offsetHeight/2) + rectSpBoundsH[0]-(sameNameH.height/2); \r\n\r\n\r\n                const topSpRangeChange = topSpaceRange.sort((a, b) => a.x1 - b.x1);\r\n\r\n                topSpRangeChange.forEach(element => {\r\n                  if(element.x1 > element.x2){\r\n                    [element.x1,element.x2] = [element.x2,element.x1];\r\n                  }\r\n                })\r\n\r\n                const topSpRangeChangeX2 = topSpRangeChange.slice().sort((a, b) => b.x2 - a.x2);\r\n                const topSpRangeChangeShapeX1 = topSpRangeChange.slice().sort((a, b) => b.x1 - a.x1);\r\n                \r\n\r\n                console.log(topSpaceRange)\r\n                console.log(topSpRangeChange)\r\n                console.log(topSpRangeChangeX2)\r\n\r\n                console.log(pos.x);\r\n                console.log(pos.x + sameNameW.width);\r\n\r\n              \r\n\r\n               \r\n                const matchElemTopLineY = topSpRangeChange.find((element) => rectSpBoundsY[0]-(homecenterInner.offsetHeight/2)+(sameNameH.height/2) > pos.y && pos.y > element.y-(homecenterInner.offsetHeight/2)+(sameNameH.height/2))\r\n                 \r\n\r\n        \r\n              \r\n                if(first1X0 === null){\r\n                  const matchElemTopX = topSpRangeChange.find((element) => element.x1-(homecenterInner.offsetWidth/2) < pos.x && pos.x < element.x2-(homecenterInner.offsetWidth/2))\r\n                  if(matchElemTopX && matchElemTopX.y-(homecenterInner.offsetHeight/2) < minRectY){\r\n                    first1X0 = matchElemTopX.x1;\r\n                    first2X0 = matchElemTopX.x2;\r\n                    first0Y = matchElemTopX.y;\r\n                    }\r\n                  }\r\n\r\n\r\n                if(firstX2 === null){\r\n                if(firstX1 === null){\r\n                  const matchElemTopX2 = topSpRangeChange.find((element) => element.x1-(homecenterInner.offsetWidth/2) > pos.x-(sameNameW.width/2) && pos.y < minRectY)\r\n                  if(matchElemTopX2 && matchElemTopX2.y-(homecenterInner.offsetHeight/2) < minRectY){\r\n                    firstX1 = matchElemTopX2.x1;\r\n                    first1Y = matchElemTopX2.y;\r\n                    console.log(firstX1)\r\n                  }\r\n                }\r\n              }\r\n\r\n                if(firstX1 === null){\r\n                if(firstX2 === null){\r\n                  const matchElemTopX3 = topSpRangeChangeX2.find((element) => element.x2-(homecenterInner.offsetWidth/2) < pos.x+(sameNameW.width/2) && pos.y < minRectY)\r\n                  if(matchElemTopX3 && matchElemTopX3.y-(homecenterInner.offsetHeight/2) < minRectY){\r\n                    firstX2 = matchElemTopX3.x2;\r\n                    first2Y = matchElemTopX3.y;\r\n                  }\r\n                }\r\n              }\r\n\r\n                const matchElemTopShapeY = topSpRangeChange.find((element) => rectSpBoundsY[0]-(homecenterInner.offsetHeight/2)+(sameNameH.height/2) < pos.y && pos.y < element.y-(homecenterInner.offsetHeight/2)+(sameNameH.height/2))\r\n\r\n             \r\n                if(firstShape0Y === null){\r\n                  const matchElemTopShapeX = topSpRangeChange.find((element) =>  element.x1-(homecenterInner.offsetWidth/2) < pos.x && pos.x < element.x2-(homecenterInner.offsetWidth/2))\r\n                  if(matchElemTopShapeX && matchElemTopShapeX.y-(homecenterInner.offsetHeight/2) > minRectY){\r\n                    firstShape0Y = matchElemTopShapeX.y;\r\n                    firstShape1X0 = matchElemTopShapeX.x1;\r\n                    firstShape2X0 = matchElemTopShapeX.x2;\r\n                  }\r\n                }\r\n              \r\n\r\n               if(firstShapeX2 === null && firstShape2X2 === null){\r\n                if(firstShapeX1 === null){\r\n                  const matchElemTopShapeX2 = topSpRangeChangeX2.find((element) => element.x1-(homecenterInner.offsetWidth/2)-(sameNameW.width/2) < pos.x && element.y-(homecenterInner.offsetHeight/2)+(sameNameH.height/2) > pos.y)\r\n                  if(matchElemTopShapeX2 && matchElemTopShapeX2.y-(homecenterInner.offsetHeight/2) > minRectY){\r\n                    firstShapeX1 = matchElemTopShapeX2.x1;\r\n                    firstShape1Y = matchElemTopShapeX2.y;\r\n                  }\r\n                }\r\n               }\r\n\r\n               if(firstShape2X2 === null){\r\n                if(firstShape2X1 === null){\r\n                  const matchElemTopShapeX2 = topSpRangeChange.find((element) => element.x1-(homecenterInner.offsetWidth/2)-(sameNameW.width/2) > pos.x && element.y-(homecenterInner.offsetHeight/2)+(sameNameH.height/2) > pos.y)\r\n                  if(matchElemTopShapeX2 && matchElemTopShapeX2.y-(homecenterInner.offsetHeight/2) > minRectY){\r\n                    firstShape2X1 = matchElemTopShapeX2.x1;\r\n                  }\r\n                }\r\n               }\r\n\r\n               if(firstShapeX1 === null && firstShape2X1 === null){\r\n                if(firstShapeX2 === null){\r\n                  const matchElemTopShapeX3 = topSpRangeChange.find((element) => element.x2-(homecenterInner.offsetWidth/2)+(sameNameW.width/2) > pos.x && element.y-(homecenterInner.offsetHeight/2)+(sameNameH.height/2) > pos.y)\r\n                  if(matchElemTopShapeX3 && matchElemTopShapeX3.y-(homecenterInner.offsetHeight/2) > minRectY){\r\n                    firstShapeX2 = matchElemTopShapeX3.x2;\r\n                    firstShape2Y = matchElemTopShapeX3.y;\r\n                  }\r\n                }\r\n               }\r\n\r\n               if(firstShape2X1 === null){\r\n                if(firstShape2X2 === null){\r\n                  const matchElemTopShapeX3 = topSpRangeChangeX2.find((element) => element.x2-(homecenterInner.offsetWidth/2)+(sameNameW.width/2) < pos.x && element.y-(homecenterInner.offsetHeight/2)+(sameNameH.height/2) > pos.y)\r\n                  if(matchElemTopShapeX3 && matchElemTopShapeX3.y-(homecenterInner.offsetHeight/2) > minRectY){\r\n                    firstShape2X2 = matchElemTopShapeX3.x2;\r\n                  }\r\n                }\r\n               }\r\n        \r\n\r\n \r\n                console.log(firstX1)\r\n                console.log(first1Y)\r\n                console.log(firstX2)\r\n                console.log(first2Y)\r\n                console.log(first0Y)\r\n                console.log(first1X0)\r\n                console.log(first2X0)\r\n\r\n                console.log(firstShapeX1)\r\n                console.log(firstShape1Y)\r\n                console.log(firstShapeX2)\r\n                console.log(firstShape2Y)\r\n                console.log(firstShape0Y)\r\n                console.log(firstShape1X0)\r\n                console.log(firstShape2X0)\r\n                console.log(firstShape2X1)\r\n                console.log(firstShape2X2)\r\n\r\n\r\n                //ロックフラグ内の値が代入ごとに更新されなかったのは、スコープの問題だった。Layerコンストラクター外でロックフラグを設定することで改善。\r\n                //matchElemTopX2での範囲設定は不完全なためx1より小さいpos.xの値全てを対象とさせるようにする。\r\n                //最初に取得したx1のelementに対して処理を行うようにする。現在はpos.xより大きいx1を取得するようにしているためドラッグ範囲が変わるほど取得されるx1も変わってしまい、制限箇所も都度変わってしまっている。\r\n                //初めて条件がtrueになった要素の配列１つのみを返すようにする。現在は条件がtrueになる度それぞれの要素の配列を返している。\r\n                //条件発火時のx1のみを取得。\r\n                //条件が解除されたとき、firstX1,firstYをnullにする。そして再び発火時はそのx1,yのみ取得。\r\n                //x2の処理もx1同様\r\n                //x2に対する処理の際furiniture図形が消える理由\r\n                //ロックフラグ適用要\r\n                //matchElemTopLineY,matchElemTopLineY2でx,y座標の制御をしているが、本来matchElemTopLineYはxに対しての制御、matchElemTopLineY2はyに対しての制御。yに対してのロジックがおかしいためmatchElemTopLineY2をmatchElemTopXに変更しブロック内の各条件式でxに対しての条件を設定しているが、yに対して条件に変更する。そうすれば上辺yを超えた場合、上辺yの内側の場合で処理を分けれる。\r\n                //firstY2,Y1X,Y2Xをnullにするブロックの条件を考える→現状の条件ではnullにできていない？nullの有無デバック要\r\n                //1688,1693のx1,x2,yに対する処理でおかしな挙動を起こしているのは、x2の場合、x2を越えて、yを越えたときnewX,Yの制御にnullが代入されている可能性を推測。現在は左のLinex2,右のLinex1にこの現象が起きている。デバック要\r\n                //1X0～2X0の範囲で0Yよりpos.yが上の時X1,X2がnullになる原因を特定\r\n                //nullの状況、null比較を具体的に一旦整理\r\n\r\n               if(pos.y < minRectY){ \r\n\r\n\r\n                if(matchElemTopLineY){//y座標の範囲\r\n                  if(firstX1-(homecenterInner.offsetWidth/2) > pos.x-(sameNameW.width/2) && first1Y-(homecenterInner.offsetHeight/2) < minRectY){\r\n                    newX = firstX1-(homecenterInner.offsetWidth/2)+(sameNameW.width/2)+2;\r\n                    newY = Math.max(newY,first1Y-(homecenterInner.offsetHeight/2)+(sameNameH.height/2)+2);\r\n                    lock = true;\r\n                  }else if(firstX1-(homecenterInner.offsetWidth/2) < pos.x+(sameNameW.width/2) || pos.y > minRectY){\r\n                    firstX1 = null;\r\n                    first1Y = null;\r\n                    lock = false;\r\n                  }\r\n                  if(firstX2 !== null && first2Y !== null && firstX2-(homecenterInner.offsetWidth/2) < pos.x+(sameNameW.width/2) && first2Y-(homecenterInner.offsetHeight/2) < minRectY){\r\n                    newX = firstX2-(homecenterInner.offsetWidth/2)-(sameNameW.width/2)-2;\r\n                    newY = Math.max(newY,first2Y-(homecenterInner.offsetHeight/2)+(sameNameH.height/2)+2);\r\n                    lock = true;\r\n                  }else if(firstX2-(homecenterInner.offsetWidth/2) > pos.x-(sameNameW.width/2) || pos.y > minRectY){\r\n                      firstX2 = null;\r\n                      first2Y = null;\r\n                      lock = false;\r\n                      console.log(pos.x)\r\n                  }\r\n\r\n                }else if(first1X0-(homecenterInner.offsetWidth/2) < pos.x && pos.x < first2X0-(homecenterInner.offsetWidth/2)){//x座標の範囲、すなわちmatchElemTopXが該当\r\n                  if(pos.y-(sameNameH.height/2) < first0Y-(homecenterInner.offsetHeight/2) && first0Y-(homecenterInner.offsetHeight/2) < minRectY){\r\n                    newY = Math.max(newY,first0Y-(homecenterInner.offsetHeight/2)+(sameNameH.height/2)+2);\r\n                    newX = Math.max(first1X0-(homecenterInner.offsetWidth/2)+(sameNameW.width/2)+2,Math.min(newX,first2X0-(homecenterInner.offsetWidth/2)-(sameNameW.width/2)-2));\r\n                  }\r\n                  firstX1 = null;     \r\n                  firstX2 = null;\r\n                  first1Y = null;\r\n                  first2Y = null;\r\n                }else if(firstX1-(homecenterInner.offsetWidth/2) > pos.x-(sameNameW.width/2)){\r\n                  if(pos.y-(sameNameH.height/2) < first1Y-(homecenterInner.offsetHeight/2) && first1Y-(homecenterInner.offsetHeight/2) < minRectY){\r\n                    newY = Math.max(newY,first1Y-(homecenterInner.offsetHeight/2)+(sameNameH.height/2)+2);\r\n                    newX = firstX1-(homecenterInner.offsetWidth/2)+(sameNameW.width/2)+2;\r\n                  }\r\n\r\n                }else if(firstX2-(homecenterInner.offsetWidth/2) < pos.x+(sameNameW.width/2)){\r\n                  if(pos.y-(sameNameH.height/2) < first2Y-(homecenterInner.offsetHeight/2) && first2Y-(homecenterInner.offsetHeight/2) < minRectY){\r\n                    newY = Math.max(newY,first2Y-(homecenterInner.offsetHeight/2)+(sameNameH.height/2)+2);\r\n                    newX = firstX2-(homecenterInner.offsetWidth/2)-(sameNameW.width/2)-2;\r\n                  }\r\n\r\n                }\r\n\r\n               if(!lock){\r\n                if ((rectSpBoundsX[0]-(homecenterInner.offsetWidth/2) < pos.x && pos.x < topSpRangeChange[0].x1-(homecenterInner.offsetWidth/2)) || \r\n                topSpRangeChange.some((element, index, array) => index < array.length - 1 && element.x2-(homecenterInner.offsetWidth/2) < pos.x && pos.x < array[index + 1].x1-(homecenterInner.offsetWidth/2)) || \r\n               (topSpRangeChange[topSpRangeChange.length - 1].x2-(homecenterInner.offsetWidth/2) < pos.x && pos.x < rectSpBoundsX[0]-(homecenterInner.offsetWidth/2) + rectSpBoundsW[0])) {\r\n\r\n                 newY = Math.max(newY,minRectY+2);\r\n\r\n               }\r\n              }\r\n        \r\n              }else if (pos.y > minRectY) {\r\n                //↓if(pos.y < minRectY)のブロック内のfirst0Y,first1X0,first2X0,firstX1,first1Y,firstX2,first2Yに対するnull\r\n                first0Y = null;\r\n                first1X0 = null;\r\n                first2X0 = null;\r\n                firstX1 = null;     \r\n                firstX2 = null;\r\n                first1Y = null;\r\n                first2Y = null;\r\n              \r\n                if(matchElemTopShapeY){\r\n\r\n                  if(firstShapeX1 !== null && firstShape1Y !== null && firstShapeX1-(homecenterInner.offsetWidth/2) < pos.x){\r\n                    newX = firstShapeX1-(homecenterInner.offsetWidth/2)-(sameNameW.width/2)-2;\r\n                    firstShape2X1 = null;\r\n                  }else if(firstShapeX1-(homecenterInner.offsetWidth/2) > pos.x){\r\n                    firstShapeX1 = null;\r\n                    firstShape1Y = null;\r\n                  }\r\n\r\n                  if(firstShapeX2-(homecenterInner.offsetWidth/2) > pos.x){\r\n                    newX = firstShapeX2-(homecenterInner.offsetWidth/2)+(sameNameW.width/2)+2;\r\n                    firstShape2X2 = null;\r\n                  }else if(firstShapeX2-(homecenterInner.offsetWidth/2) < pos.x){\r\n                    firstShapeX2 = null;\r\n                    firstShape2Y = null;\r\n                  }\r\n\r\n                  if(firstShape2X1-(homecenterInner.offsetWidth/2) < pos.x){\r\n                    firstShape2X1 = null;\r\n                  }\r\n\r\n                  if(firstShape2X2-(homecenterInner.offsetWidth/2) > pos.x){\r\n                    firstShape2X2 = null;\r\n                  }\r\n\r\n                }else if(firstShape1X0-(homecenterInner.offsetWidth/2) < pos.x && pos.x < firstShape2X0-(homecenterInner.offsetWidth/2)){\r\n                  if(pos.y-(sameNameH.height/2) < firstShape0Y-(homecenterInner.offsetHeight/2) && firstShape0Y-(homecenterInner.offsetHeight/2) > minRectY){\r\n                    newY = Math.max(newY,firstShape0Y-(homecenterInner.offsetHeight/2)+(sameNameH.height/2)+2);\r\n                  }\r\n                  firstShapeX1 = null;\r\n                  firstShape1Y = null;\r\n                  firstShapeX2 = null;\r\n                  firstShape2Y = null;\r\n\r\n                }else if(firstShape1X0-(homecenterInner.offsetWidth/2) > pos.x || pos.y-(sameNameH.height/2) > firstShape0Y-(homecenterInner.offsetHeight/2)){\r\n                  firstShape0Y = null;\r\n                  firstShape1X0 = null;\r\n                  firstShape2X0 = null;\r\n                }else if(firstShape2X0-(homecenterInner.offsetWidth/2) < pos.x || pos.y-(sameNameH.height/2) > firstShape0Y-(homecenterInner.offsetHeight/2)){\r\n                  firstShape0Y = null;\r\n                  firstShape1X0 = null;\r\n                  firstShape2X0 = null;\r\n                }\r\n              };\r\n\r\n                return {\r\n                  x: newX,\r\n                  y: newY,\r\n                };\r\n\r\n              },*/\r\n          });\r\n            \r\n            layerInfo.children.forEach(shapeData => {\r\n                // shapeData から必要な情報を取得して図形を作成\r\n                const rect = new Konva.Rect({\r\n                  x: (homecenterInner.offsetWidth - shapeData.width) / 2, \r\n                  y: (homecenterInner.offsetHeight - shapeData.height) / 2,\r\n                  width: shapeData.width,\r\n                  height: shapeData.height,\r\n                  fill: shapeData.fill,\r\n                  name: layerInfo.name,\r\n                  // その他の必要なプロパティを設定\r\n                });\r\n\r\n                const line = new Konva.Line({\r\n                  points: shapeData.points,\r\n                  stroke: shapeData.stroke, \r\n                  strokeWidth: shapeData.strokeWidth, \r\n                  closed: shapeData.closed,\r\n                  fill: shapeData.fill,\r\n                  name: layerInfo.name,\r\n                  draggable: true,\r\n                  // その他の必要なプロパティを設定\r\n                });\r\n\r\n    \r\n               \r\n                console.log(layerInfo);\r\n                \r\n                const shape = new Konva.Shape({\r\n                  name: layerInfo.name,\r\n                  sceneFunc: function (context, shape) {\r\n                    const clear = shapeData.clear;\r\n                    shape.clear = clear;\r\n                    const clearLine1 = shapeData.clearLine1;\r\n                    const clearLine2 = shapeData.clearLine2;\r\n                    const clearLine3 = shapeData.clearLine3;\r\n                    shape.clearLine1 = clearLine1;\r\n                    shape.clearLine2 = clearLine2;\r\n                    shape.clearLine3 = clearLine3;\r\n                    layerInfo.children.forEach(child => {\r\n                      if (child.clear) {\r\n                        context.clearRect(...child.clear);\r\n                      }\r\n                      if (child.clearLine1||child.clearLine2||child.clearLine3){\r\n\r\n                        context.beginPath();\r\n                        context.moveTo(...child.clearLine1);\r\n                        context.lineTo(...child.clearLine2);\r\n                        context.lineTo(...child.clearLine3);\r\n                        context.closePath();\r\n                    \r\n                        // 三角形のパスをクリアする\r\n                        context.globalCompositeOperation = 'destination-out';\r\n                        context.fill();\r\n                        context.globalCompositeOperation = 'source-over';\r\n                      }\r\n                    });\r\n                  },\r\n                });\r\n                \r\n                \r\n                \r\n                \r\n\r\n                \r\n                \r\n\r\n                console.log(rect);\r\n                newLayer.add(line);\r\n                newLayer.add(rect);\r\n                newLayer.add(shape);\r\n                newLayer.draw();\r\n \r\n\r\n                \r\n              \r\n              // 他の図形タイプに対する処理も同様に追加可能\r\n            });\r\n            \r\n\r\n            stage2.add(newLayer); // 新しいレイヤーを stage2 に追加\r\n            stage2.draw();\r\n      \r\n\r\n            const foundRect = newLayer.getChildren().find(node => node instanceof Konva.Rect);\r\n            console.log(foundRect)\r\n\r\n            const rectName = foundRect.name();\r\n\r\n            const rectX = foundRect.x();\r\n            rectFnBoundsX.push(rectX);\r\n            const rectY = foundRect.y();\r\n            rectFnBoundsY.push(rectY);\r\n            const rectW = foundRect.width();\r\n            rectFnBoundsW.push({width:rectW,name:rectName});\r\n            const rectH = foundRect.height();\r\n            rectFnBoundsH.push({height:rectH,name:rectName});\r\n\r\n\r\n            let topRectBorder = [];\r\n            let bottomRectBorder = [];\r\n            let rightRectBorder = [];\r\n            let leftRectBorder = [];\r\n\r\n            let topPoints = [];\r\n            let bottomPoints = [];\r\n            let rightPoints = [];\r\n            let leftPoints = [];\r\n\r\n\r\n            newLayer.getChildren().forEach(obj => {\r\n\r\n            if(obj instanceof Konva.Line){\r\n\r\n              if(rectX === obj.points()[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: obj.points(),\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                if(obj.points().length === 10){\r\n                  leftRectBorder.push(obj.points()[1],obj.points()[9]);\r\n                  leftPoints.push(obj.points()[2]);\r\n                }else if(obj.points().length === 6){\r\n                  leftRectBorder.push(obj.points()[1],obj.points()[5]);\r\n                  leftPoints.push(obj.points()[2]);\r\n                };\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(rectX + rectW === obj.points()[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: obj.points(),\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                if(obj.points().length === 10){\r\n                  rightRectBorder.push(obj.points()[1],obj.points()[9]);\r\n                  rightPoints.push(obj.points()[2]);\r\n                }else if(obj.points().length === 6){\r\n                  rightRectBorder.push(obj.points()[1],obj.points()[5]);\r\n                  rightPoints.push(obj.points()[2]);\r\n                };\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(rectY === obj.points()[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: obj.points(),\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                if(obj.points().length === 10){\r\n                  topRectBorder.push(obj.points()[0],obj.points()[8]);\r\n                  topPoints.push(obj.points()[3]);\r\n                }else if(obj.points().length === 6){\r\n                  topRectBorder.push(obj.points()[0],obj.points()[4]);\r\n                  topPoints.push(obj.points()[3]);\r\n                };\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(rectY + rectH === obj.points()[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: obj.points(),\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                if(obj.points().length === 10){\r\n                  bottomRectBorder.push(obj.points()[0],obj.points()[8]);\r\n                  bottomPoints.push(obj.points()[3]);\r\n                }else if(obj.points().length === 6){\r\n                  bottomRectBorder.push(obj.points()[0],obj.points()[4]);\r\n                  bottomPoints.push(obj.points()[3]);\r\n                };\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              };\r\n\r\n            }else if(obj instanceof Konva.Shape){\r\n              if(obj.clear && rectX === obj.clear[0] && rectY-1 === obj.clear[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                topRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                leftRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n               \r\n              }else if(obj.clear && rectX + rectW - obj.clear[2] === obj.clear[0] && rectY-1 === obj.clear[1]){  \r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                topRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                rightRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clear && rectY === obj.clear[1] && rectX-1 === obj.clear[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                topRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                leftRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clear && rectY + rectH - obj.clear[3] === obj.clear[1] && rectX-1 === obj.clear[0]){  \r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                bottomRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                leftRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clear && rectY+1 + rectH - obj.clear[3] === obj.clear[1] && rectX === obj.clear[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                bottomRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                leftRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n                \r\n              }else if(obj.clear && rectY+1 + rectH - obj.clear[3] === obj.clear[1] && rectX + rectW - obj.clear[2] === obj.clear[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                bottomRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                rightRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);        \r\n                \r\n              }else if(obj.clear && rectX+1 + rectW - obj.clear[2] === obj.clear[0] && rectY === obj.clear[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                topRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                rightRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clear && rectX+1 + rectW - obj.clear[2] === obj.clear[0] && rectY + rectH - obj.clear[3] === obj.clear[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                bottomRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n                rightRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else {\r\n\r\n              if(obj.clear && rectX-1 === obj.clear[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                leftRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clear && rectX + rectW - obj.clear[2]+1 === obj.clear[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)                   \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                rightRectBorder.push( obj.clear[1], obj.clear[1] + obj.clear[3]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clear && rectY-1 === obj.clear[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)   \r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                topRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n              \r\n              }else if(obj.clear && rectY + rectH - obj.clear[3]+1 === obj.clear[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clear[0], obj.clear[1] + obj.clear[3],                 // 左下の座標 (x, y + height)\r\n                    obj.clear[0], obj.clear[1],                                // 左上の座標 (x, y)\r\n                    obj.clear[0] + obj.clear[2], obj.clear[1],                 // 右上の座標 (x + width, y)         \r\n                    obj.clear[0] + obj.clear[2], obj.clear[1] + obj.clear[3],  // 右下の座標 (x + width, y + height)   \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                bottomRectBorder.push( obj.clear[0], obj.clear[0] + obj.clear[2]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectX-1 === obj.clearLine1[0] && rectY-1 !== obj.clearLine2[1] && rectY + rectH+1 !== obj.clearLine2[1] &&\r\n              !(rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0]) && \r\n              !(rectX + rectW === obj.clearLine2[0] && rectX + rectW === obj.clearLine3[0]) &&\r\n              !(rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1]) &&\r\n              !(rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1])){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                \r\n                    obj.clearLine3[0], obj.clearLine3[1],                \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                leftRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectX+1 + rectW === obj.clearLine1[0] && rectY-1 !== obj.clearLine2[1] && rectY + rectH+1 !== obj.clearLine2[1] && \r\n              !(rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0]) && \r\n              !(rectX + rectW === obj.clearLine2[0] && rectX + rectW === obj.clearLine3[0]) &&\r\n              !(rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1]) &&\r\n              !(rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1])){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                \r\n                    obj.clearLine3[0], obj.clearLine3[1],                \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                rightRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectY-1 === obj.clearLine1[1] && \r\n              !(rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0]) && \r\n              !(rectX + rectW === obj.clearLine2[0] && rectX + rectW === obj.clearLine3[0]) &&\r\n              !(Math.round(rectX + rectW) === Math.round(obj.clearLine2[0]) && Math.round(rectX + rectW) === Math.round(obj.clearLine3[0])) &&\r\n              !(rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1]) &&\r\n              !(rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1])){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                \r\n                    obj.clearLine3[0], obj.clearLine3[1],                \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectY+1 + rectH === obj.clearLine1[1] && \r\n              !(rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0]) && \r\n              !(rectX + rectW === obj.clearLine2[0] && rectX + rectW === obj.clearLine3[0]) &&\r\n              !(Math.round(rectX + rectW) === Math.round(obj.clearLine2[0]) && Math.round(rectX + rectW) === Math.round(obj.clearLine3[0])) &&\r\n              !(rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1]) &&\r\n              !(rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1])){\r\n                \r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                \r\n                    obj.clearLine3[0], obj.clearLine3[1],                \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] === obj.clearLine3[0] && rectY-1 === obj.clearLine1[1] && rectY-1 === obj.clearLine3[1] && \r\n              !(rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0]) && \r\n              !(rectX + rectW === obj.clearLine2[0] && rectX + rectW === obj.clearLine3[0]) &&\r\n              !(rectX + rectW+1 === obj.clearLine2[0] && rectX + rectW+1 === obj.clearLine3[0]) &&\r\n              !(rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1]) &&\r\n              !(rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1]) &&\r\n              !(rectX-1 === obj.clearLine2[0]) &&\r\n              !(rectX-1 === obj.clearLine1[0])){\r\n\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                \r\n                    obj.clearLine3[0], obj.clearLine3[1],                \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] === obj.clearLine3[0] && rectY+1 + rectH === obj.clearLine1[1] && rectY+1 + rectH === obj.clearLine3[1] && \r\n              !(rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0]) && \r\n              !(rectX + rectW === obj.clearLine2[0] && rectX + rectW === obj.clearLine3[0]) &&\r\n              !(rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1]) &&\r\n              !(rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1]) &&\r\n              !(rectX-1 === obj.clearLine2[0]) &&\r\n              !(rectX + rectW+1 === obj.clearLine2[0])){\r\n\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                \r\n                    obj.clearLine3[0], obj.clearLine3[1],                \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0] && rectY-1 === obj.clearLine1[1] && rectY-1 === obj.clearLine3[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && Math.round(rectX + rectW) === Math.round(obj.clearLine2[0]) && Math.round(rectX + rectW) === Math.round(obj.clearLine3[0]) && rectY-1 === obj.clearLine1[1] && rectY-1 === obj.clearLine3[1]){\r\n\r\n                \r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && rectX === obj.clearLine2[0] && rectX === obj.clearLine3[0] && rectY+1 + rectH === obj.clearLine1[1] && rectY+1 + rectH === obj.clearLine3[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && Math.round(rectX + rectW) === Math.round(obj.clearLine2[0]) && Math.round(rectX + rectW) === Math.round(obj.clearLine3[0]) && rectY+1 + rectH === obj.clearLine1[1] && rectY+1 + rectH === obj.clearLine3[1]){\r\n                \r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1] && rectX-1 === obj.clearLine1[0] && rectX-1 === obj.clearLine3[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && rectY === obj.clearLine2[1] && rectY === obj.clearLine3[1] && rectX+1 + rectW === obj.clearLine1[0] && rectX+1 + rectW === obj.clearLine3[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1] && rectX-1 === obj.clearLine1[0] && rectX-1 === obj.clearLine3[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && rectY + rectH === obj.clearLine2[1] && rectY + rectH === obj.clearLine3[1] && rectX+1 + rectW === obj.clearLine1[0] && rectX+1 + rectW === obj.clearLine3[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                           \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n                \r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] === obj.clearLine3[0] && rectY-1 === obj.clearLine1[1] && rectX-1 === obj.clearLine2[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectX-1 === obj.clearLine1[0] && rectY-1 === obj.clearLine2[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] === obj.clearLine3[0] && rectY-1 === obj.clearLine1[1] && rectX + rectW +1 === obj.clearLine2[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectX + rectW +1 === obj.clearLine1[0] && rectY-1 === obj.clearLine2[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                topRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] === obj.clearLine3[0] && rectY + rectH+1 === obj.clearLine1[1] && rectX-1 === obj.clearLine2[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectX-1 === obj.clearLine1[0] && rectY + rectH+1  === obj.clearLine2[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                leftRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] !== obj.clearLine3[0] && obj.clearLine2[0] === obj.clearLine3[0] && rectY + rectH+1 === obj.clearLine1[1] && rectX + rectW+1 === obj.clearLine2[0]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine1[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine2[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }else if(obj.clearLine1 && obj.clearLine1[0] === obj.clearLine3[0] && obj.clearLine2[0] !== obj.clearLine3[0] && rectX + rectW+1 === obj.clearLine1[0] && rectY + rectH+1 === obj.clearLine2[1]){\r\n\r\n                const line = new Konva.Line({\r\n                  points: [\r\n                    obj.clearLine1[0], obj.clearLine1[1],                \r\n                    obj.clearLine2[0], obj.clearLine2[1],                              \r\n                  ],\r\n                  stroke: \"black\", \r\n                  strokeWidth: 2, \r\n                  closed: false,\r\n                  fill: \"black\",\r\n                  name: layerInfo.name,\r\n                });\r\n\r\n                bottomRectBorder.push(obj.clearLine2[0],obj.clearLine3[0]);\r\n                rightRectBorder.push(obj.clearLine1[1],obj.clearLine3[1]);\r\n\r\n                newLayer.add(line);\r\n                stage2.add(newLayer);\r\n\r\n              }\r\n\r\n            };\r\n\r\n            };\r\n             \r\n            });\r\n\r\n\r\n            const topBorder = topRectBorder.sort((a, b) => a - b);\r\n            const topMax = topBorder.length;\r\n            const bottomBorder = bottomRectBorder.sort((a, b) => a - b);\r\n            const bottomMax = bottomBorder.length;\r\n            const leftBorder = leftRectBorder.sort((a, b) => a - b);\r\n            const leftMax = leftBorder.length;\r\n            const rightBorder = rightRectBorder.sort((a, b) => a - b);\r\n            const rightMax = rightBorder.length;\r\n\r\n          if (topBorder.length === topMax) {\r\n            if(topBorder.length === 0){\r\n              const line = new Konva.Line({\r\n                points: [rectX,rectY,rectX+rectW,rectY],\r\n                stroke: \"black\", \r\n                strokeWidth: 2, \r\n                closed: false,\r\n                fill: \"black\",\r\n                name: layerInfo.name,\r\n              });\r\n  \r\n              newLayer.add(line);\r\n              stage2.add(newLayer);\r\n            }else{\r\n              const firstPoint = topBorder.shift();\r\n              const line = new Konva.Line({\r\n                points: [rectX,rectY,firstPoint,rectY],\r\n                stroke: \"black\", \r\n                strokeWidth: 2, \r\n                closed: false,\r\n                fill: \"black\",\r\n                name: layerInfo.name,\r\n              });\r\n\r\n              newLayer.add(line);\r\n              stage2.add(newLayer);\r\n            }\r\n          }\r\n\r\n          while (topBorder.length > 1) {\r\n              const point1 = topBorder.shift();\r\n              const point2 = topBorder.shift();\r\n\r\n              const line = new Konva.Line({\r\n                points: [point1,rectY,point2,rectY],\r\n                stroke: \"black\", \r\n                strokeWidth: 2, \r\n                closed: false,\r\n                fill: \"black\",\r\n                name: layerInfo.name,\r\n              });\r\n\r\n              newLayer.add(line);\r\n              stage2.add(newLayer);       \r\n          }\r\n          \r\n          if (topBorder.length === 1) {\r\n\r\n              const lastPoint = topBorder.shift();\r\n              const line = new Konva.Line({\r\n                points: [lastPoint,rectY,rectX+rectW,rectY],\r\n                stroke: \"black\", \r\n                strokeWidth: 2, \r\n                closed: false,\r\n                fill: \"black\",\r\n                name: layerInfo.name,\r\n              });\r\n\r\n              newLayer.add(line);\r\n              stage2.add(newLayer);\r\n          }\r\n\r\n\r\n          if (bottomBorder.length === bottomMax) {\r\n            if(bottomBorder.length === 0){\r\n              const line = new Konva.Line({\r\n                points: [rectX,rectY+rectH,rectX+rectW,rectY+rectH],\r\n                stroke: \"black\", \r\n                strokeWidth: 2, \r\n                closed: false,\r\n                fill: \"black\",\r\n                name: layerInfo.name,\r\n              });\r\n    \r\n              newLayer.add(line);\r\n              stage2.add(newLayer);\r\n            }else{\r\n            const firstPoint = bottomBorder.shift();\r\n            const line = new Konva.Line({\r\n              points: [rectX,rectY+rectH,firstPoint,rectY+rectH],\r\n              stroke: \"black\", \r\n              strokeWidth: 2, \r\n              closed: false,\r\n              fill: \"black\",\r\n              name: layerInfo.name,\r\n            });\r\n\r\n            newLayer.add(line);\r\n            stage2.add(newLayer);\r\n          }\r\n        }\r\n\r\n        while (bottomBorder.length > 1) {\r\n            const point1 = bottomBorder.shift();\r\n            const point2 = bottomBorder.shift();\r\n\r\n            const line = new Konva.Line({\r\n              points: [point1,rectY+rectH,point2,rectY+rectH],\r\n              stroke: \"black\", \r\n              strokeWidth: 2, \r\n              closed: false,\r\n              fill: \"black\",\r\n              name: layerInfo.name,\r\n            });\r\n\r\n            newLayer.add(line);\r\n            stage2.add(newLayer);       \r\n        }\r\n        \r\n        if (bottomBorder.length === 1) {\r\n\r\n            const lastPoint = bottomBorder.shift();\r\n            const line = new Konva.Line({\r\n              points: [lastPoint,rectY+rectH,rectX+rectW,rectY+rectH],\r\n              stroke: \"black\", \r\n              strokeWidth: 2, \r\n              closed: false,\r\n              fill: \"black\",\r\n              name: layerInfo.name,\r\n            });\r\n\r\n            newLayer.add(line);\r\n            stage2.add(newLayer);\r\n        }\r\n       \r\n\r\n        if (leftBorder.length === leftMax) {\r\n          if(leftBorder.length === 0){\r\n            const line = new Konva.Line({\r\n              points: [rectX,rectY,rectX,rectY+rectH],\r\n              stroke: \"black\", \r\n              strokeWidth: 2, \r\n              closed: false,\r\n              fill: \"black\",\r\n              name: layerInfo.name,\r\n            });\r\n    \r\n            newLayer.add(line);\r\n            stage2.add(newLayer);\r\n          }else{\r\n          const firstPoint = leftBorder.shift();\r\n          const line = new Konva.Line({\r\n            points: [rectX,rectY,rectX,firstPoint],\r\n            stroke: \"black\", \r\n            strokeWidth: 2, \r\n            closed: false,\r\n            fill: \"black\",\r\n            name: layerInfo.name,\r\n          });\r\n\r\n          newLayer.add(line);\r\n          stage2.add(newLayer);\r\n          }  \r\n      }\r\n\r\n      while (leftBorder.length > 1) {\r\n          const point1 = leftBorder.shift();\r\n          const point2 = leftBorder.shift();\r\n\r\n          const line = new Konva.Line({\r\n            points: [rectX,point1,rectX,point2],\r\n            stroke: \"black\", \r\n            strokeWidth: 2, \r\n            closed: false,\r\n            fill: \"black\",\r\n            name: layerInfo.name,\r\n          });\r\n\r\n          newLayer.add(line);\r\n          stage2.add(newLayer);       \r\n      }\r\n      \r\n      if (leftBorder.length === 1) {\r\n\r\n          const lastPoint = leftBorder.shift();\r\n          const line = new Konva.Line({\r\n            points: [rectX,lastPoint,rectX,rectY+rectH],\r\n            stroke: \"black\", \r\n            strokeWidth: 2, \r\n            closed: false,\r\n            fill: \"black\",\r\n            name: layerInfo.name,\r\n          });\r\n\r\n          newLayer.add(line);\r\n          stage2.add(newLayer);\r\n      }\r\n\r\n\r\n      if (rightBorder.length === rightMax) {\r\n        if(rightBorder.length === 0){\r\n          const line = new Konva.Line({\r\n            points: [rectX+rectW,rectY,rectX+rectW,rectY+rectH],\r\n            stroke: \"black\", \r\n            strokeWidth: 2, \r\n            closed: false,\r\n            fill: \"black\",\r\n            name: layerInfo.name,\r\n          });\r\n    \r\n          newLayer.add(line);\r\n          stage2.add(newLayer);\r\n        }else{\r\n        const firstPoint = rightBorder.shift();\r\n        const line = new Konva.Line({\r\n          points: [rectX+rectW,rectY,rectX+rectW,firstPoint],\r\n          stroke: \"black\", \r\n          strokeWidth: 2, \r\n          closed: false,\r\n          fill: \"black\",\r\n          name: layerInfo.name,\r\n        });\r\n\r\n        newLayer.add(line);\r\n        stage2.add(newLayer);\r\n      } \r\n    }\r\n\r\n    while (rightBorder.length > 1) {\r\n        const point1 = rightBorder.shift();\r\n        const point2 = rightBorder.shift();\r\n\r\n        const line = new Konva.Line({\r\n          points: [rectX+rectW,point1,rectX+rectW,point2],\r\n          stroke: \"black\", \r\n          strokeWidth: 2, \r\n          closed: false,\r\n          fill: \"black\",\r\n          name: layerInfo.name,\r\n        });\r\n\r\n        newLayer.add(line);\r\n        stage2.add(newLayer);       \r\n    }\r\n    \r\n    if (rightBorder.length === 1) {\r\n\r\n        const lastPoint = rightBorder.shift();\r\n        const line = new Konva.Line({\r\n          points: [rectX+rectW,lastPoint,rectX+rectW,rectY+rectH],\r\n          stroke: \"black\", \r\n          strokeWidth: 2, \r\n          closed: false,\r\n          fill: \"black\",\r\n          name: layerInfo.name,\r\n        });\r\n\r\n        newLayer.add(line);\r\n        stage2.add(newLayer);\r\n    }\r\n\r\n  \r\n            // 描画が完了した後の処理を行う\r\n            newLayer.on('draw', function () {\r\n              console.log('レイヤーの描画が完了しました。');\r\n             \r\n            });\r\n\r\n            const topLowPoint = topPoints.sort((a, b) => a - b);\r\n            const bottomHeighPoint = bottomPoints.sort((a, b) => b - a);\r\n            const leftLowPoint = leftPoints.sort((a, b) => a - b);\r\n            const rightHeighPoint = rightPoints.sort((a, b) => b - a);\r\n\r\n\r\n\r\n\r\n\r\n          });\r\n\r\n          const errorElement = document.querySelector(\".space-form-error\");\r\n          if (errorElement && errorElement.textContent !== \"\") {\r\n              errorElement.textContent = \"\";\r\n          }  \r\n    \r\n        })\r\n        \r\n        \r\n        \r\n        .catch(error => {\r\n            console.error('Error:', error);\r\n        });\r\n\r\n      } else {\r\n        const spaceFormError = document.createElement(\"p\");\r\n         spaceFormError.classList.add(\"space-form-error\");\r\n         document.querySelector(\".homecenter-outer\").append(spaceFormError);\r\n         document.querySelector(\".space-form-error\").textContent = \"※空間一覧内から空間を追加後に家具一覧内の家具を追加してください※\";\r\n      }\r\n        \r\n      } else if (event.target.classList.contains(\"cancelBtn\")) {\r\n        // 削除ボタンをクリックした場合の処理\r\n        const liElement = event.target.closest(\"li\");\r\n        const furnitureFormValue = liElement.firstChild.textContent.trim();\r\n\r\n    \r\n        // 削除対象のレイヤーを特定\r\n        const layerToRemove = stage2.find(node => node.name() === furnitureFormValue)[0];\r\n\r\n        console.log('furnitureFormValue:', furnitureFormValue);\r\n        console.log('すべてのステージの子要素:', stage2.children);\r\n        console.log('削除するレイヤー:', layerToRemove);\r\n        \r\n        \r\n        if (layerToRemove instanceof Konva.Layer) {\r\n          layerToRemove.destroy();\r\n          const errorElement = document.querySelector(\".space-form-error\");\r\n          if (errorElement && errorElement.textContent !== \"\") {\r\n              errorElement.textContent = \"\";\r\n          }  \r\n        } else {\r\n          console.log('対象のレイヤーが見つかりませんでした。');\r\n        }\r\n      }\r\n  });\r\n\r\n  document.querySelector(\".home-compbtn\").addEventListener(\"click\",function(){\r\n    \r\n\r\n    const homeForm = document.querySelector('.home-form');\r\n    const homeFormValue = homeForm.value;\r\n    const ul = document.querySelector(\".home-addlist\");\r\n\r\n    function isDuplicateValuePresent(value, elements) {\r\n      let isDuplicate = false;\r\n      elements.forEach(element => {\r\n        if (element.textContent.trim() === value) {\r\n          isDuplicate = true;\r\n          return;\r\n        }\r\n      });\r\n      return isDuplicate;\r\n    };\r\n\r\n    if( homeFormValue === \"\"){\r\n      const homeFormError = document.createElement(\"p\");\r\n      homeFormError.classList.add(\"home-form-error\");\r\n      document.querySelector(\".homecenter-outer\").append(homeFormError);\r\n      document.querySelector(\".home-form-error\").textContent = \"※配置図名を入力してください※\";\r\n    } else if(homeFormValue.length >= 6){\r\n     const homeFormError = document.createElement(\"p\");\r\n     homeFormError.classList.add(\"home-form-error\");\r\n     document.querySelector(\".homecenter-outer\").append(homeFormError);\r\n     document.querySelector(\".home-form-error\").textContent = \"※５文字以内で指定してください※\";\r\n    }  else if (isDuplicateValuePresent(homeFormValue+\"編集\"+\"取消\", ul.querySelectorAll(\"li\"))) {\r\n     const homeFormError = document.createElement(\"p\");\r\n     homeFormError.classList.add(\"home-form-error\");\r\n     document.querySelector(\".homecenter-outer\").append(homeFormError);\r\n     document.querySelector(\".home-form-error\").textContent = \"※この配置図名は既に追加されています※\";\r\n     } else if(stage2.getChildren().length < 2){\r\n       const homeFormError = document.createElement(\"p\");\r\n       homeFormError.classList.add(\"home-form-error\");\r\n       document.querySelector(\".homecenter-outer\").append(homeFormError);\r\n       document.querySelector(\".home-form-error\").textContent = \"※家具が配置されていません※\";\r\n    } else {\r\n\r\n      const sourceLayers = stage2.getLayers(); // すべてのレイヤーの配列を取得\r\n\r\n\r\n\r\n      const layerData = {\r\n        layers: [],  // レイヤーの情報を格納する配列\r\n      };\r\n      \r\n      sourceLayers.forEach(layer => {\r\n        const layerInfo = {\r\n          name: homeFormValue,  // レイヤーの名前を取得\r\n          children: [],      // 子要素の情報を格納する配列\r\n        };\r\n\r\n        function getShapeType(shape) {\r\n          if (shape instanceof Konva.Rect) {\r\n            return \"Rect\";\r\n          } else if (shape instanceof Konva.Line) {\r\n            return \"Line\";\r\n          } else if (shape instanceof Konva.Shape) {\r\n            return \"Shape\";\r\n          } \r\n        };\r\n        \r\n        layer.getChildren().forEach(shape => {\r\n          const shapeType = getShapeType(shape);\r\n          if (shapeType === \"Rect\") {\r\n          const rectData = {\r\n            type: shape.getType(),   // シェイプの種類（Rect、Circle など）\r\n            x: shape.x(),\r\n            y: shape.y(),\r\n            width: shape.width(),\r\n            height: shape.height(),\r\n            fill: shape.fill(),    \r\n            name: shape.name(),\r\n            absolutePositionRect: shape.getAbsolutePosition(),\r\n          };\r\n\r\n          layerInfo.children.push(rectData); // 子要素の情報を配列に追加\r\n        }\r\n\r\n        if (shapeType === \"Line\") {\r\n          const lineData = {\r\n            type: shape.getType(),   // シェイプの種類（Rect、Circle など）\r\n            points: shape.points(),\r\n            stroke: shape.stroke(), // 線の色\r\n            strokeWidth: shape.strokeWidth(), // 線の太さ\r\n            closed: shape.closed(), // 閉じた形状として描画\r\n            fill: shape.fill(),    \r\n            name: shape.name(),\r\n            absolutePositionLine: shape.getAbsolutePosition(),\r\n          };\r\n          layerInfo.children.push(lineData); // 子要素の情報を配列に追加\r\n        }\r\n\r\n\r\n\r\n\r\n        if (shapeType === \"Shape\") {\r\n          const shapeData = {\r\n            type: shape.getType(),\r\n            name: shape.name(),\r\n            clear: shape.clear,\r\n            clearLine1 : shape.clearLine1,\r\n            clearLine2 : shape.clearLine2,\r\n            clearLine3 : shape.clearLine3,\r\n            absolutePositionShape: shape.getAbsolutePosition(),\r\n          };\r\n          layerInfo.children.push(shapeData);\r\n        }\r\n\r\n        console.log(shape.clear);\r\n          \r\n          \r\n        });\r\n      \r\n        layerData.layers.push(layerInfo); // レイヤーの情報を配列に追加\r\n      });\r\n      \r\n      \r\n\r\n\r\nconst newData = {\r\n  homeFormValue: homeFormValue,\r\n  layerData: layerData,\r\n};\r\n\r\n  // /user-data の fetch 処理\r\nfetch('/user-data8', {\r\nmethod: 'POST',\r\nheaders: {\r\n  'Content-Type': 'application/json'\r\n},\r\nbody: JSON.stringify(newData),\r\n})\r\n.then(response => {\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n  return response.json();\r\n})\r\n.then(data => {\r\n  console.log('Server response:', data);\r\n  // サーバーからのレスポンスを処理\r\n})\r\n.catch(error => {\r\n  console.error('Error:', error);\r\n  // エラー処理\r\n});\r\n\r\n\r\nfetch('/get-new-data8')\r\n.then(response => {\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n  return response.json();\r\n})\r\n.then(data => {\r\n  const list = document.createElement(\"li\");\r\n  list.classList.add(\"add-list\");\r\n  list.append(homeFormValue);\r\n  const editBtn = document.createElement(\"button\");\r\n  editBtn.append(\"編集\");\r\n  editBtn.classList.add(\"editBtn2\");\r\n  const cancelBtn = document.createElement(\"button\");\r\n  cancelBtn.append(\"取消\");\r\n  cancelBtn.classList.add(\"cancelBtn2\");\r\n  const deleteBtn = document.createElement(\"button\");\r\n  const trash = document.createElement(\"i\");\r\n  trash.classList.add(\"fa-solid\")\r\n  trash.classList.add(\"fa-trash-can\")\r\n  deleteBtn.append(trash);\r\n  deleteBtn.classList.add(\"deleteBtn2\");\r\n  const btnBox = document.createElement(\"div\");\r\n  btnBox.classList.add(\"btn-box\");\r\n  btnBox.append(editBtn,cancelBtn,deleteBtn);\r\n  list.append(btnBox);\r\n  document.querySelector('.home-addlist').append(list);\r\n})\r\n.catch(error => {\r\n  console.error('Error getting new data:', error);\r\n  // エラー処理\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfetch('/get-new-data9')\r\n.then(response => {\r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n  return response.json();\r\n})\r\n.then(data => {\r\n  const list = document.createElement(\"li\");\r\n  list.classList.add(\"add-list4\");\r\n  list.append(homeFormValue);\r\n  const addBtn = document.createElement(\"button\");\r\n  addBtn.append(\"表示\");\r\n  addBtn.classList.add(\"addBtn2\");\r\n  const cancelBtn = document.createElement(\"button\");\r\n  cancelBtn.append(\"取消\");\r\n  cancelBtn.classList.add(\"cancelBtn3\");\r\n  const btnBox = document.createElement(\"div\");\r\n  btnBox.classList.add(\"btn-box\");\r\n  btnBox.append(addBtn,cancelBtn);\r\n  list.append(btnBox);\r\n  document.querySelector('.photo-addlist').append(list);\r\n})\r\n.catch(error => {\r\n  console.error('Error getting new data:', error);\r\n  // エラー処理\r\n});\r\n\r\n\r\n\r\n\r\n// stage2.getChildren().forEach(layer => {layer.destroy()}) 左に記載している処理だとstage2に追加した順番でのレイヤー配列のインデックス番号が偶数のレイヤーだけが削除され奇数のインデックス番号のレイヤーのみ削除されないという挙動に陥ったためsliceメソッドを使用しインデックス番号をコピーした新しい配列を作成することでとりあえずstage2内の全てのレイヤーを削除することに成功\r\n\r\nfunction removeAllLayers() {\r\n  const deleteLayers = stage2.getLayers().slice(); \r\n\r\n\r\n  deleteLayers.forEach(deleteLayer => {\r\n    deleteLayer.destroy();\r\n\r\n  });\r\n}\r\n\r\nremoveAllLayers();\r\n\r\nhomeForm.value = \"\";\r\nconst errorElement = document.querySelector(\".home-form-error\");\r\nif (errorElement && errorElement.textContent !== \"\") {\r\n    errorElement.textContent = \"\";\r\n}  \r\n\r\n   }\r\n  });\r\n\r\n\r\n\r\n  const overWrite = document.createElement('button');\r\n  overWrite.classList.add(\"home-overwritebtn\");\r\n  overWrite.append(\"上書き保存\");\r\n  document.querySelector(\".homecenter-outer\").append(overWrite);\r\n  overWrite.style.display = 'none';\r\n\r\n  const homeList = document.querySelector(\".home-addlist\");\r\n\r\n\r\n  homeList.addEventListener(\"click\", event => {\r\n    if (event.target.classList.contains(\"editBtn2\")) {\r\n      if (stage2.getChildren().length === 0) {\r\n\r\n      const liElement = event.target.closest(\"li\");\r\n      const homeFormValue = liElement.firstChild.textContent.trim();\r\n      const requestData = {\r\n          homeFormValue: homeFormValue\r\n      };\r\n        \r\n        fetch('/get-layer-data3', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(requestData)\r\n        })\r\n        .then(response => response.json())\r\n        .then(layerData => {\r\n        \r\n          // レイヤーごとに新しい Layer を作成\r\n          const layers = layerData.layerData.layers;\r\n\r\n          const layerName = layers.find(obj => obj.name);\r\n          const newLayer1 = new Konva.Layer({\r\n            name: layerName.name,\r\n          });\r\n          \r\n          const newLayer2 = new Konva.Layer({\r\n            name: layerName.name,\r\n            draggable: true,\r\n          });\r\n\r\n          let layersAry = [];\r\n          let n = 0;\r\n          \r\n          layers.forEach(layerInfo => {\r\n            \r\n            layerInfo.children.forEach(shapeData => {\r\n\r\n\r\n                // shapeData から必要な情報を取得して図形を作成\r\n                const rect = new Konva.Rect({\r\n                  x: (homecenterInner.offsetWidth - shapeData.width) / 2, \r\n                  y: (homecenterInner.offsetHeight - shapeData.height) / 2,\r\n                  width: shapeData.width,\r\n                  height: shapeData.height,\r\n                  fill: shapeData.fill,\r\n                  name: shapeData.name,\r\n                  // その他の必要なプロパティを設定\r\n                });\r\n                \r\n                if (shapeData.absolutePositionRect) {\r\n                  rect.setAbsolutePosition(shapeData.absolutePositionRect);\r\n                }\r\n\r\n\r\n                const line = new Konva.Line({\r\n                  points: shapeData.points,\r\n                  stroke: shapeData.stroke, \r\n                  strokeWidth: shapeData.strokeWidth, \r\n                  closed: shapeData.closed,\r\n                  fill: shapeData.fill,\r\n                  name: shapeData.name,\r\n                  // その他の必要なプロパティを設定\r\n                });\r\n\r\n                if (shapeData.absolutePositionLine) {\r\n                  line.setAbsolutePosition(shapeData.absolutePositionLine);\r\n                }\r\n\r\n                \r\n\r\n\r\n                const shape = new Konva.Shape({\r\n                  name: shapeData.name,\r\n                  sceneFunc: function (context, shape) {\r\n                    const clear = shapeData.clear;\r\n                    shape.clear = clear;\r\n                    const clearLine1 = shapeData.clearLine1;\r\n                    const clearLine2 = shapeData.clearLine2;\r\n                    const clearLine3 = shapeData.clearLine3;\r\n                    shape.clearLine1 = clearLine1;\r\n                    shape.clearLine2 = clearLine2;\r\n                    shape.clearLine3 = clearLine3;\r\n                      if (shapeData.clear) {\r\n                        context.clearRect(...shapeData.clear);\r\n                      }\r\n                      if (shapeData.clearLine1||shapeData.clearLine2||shapeData.clearLine3){\r\n                        context.beginPath();\r\n                        context.moveTo(...shapeData.clearLine1);\r\n                        context.lineTo(...shapeData.clearLine2);\r\n                        context.lineTo(...shapeData.clearLine3);\r\n                        context.closePath();\r\n                    \r\n                        // 三角形のパスをクリアする\r\n                        context.globalCompositeOperation = 'destination-out';\r\n                        context.fill();\r\n                        context.globalCompositeOperation = 'source-over';\r\n                      }\r\n                  },\r\n                });\r\n\r\n                if (shapeData.absolutePositionShape) {\r\n                  shape.setAbsolutePosition(shapeData.absolutePositionShape);\r\n                }\r\n\r\n                const targetLayer = layers.findIndex(layer => layer.children.length > 0); \r\n\r\n                console.log(targetLayer)\r\n                console.log(layers.findIndex(layer => layer.children.length > 0))\r\n                console.log(layers[targetLayer])\r\n                console.log(layers[targetLayer].children)\r\n\r\n\r\n                if (layers[targetLayer].children.some(child => child === shapeData)) {\r\n\r\n                  if(shapeData.hasOwnProperty(\"absolutePositionLine\")){\r\n                    newLayer1.add(line);\r\n                  }else if(shapeData.hasOwnProperty(\"absolutePositionRect\")){\r\n                    newLayer1.add(rect);\r\n                  }else if(shapeData.hasOwnProperty(\"absolutePositionShape\")){\r\n                    newLayer1.add(shape);\r\n                  };\r\n                   } else {\r\n                    //１回目はshapeDataをレイヤーに追加し2回目のshapeDataは１回目にaddされたshapeDataのnameプロパティと値を比較し違う場合は新たなレイヤーを作成し追加、同じ場合は１回目の同じnameプロパティの値が入ったレイヤーに追加、３回目は１，２回目のnameプロパティと値が違う場合は新たなレイヤーを作成し追加、nameプロパティの値が１，２回目のいずれかに該当すれば該当したレイヤーに追加....これらを最後まで繰り返す\r\n                    n++;\r\n                   if(n === 1){ \r\n\r\n                     if(shapeData.hasOwnProperty(\"absolutePositionLine\")){\r\n                      newLayer2.add(line);\r\n                    }else if(shapeData.hasOwnProperty(\"absolutePositionRect\")){\r\n                      newLayer2.add(rect);\r\n                    }else if(shapeData.hasOwnProperty(\"absolutePositionShape\")){\r\n                      newLayer2.add(shape);\r\n                    };   \r\n                    \r\n                   }else{\r\n\r\n                    if(newLayer2.getChildren()[0].name() === shapeData.name){\r\n\r\n                      if(shapeData.hasOwnProperty(\"absolutePositionLine\")){\r\n                        newLayer2.add(line);\r\n                      }else if(shapeData.hasOwnProperty(\"absolutePositionRect\")){\r\n                        newLayer2.add(rect);\r\n                      }else if(shapeData.hasOwnProperty(\"absolutePositionShape\")){\r\n                        newLayer2.add(shape);\r\n                      };  \r\n\r\n                    }else if(layersAry.find(layer =>layer.name() === shapeData.name)){\r\n\r\n\r\n                      const matchLayer = layersAry.find(layer =>layer.getChildren()[0].name() === shapeData.name);\r\n\r\n                      if(shapeData.hasOwnProperty(\"absolutePositionLine\")){\r\n                        matchLayer.add(line);\r\n                      }else if(shapeData.hasOwnProperty(\"absolutePositionRect\")){\r\n                        matchLayer.add(rect);\r\n                      }else if(shapeData.hasOwnProperty(\"absolutePositionShape\")){\r\n                        matchLayer.add(shape);\r\n                      };  \r\n\r\n\r\n                    }else{\r\n\r\n                  \r\n                     layersAry.push(new Konva.Layer({\r\n                      name: shapeData.name,\r\n                      draggable: true,\r\n                     }));\r\n\r\n                     if(shapeData.hasOwnProperty(\"absolutePositionLine\")){\r\n                      layersAry[layersAry.length-1].add(line);\r\n                    }else if(shapeData.hasOwnProperty(\"absolutePositionRect\")){\r\n                      layersAry[layersAry.length-1].add(rect);\r\n                    }else if(shapeData.hasOwnProperty(\"absolutePositionShape\")){\r\n                      layersAry[layersAry.length-1].add(shape);\r\n                    };  \r\n\r\n                    }\r\n\r\n                   }\r\n                   }\r\n              \r\n              // 他の図形タイプに対する処理も同様に追加可能\r\n            });\r\n\r\n            console.log(newLayer1);\r\n            console.log(newLayer2);\r\n            console.log(newLayer1.getChildren());\r\n            console.log(newLayer2.getChildren());\r\n\r\n\r\n            stage2.add(newLayer1); // 新しいレイヤーを stage2 に追加\r\n            stage2.add(newLayer2);\r\n            layersAry.forEach(layer =>{stage2.add(layer)});\r\n            \r\n        \r\n            stage2.draw();\r\n\r\n            \r\n \r\n\r\n          \r\n  \r\n            // 描画が完了した後の処理を行う\r\n            newLayer1.on('draw', function () {\r\n              console.log('レイヤーの描画が完了しました。');\r\n             \r\n            });\r\n            newLayer2.on('draw', function () {\r\n              console.log('レイヤーの描画が完了しました。');\r\n             \r\n            });\r\n          });\r\n\r\n          const errorElement = document.querySelector(\".home-form-error\");\r\n          if (errorElement && errorElement.textContent !== \"\") {\r\n              errorElement.textContent = \"\";\r\n          }  \r\n    \r\n        })\r\n\r\n        .catch(error => {\r\n            console.error('Error:', error);\r\n        });\r\n\r\n        document.querySelector(\".home-compbtn\").style.display = 'none';\r\n        overWrite.style.display = 'block';\r\n        document.querySelector(\".home-form\").value = homeFormValue;\r\n\r\n        overWrite.addEventListener(\"click\", function(){\r\n        \r\n  \r\n        fetch('/delete-data4', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({homeFormValue}),\r\n        })\r\n          .then(response => {\r\n            if (!response.ok) {\r\n              throw new Error('Network response was not ok');\r\n            }\r\n            return response.json();\r\n          })\r\n          .then(data => {\r\n            console.log('Server response:', data);\r\n            // サーバーからのレスポンスを処理\r\n          })\r\n          .catch(error => {\r\n            console.error('Error:', error);\r\n            // エラー処理\r\n          });\r\n\r\n          homeList.removeChild(liElement);\r\n\r\n         // photoListから該当するhomeFormValueのliを探し、削除\r\n          Array.from(photoList.children).forEach(photoLi => {\r\n            if (photoLi.firstChild.textContent.trim() === homeFormValue) {\r\n              photoList.removeChild(photoLi);\r\n            }\r\n          });\r\n  \r\n\r\n          const homeForm = document.querySelector('.home-form');\r\n          const homeFormValue2 = homeForm.value;\r\n          const ul = document.querySelector(\".home-addlist\");\r\n      \r\n      \r\n          if( homeFormValue2 === \"\"){\r\n            const homeFormError = document.createElement(\"p\");\r\n            homeFormError.classList.add(\"home-form-error\");\r\n            document.querySelector(\".homecenter-outer\").append(homeFormError);\r\n            document.querySelector(\".home-form-error\").textContent = \"※配置図名を入力してください※\";\r\n          } else if(homeFormValue2.length >= 6){\r\n           const homeFormError = document.createElement(\"p\");\r\n           homeFormError.classList.add(\"home-form-error\");\r\n           document.querySelector(\".homecenter-outer\").append(homeFormError);\r\n           document.querySelector(\".home-form-error\").textContent = \"※５文字以内で指定してください※\";\r\n          } else {\r\n      \r\n            const sourceLayers = stage2.getLayers(); // すべてのレイヤーの配列を取得\r\n      \r\n            console.log(stage2.getLayers());\r\n      \r\n      \r\n            const layerData = {\r\n              layers: [],  // レイヤーの情報を格納する配列\r\n            };\r\n            \r\n            sourceLayers.forEach(layer => {\r\n              const layerInfo = {\r\n                name: homeFormValue2,  // レイヤーの名前を取得\r\n                children: [],      // 子要素の情報を格納する配列\r\n              };\r\n\r\n\r\n      \r\n              function getShapeType(shape) {\r\n                if (shape instanceof Konva.Rect) {\r\n                  return \"Rect\";\r\n                } else if (shape instanceof Konva.Line) {\r\n                  return \"Line\";\r\n                } else if (shape instanceof Konva.Shape) {\r\n                  return \"Shape\";\r\n                } \r\n              };\r\n              \r\n              layer.getChildren().forEach(shape => {\r\n\r\n\r\n                const shapeType = getShapeType(shape);\r\n                if (shapeType === \"Rect\") {\r\n                const rectData = {\r\n                  type: shape.getType(),   // シェイプの種類（Rect、Circle など）\r\n                  x: shape.x(),\r\n                  y: shape.y(),\r\n                  width: shape.width(),\r\n                  height: shape.height(),\r\n                  fill: shape.fill(),    \r\n                  name: shape.name(),\r\n                  absolutePositionRect: shape.getAbsolutePosition(),\r\n                };\r\n      \r\n                layerInfo.children.push(rectData); // 子要素の情報を配列に追加\r\n              }\r\n      \r\n              if (shapeType === \"Line\") {\r\n                const lineData = {\r\n                  type: shape.getType(),   // シェイプの種類（Rect、Circle など）\r\n                  points: shape.points(),\r\n                  stroke: shape.stroke(), // 線の色\r\n                  strokeWidth: shape.strokeWidth(), // 線の太さ\r\n                  closed: shape.closed(), // 閉じた形状として描画\r\n                  fill: shape.fill(),    \r\n                  name: shape.name(),\r\n                  absolutePositionLine: shape.getAbsolutePosition(),\r\n                };\r\n                layerInfo.children.push(lineData); // 子要素の情報を配列に追加\r\n              }\r\n      \r\n      \r\n      \r\n      \r\n              if (shapeType === \"Shape\") {\r\n                const shapeData = {\r\n                  type: shape.getType(),\r\n                  name: shape.name(),\r\n                  clear: shape.clear,\r\n                  clearLine1 : shape.clearLine1,\r\n                  clearLine2 : shape.clearLine2,\r\n                  clearLine3 : shape.clearLine3,\r\n                  absolutePositionShape: shape.getAbsolutePosition(),\r\n                };\r\n                layerInfo.children.push(shapeData);\r\n              }\r\n      \r\n              console.log(shape.clear);\r\n                \r\n                \r\n              });\r\n            \r\n              layerData.layers.push(layerInfo); // レイヤーの情報を配列に追加\r\n            });\r\n\r\n\r\n      \r\n            \r\n            \r\n      \r\n      \r\n      const newData = {\r\n        homeFormValue: homeFormValue2,\r\n        layerData: layerData,\r\n      };\r\n      \r\n        // /user-data の fetch 処理\r\n      fetch('/user-data9', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(newData),\r\n      })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        console.log('Server response:', data);\r\n        // サーバーからのレスポンスを処理\r\n      })\r\n      .catch(error => {\r\n        console.error('Error:', error);\r\n        // エラー処理\r\n      });\r\n      \r\n\r\n      \r\n      fetch('/get-new-data10')\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        const list = document.createElement(\"li\");\r\n        list.classList.add(\"add-list\");\r\n        list.append(homeFormValue2);\r\n        const editBtn = document.createElement(\"button\");\r\n        editBtn.append(\"編集\");\r\n        editBtn.classList.add(\"editBtn2\");\r\n        const cancelBtn = document.createElement(\"button\");\r\n        cancelBtn.append(\"取消\");\r\n        cancelBtn.classList.add(\"cancelBtn2\");\r\n        const deleteBtn = document.createElement(\"button\");\r\n        const trash = document.createElement(\"i\");\r\n        trash.classList.add(\"fa-solid\")\r\n        trash.classList.add(\"fa-trash-can\")\r\n        deleteBtn.append(trash);\r\n        deleteBtn.classList.add(\"deleteBtn2\");\r\n        const btnBox = document.createElement(\"div\");\r\n        btnBox.classList.add(\"btn-box\");\r\n        btnBox.append(editBtn,cancelBtn,deleteBtn);\r\n        list.append(btnBox);\r\n        document.querySelector('.home-addlist').append(list);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error getting new data:', error);\r\n        // エラー処理\r\n      });\r\n\r\n      \r\n      fetch('/get-new-data11')\r\n      .then(response => {\r\n        if (!response.ok) {\r\n           throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        const list = document.createElement(\"li\");\r\n        list.classList.add(\"add-list4\");\r\n        list.append(homeFormValue2);\r\n        const addBtn = document.createElement(\"button\");\r\n        addBtn.append(\"表示\");\r\n        addBtn.classList.add(\"addBtn2\");\r\n        const cancelBtn = document.createElement(\"button\");\r\n        cancelBtn.append(\"取消\");\r\n        cancelBtn.classList.add(\"cancelBtn3\");\r\n        const btnBox = document.createElement(\"div\");\r\n        btnBox.classList.add(\"btn-box\");\r\n        btnBox.append(addBtn,cancelBtn);\r\n        list.append(btnBox);\r\n        document.querySelector('.photo-addlist').append(list);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error getting new data:', error);\r\n      // エラー処理\r\n     });\r\n      \r\n      \r\n      \r\n      const errorElement = document.querySelector(\".home-form-error\");\r\n      if (errorElement && errorElement.textContent !== \"\") {\r\n          errorElement.textContent = \"\";\r\n      }  \r\n      \r\n         }\r\n\r\n          const layerToRemove = stage2.find(node => node.name() === homeFormValue)[0];\r\n\r\n          if(stage2.getLayers().length !== 0 && layerToRemove instanceof Konva.Layer){\r\n            const deleteLayers = stage2.getLayers().slice();\r\n            deleteLayers.forEach(deleteLayer => {\r\n                deleteLayer.destroy();\r\n            });\r\n          }\r\n\r\n          overWrite.style.display = 'none';\r\n          document.querySelector(\".home-compbtn\").style.display = 'block';\r\n          document.querySelector(\".home-form\").value = \"\";\r\n\r\n\r\n        });\r\n\r\n      } else {\r\n        const homeFormError = document.createElement(\"p\");\r\n         homeFormError.classList.add(\"home-form-error\");\r\n         document.querySelector(\".homecenter-outer\").append(homeFormError);\r\n         document.querySelector(\".home-form-error\").textContent = \"※既に配置図が追加されています。新たな配置図を編集する場合は追加済みの配置図を取消してください※\";\r\n      }\r\n\r\n\r\n      } else if (event.target.classList.contains(\"cancelBtn2\")) {\r\n        // 削除ボタンをクリックした場合の処理\r\n        const liElement = event.target.closest(\"li\");\r\n        const homeFormValue = liElement.firstChild.textContent.trim();\r\n\r\n    \r\n        // 削除対象のレイヤーを特定\r\n        const layerToRemove = stage2.find(node => node.name() === homeFormValue)[0];\r\n\r\n        console.log('homeFormValue:', homeFormValue);\r\n        console.log('すべてのステージの子要素:', stage2.children);\r\n        console.log('削除するレイヤー:', layerToRemove);\r\n        console.log(\"layerToRemoveの名前:\",layerToRemove.name());\r\n        \r\n        if (layerToRemove instanceof Konva.Layer) {\r\n          layerToRemove.destroy();\r\n          const deleteLayers = stage2.getLayers().slice();\r\n          deleteLayers.forEach(deleteLayer => {\r\n            if (deleteLayer instanceof Konva.Layer) {\r\n              deleteLayer.destroy();\r\n            }\r\n          });\r\n\r\n\r\n          const errorElement = document.querySelector(\".home-form-error\");\r\n          if (errorElement && errorElement.textContent !== \"\") {\r\n              errorElement.textContent = \"\";\r\n          }  \r\n        } else {\r\n          console.log('対象のレイヤーが見つかりませんでした。');\r\n        }\r\n\r\n        overWrite.style.display = 'none';\r\n\r\n        document.querySelector(\".home-compbtn\").style.display = 'block';\r\n\r\n        document.querySelector(\".home-form\").value = \"\";\r\n\r\n\r\n      }\r\n  });\r\n\r\n \r\n\r\n\r\n  homeList.addEventListener(\"click\", event => {\r\n    if (event.target.classList.contains(\"deleteBtn2\")||event.target.classList.contains(\"fa-trash-can\")) {\r\n\r\n      const liElement = event.target.closest(\"li\");\r\n      const homeFormValue = liElement.firstChild.textContent.trim();\r\n\r\n\r\n       if (liElement && homeList.contains(liElement)) {\r\n        // 存在する場合、liElement を削除\r\n        homeList.removeChild(liElement);\r\n\r\n        // photoListから該当するhomeFormValueのliを探し、削除\r\n        Array.from(photoList.children).forEach(photoLi => {\r\n        if (photoLi.firstChild.textContent.trim() === homeFormValue) {\r\n          photoList.removeChild(photoLi);\r\n        }\r\n      });\r\n\r\n      const layerToRemove = stage2.find(node => node.name() === homeFormValue)[0];\r\n\r\n        if(stage2.getLayers().length !== 0 && layerToRemove instanceof Konva.Layer){\r\n          const deleteLayers = stage2.getLayers().slice();\r\n          deleteLayers.forEach(deleteLayer => {\r\n              deleteLayer.destroy();\r\n          });\r\n        }\r\n      }\r\n\r\n      fetch('/delete-data3', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({homeFormValue}),\r\n      })\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          console.log('Server response:', data);\r\n          // サーバーからのレスポンスを処理\r\n        })\r\n        .catch(error => {\r\n          console.error('Error:', error);\r\n          // エラー処理\r\n        });\r\n\r\n        overWrite.style.display = 'none';\r\n\r\n        document.querySelector(\".home-compbtn\").style.display = 'block';\r\n\r\n        document.querySelector(\".home-form\").value = \"\";\r\n\r\n      };\r\n  \r\n      \r\n  });\r\n \r\n\r\n  const photoTab = document.querySelector('[data-target=\"content-photo\"]');\r\n  const photoList = document.querySelector(\".photo-addlist\");\r\n\r\n  photoTab.addEventListener(\"click\",function(){\r\n\r\n  const photocenterInner = document.querySelector('.photocenter-inner');    \r\n  console.log(photocenterInner.offsetWidth, photocenterInner.offsetHeight);\r\n  const stage3 = new Konva.Stage({\r\n    container: photocenterInner,\r\n    width: photocenterInner.offsetWidth,\r\n    height: photocenterInner.offsetHeight,\r\n  });\r\n  console.log(stage3.width(), stage3.height());\r\n\r\n\r\n\r\n  photoList.addEventListener(\"click\", event => {\r\n    if (event.target.classList.contains(\"addBtn2\")) {\r\n      if (stage3.getChildren().length === 0) {\r\n\r\n        \r\n\r\n      const liElement = event.target.closest(\"li\");\r\n      const homeFormValue = liElement.firstChild.textContent.trim();\r\n      const requestData = {\r\n          homeFormValue: homeFormValue\r\n      };\r\n        \r\n        fetch('/get-layer-data4', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(requestData)\r\n        })\r\n        .then(response => response.json())\r\n        .then(layerData => {\r\n        \r\n          // レイヤーごとに新しい Layer を作成\r\n          layerData.layerData.layers.forEach(layerInfo => {\r\n            const newLayer = new Konva.Layer({\r\n              name: layerInfo.name, \r\n          });\r\n            \r\n            layerInfo.children.forEach(shapeData => {\r\n                // shapeData から必要な情報を取得して図形を作成\r\n                const rect = new Konva.Rect({\r\n                  x: (photocenterInner.offsetWidth - shapeData.width) / 2, \r\n                  y: (photocenterInner.offsetHeight - shapeData.height) / 2,\r\n                  width: shapeData.width,\r\n                  height: shapeData.height,\r\n                  fill: shapeData.fill,\r\n                  // その他の必要なプロパティを設定\r\n                });\r\n\r\n                if (shapeData.absolutePositionRect) {\r\n                  rect.setAbsolutePosition(shapeData.absolutePositionRect);\r\n                }\r\n\r\n                const line = new Konva.Line({\r\n                  points: shapeData.points,\r\n                  stroke: shapeData.stroke, \r\n                  strokeWidth: shapeData.strokeWidth, \r\n                  closed: shapeData.closed,\r\n                  fill: shapeData.fill,\r\n                  // その他の必要なプロパティを設定\r\n                });\r\n\r\n                if (shapeData.absolutePositionLine) {\r\n                  line.setAbsolutePosition(shapeData.absolutePositionLine);\r\n                }\r\n\r\n                const shape = new Konva.Shape({\r\n                  sceneFunc: function (context, shape) {\r\n                      if (shapeData.clear) {\r\n                        context.clearRect(...shapeData.clear);\r\n                      }\r\n                      if (shapeData.clearLine1||shapeData.clearLine2||shapeData.clearLine3){\r\n                        context.beginPath();\r\n                        context.moveTo(...shapeData.clearLine1);\r\n                        context.lineTo(...shapeData.clearLine2);\r\n                        context.lineTo(...shapeData.clearLine3);\r\n                        context.closePath();\r\n                    \r\n                        // 三角形のパスをクリアする\r\n                        context.globalCompositeOperation = 'destination-out';\r\n                        context.fill();\r\n                        context.globalCompositeOperation = 'source-over';\r\n                      }\r\n                  },\r\n                });\r\n\r\n                if (shapeData.absolutePositionShape) {\r\n                  shape.setAbsolutePosition(shapeData.absolutePositionShape);\r\n                }\r\n                \r\n\r\n                console.log(rect);\r\n                newLayer.add(line);\r\n                newLayer.add(rect);\r\n                newLayer.add(shape);\r\n                newLayer.draw();\r\n              \r\n              // 他の図形タイプに対する処理も同様に追加可能\r\n            });\r\n\r\n            \r\n            stage3.add(newLayer); // 新しいレイヤーを stage3 に追加\r\n\r\n            stage3.draw();\r\n        \r\n  \r\n            // 描画が完了した後の処理を行う\r\n            newLayer.on('draw', function () {\r\n              console.log('レイヤーの描画が完了しました。');\r\n             \r\n            });\r\n          });\r\n\r\n          const errorElement = document.querySelector(\".photo-form-error\");\r\n          if (errorElement && errorElement.textContent !== \"\") {\r\n              errorElement.textContent = \"\";\r\n          }  \r\n    \r\n        })\r\n\r\n        .catch(error => {\r\n            console.error('Error:', error);\r\n        });\r\n\r\n      } else {\r\n        const photoFormError = document.createElement(\"p\");\r\n         photoFormError.classList.add(\"photo-form-error\");\r\n         document.querySelector(\".photocenter-outer\").append(photoFormError);\r\n         document.querySelector(\".photo-form-error\").textContent = \"※既に配置図が表示されています。新たな配置図を表示する場合は表示済みの配置図を取消してください※\";\r\n      }\r\n        \r\n      } else if (event.target.classList.contains(\"cancelBtn3\")) {\r\n        // 削除ボタンをクリックした場合の処理\r\n        const liElement = event.target.closest(\"li\");\r\n        const homeFormValue = liElement.firstChild.textContent.trim();\r\n\r\n    \r\n        // 削除対象のレイヤーを特定\r\n        const layerToRemove = stage3.find(node => node.name() === homeFormValue)[0];\r\n\r\n        console.log('homeFormValue:', homeFormValue);\r\n        console.log('すべてのステージの子要素:', stage3.children);\r\n        console.log('削除するレイヤー:', layerToRemove);\r\n        console.log(\"layerToRemoveの名前:\",layerToRemove.name());\r\n        \r\n        if (layerToRemove instanceof Konva.Layer) {\r\n          layerToRemove.destroy();\r\n          const deleteLayers = stage3.getLayers().slice();\r\n          deleteLayers.forEach(deleteLayer => {\r\n            if (deleteLayer instanceof Konva.Layer) {\r\n              deleteLayer.destroy();\r\n            }\r\n          });\r\n\r\n  \r\n\r\n          const errorElement = document.querySelector(\".photo-form-error\");\r\n          if (errorElement && errorElement.textContent !== \"\") {\r\n              errorElement.textContent = \"\";\r\n          }  \r\n        } else {\r\n          console.log('対象のレイヤーが見つかりませんでした。');\r\n        }\r\n\r\n      }\r\n  });\r\n\r\n});\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./Public/App/src/index.js");
/******/ 	
/******/ })()
;