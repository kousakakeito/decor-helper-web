/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./Public/App/src/SpaceCreateModule.js":
/*!*********************************************!*\
  !*** ./Public/App/src/SpaceCreateModule.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function spaceCreate(){\r\n\r\n // 破線の間隔と破線の長さを設定\r\nconst dashInterval = 10;\r\nconst dashLength = 5;\r\nconst dashColor = 'red';\r\n\r\n// 2つの丸い点の間に破線（実線）を描画する関数\r\nfunction drawDashedLine(startX, startY, endX, endY) {\r\n  const dashedLine = new Konva.Line({\r\n    points: [startX, startY, endX, endY],\r\n    stroke: dashColor,\r\n    strokeWidth: 2,\r\n    dash: [dashLength, dashInterval],\r\n  });\r\n\r\n  return dashedLine;\r\n}\r\n\r\n\r\n\r\n\r\nconst spacecenterInner = document.querySelector('.spacecenter-inner');\r\nlet layer; // レイヤーをグローバル変数として定義\r\n\r\n\r\n\r\n// マウスの座標が図形の上辺、左辺、下辺、右辺のいずれかに乗っているかを判定する関数\r\nfunction isMouseOnBorder(rectangle, x, y) {\r\n  const borderSize = 5; // ボーダーと判定する幅\r\n  const outline = rectangle.getClientRect();\r\n  const centerX = outline.x + outline.width / 2;\r\n  const centerY = outline.y + outline.height / 2;\r\n\r\n  // 上辺の判定\r\n  if (x >= outline.x && x <= outline.x + outline.width &&\r\n      y >= outline.y - borderSize && y <= outline.y + borderSize) {\r\n    return 'top';\r\n  }\r\n  // 左辺の判定\r\n  if (x >= outline.x - borderSize && x <= outline.x + borderSize &&\r\n      y >= outline.y && y <= outline.y + outline.height) {\r\n    return 'left';\r\n  }\r\n  // 下辺の判定\r\n  if (x >= outline.x && x <= outline.x + outline.width &&\r\n      y >= outline.y + outline.height - borderSize && y <= outline.y + outline.height + borderSize) {\r\n    return 'bottom';\r\n  }\r\n  // 右辺の判定\r\n  if (x >= outline.x + outline.width - borderSize && x <= outline.x + outline.width + borderSize &&\r\n      y >= outline.y && y <= outline.y + outline.height) {\r\n    return 'right';\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n      // 丸い点を格納する配列\r\n      const dots = [];\r\n      let dashedLine = null; // 破線を格納する変数\r\n      let isDashedLineVisible = false; // 破線の表示状態\r\n      \r\n      // 破線の真ん中に四角を格納する変数\r\n      let midRect = null;\r\n\r\n  dots.length = 0 ;\r\n\r\n\r\n  const stage = new Konva.Stage({\r\n    container: spacecenterInner,\r\n    width: spacecenterInner.offsetWidth,\r\n    height: spacecenterInner.offsetHeight,\r\n  });\r\n  \r\n  \r\n  layer = new Konva.Layer(); // グローバル変数を使うために、constをletに変更\r\n  stage.add(layer)\r\n  \r\n  let widthValue = 0;\r\n  let heightValue = 0;\r\n  \r\n  // 図形を作成\r\n  const rectangle = new Konva.Rect({\r\n    x: (spacecenterInner.offsetWidth - widthValue) / 2, // spacecenterInnerの中央に配置\r\n    y: (spacecenterInner.offsetHeight - heightValue) / 2, // spacecenterInnerの中央に配置\r\n    width: widthValue, // 適宜調整\r\n    height: heightValue, // 適宜調整\r\n    fill: 'blue', // 適宜調整\r\n    draggable: false,\r\n  });\r\n  \r\n  layer.add(rectangle);\r\n  layer.draw();\r\n  \r\n\r\n  const rectAngleSizeForm1 = document.createElement('input');\r\n  rectAngleSizeForm1.type = \"text\";\r\n  rectAngleSizeForm1.classList.add(\"rectAngle-SizeForm1\");\r\n  rectAngleSizeForm1.placeholder = \"お部屋の横幅をcm単位で入力\";\r\n  const rectAngleSizeForm2 = document.createElement('input');\r\n  rectAngleSizeForm2.type = \"text\";\r\n  rectAngleSizeForm2.classList.add(\"rectAngle-SizeForm2\");\r\n  rectAngleSizeForm2.placeholder = \"お部屋の縦幅をcm単位で入力\";\r\n  const rectAngleConfirm = document.createElement('button');\r\n  rectAngleConfirm.classList.add(\"rectAngle-confirm\");\r\n  rectAngleConfirm.append(\"決定\");\r\n  const div2 = document.createElement(\"div\");\r\n  div2.classList.add(\"div2\");\r\n  const div1 = document.createElement(\"div\");\r\n  div1.classList.add(\"div1\");\r\n\r\n  div2.append(rectAngleSizeForm1,rectAngleSizeForm2,rectAngleConfirm);\r\n  div1.append(div2);\r\n  spacecenterInner.append(div1);\r\n\r\n  \r\n  \r\n  document.querySelector(\".rectAngle-confirm\").addEventListener(\"click\",handleConfirm);\r\n  \r\n  function handleConfirm(){\r\n\r\n    const size1 =document.querySelector(\".rectAngle-SizeForm1\").value;\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm2\").value;\r\n    const sizeY = Number.parseFloat(size1);\r\n    const sizeX = Number.parseFloat(size2);\r\n    const size1Num = sizeY /1.06;\r\n    const size2Num = sizeX /1.06;\r\n    console.log(size1Num)\r\n\r\n    if(Number.isNaN(size1Num) && Number.isNaN(size2Num)){\r\n     const sizeFormError = document.createElement(\"p\");\r\n     sizeFormError.classList.add(\"size-form-error\");\r\n     div2.append(sizeFormError);\r\n     document.querySelector(\".size-form-error\").textContent = \"※数値のみ入力してください※\";\r\n\r\n    } else{\r\n\r\n    widthValue = size1Num;\r\n    heightValue = size2Num;\r\n\r\n    rectangle.setAttrs({\r\n      x: (spacecenterInner.offsetWidth - widthValue) / 2, // spacecenterInnerの中央に配置\r\n      y: (spacecenterInner.offsetHeight - heightValue) / 2, // spacecenterInnerの中央に配置\r\n      width: widthValue,\r\n      height: heightValue,\r\n    });\r\n    \r\n    // レイヤーを再描画\r\n    layer.batchDraw();\r\n\r\n\r\n    const  handleClick  = __webpack_require__(/*! src/SpaceSquareClickModule */ \"./Public/App/src/SpaceSquareClickModule.js\");\r\n\r\n    const handleClick2 = () =>{\r\n\r\n     handleClick(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2)\r\n\r\n    };\r\n\r\n    stage.on(\"click\",handleClick2);\r\n\r\n    document.querySelector(\".rectAngle-confirm\").removeEventListener(\"click\",handleConfirm);\r\n\r\n    while (document.querySelector(\".div1\").lastChild) {\r\n      document.querySelector(\".div1\").removeChild(document.querySelector(\".div1\").lastChild);\r\n    }\r\n\r\n    document.querySelector(\".div1\").parentNode.removeChild(document.querySelector(\".div1\"));\r\n\r\n\r\n\r\n  \r\n   \r\n    }\r\n  \r\n\r\n  };\r\n\r\n};\r\n\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceCreateModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceRightCheckTriangleModule.js":
/*!*********************************************************!*\
  !*** ./Public/App/src/SpaceRightCheckTriangleModule.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = function rightCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11){\r\n\r\n\r\n  const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n  const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n  const size4Y = Number.parseFloat(size4);\r\n  const size5Y = Number.parseFloat(size5);\r\n  const size4Num = size4Y /1.06;\r\n  const size5Num = size5Y /1.06;\r\n  \r\n\r\n  if(size4 !== \"\" && size5 === \"\"){\r\n\r\n    //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n    if(Number.isNaN(size4Num)){\r\n      const sizeFormError5 = document.createElement(\"p\");\r\n      sizeFormError5.classList.add(\"size-form-error5\");\r\n      div22.append(sizeFormError5);\r\n      document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n    dashedLine6.destroy();\r\n\r\n    // 上に移動させる距離を指定\r\n    const offsetY = -size4Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n      document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n     }\r\n\r\n     document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n     function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: 'blue', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'blue', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      \r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n       document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",handleConfirm12);\r\n     \r\n     function handleConfirm12(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } else {\r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: 'blue', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'blue', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        \r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n        }\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } else {\r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: 'blue', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'blue', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        dots.length = 0 ;\r\n        stage.on(\"click\",handleClick2);\r\n        document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n          document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n\r\n       };\r\n       };\r\n\r\n     };\r\n\r\n\r\n    };\r\n  }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n    //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n     if(Number.isNaN(size5Num)){\r\n      const sizeFormError6 = document.createElement(\"p\");\r\n      sizeFormError6.classList.add(\"size-form-error6\");\r\n      div22.append(sizeFormError6);\r\n      document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n     } else {\r\n\r\n     dashedLine6.destroy();\r\n\r\n    // 下に移動させる距離を指定\r\n    const offsetY = size5Num;\r\n\r\n    // 現在の midRect の座標を取得\r\n    const currentX = newRect.x();\r\n    const currentY = newRect.y();\r\n\r\n    const circleX1 = newCircle.x();\r\n    const circleY1 = newCircle.y();\r\n\r\n    const circleX2 = circle2.x();\r\n    const circleY2 = circle2.y();\r\n\r\n    // 新しい座標を計算して設定\r\n    const newX = currentX;\r\n    const newY = currentY + offsetY;\r\n\r\n    // midRect の座標を更新\r\n    newRect.position({ x: newX, y: newY });\r\n\r\n    // 四角の真ん中の座標を計算\r\n    const midRectX1 = newRect.x() + newRect.width() / 2;\r\n    const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n    dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n    dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n    layer.add(dashedLine7);\r\n    layer.add(dashedLine8);\r\n\r\n    // レイヤーを再描画\r\n    layer.draw();\r\n\r\n\r\n     const rectAngleSizeForm30 = document.createElement('input');\r\n     rectAngleSizeForm30.type = \"text\";\r\n     rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n     rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleSizeForm31 = document.createElement('input');\r\n     rectAngleSizeForm31.type = \"text\";\r\n     rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n     rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n\r\n     const rectAngleConfirm12 = document.createElement('button');\r\n     rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n     rectAngleConfirm12.append(\"決定\");\r\n\r\n     const rectAngleConfirm13 = document.createElement('button');\r\n     rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n     rectAngleConfirm13.append(\"完了\");\r\n\r\n     const div24 = document.createElement(\"div\");\r\n     div24.classList.add(\"div24\");\r\n\r\n     const div23 = document.createElement(\"div\");\r\n     div23.classList.add(\"div23\");\r\n\r\n     const note14 = document.createElement(\"p\");\r\n     note14.classList.add(\"note14\");\r\n\r\n     div24.append(note14);\r\n     div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n\r\n     div23.append(div24);\r\n     spacecenterInner.append(div23);\r\n\r\n     document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n     document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",handleConfirm13);\r\n     document.querySelector(\".rectAngle-confirm12\").removeEventListener(\"click\",handleConfirm12);\r\n\r\n     while (document.querySelector(\".div21\").lastChild) {\r\n       document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n      }\r\n\r\n       document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n     \r\n     function handleConfirm13(){\r\n\r\n      const polygon = new Konva.Line({\r\n        points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n      layer.add(polygon);\r\n\r\n      circle2.destroy();\r\n      newRect.destroy();\r\n      newCircle.destroy();\r\n\r\n      dots.length = 0 ;\r\n      stage.on(\"click\",handleClick2);\r\n      document.querySelector(\".rectAngle-confirm13\").removeEventListener(\"click\",handleConfirm13);\r\n\r\n      while (document.querySelector(\".div23\").lastChild) {\r\n        document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n       }\r\n\r\n\r\n        document.querySelector(\".div23\").parentNode.removeChild(document.querySelector(\".div23\"));\r\n\r\n     };\r\n\r\n     document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",function(){\r\n\r\n      \r\n       const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n       const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n       const size6Y = Number.parseFloat(size6);\r\n       const size7Y = Number.parseFloat(size7);\r\n       const size6Num = size6Y /1.06;\r\n       const size7Num = size7Y /1.06;\r\n\r\n       if(size6 !== \"\" && size7 === \"\"){\r\n\r\n        if(Number.isNaN(size6Num)){\r\n          const sizeFormError8 = document.createElement(\"p\");\r\n          sizeFormError8.classList.add(\"size-form-error8\");\r\n          div24.append(sizeFormError8);\r\n          document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n         } \r\n  \r\n         const offsetX = size6Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX + offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: 'white', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'white', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n\r\n       } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n        if(Number.isNaN(size7Num)){\r\n          const sizeFormError9 = document.createElement(\"p\");\r\n          sizeFormError9.classList.add(\"size-form-error9\");\r\n          div24.append(sizeFormError9);\r\n          document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n         } \r\n\r\n         const offsetX = size7Num;\r\n         const currentX = newRect.x();\r\n         const currentY = newRect.y();\r\n         const newX = currentX - offsetX;\r\n         const newY = currentY;\r\n\r\n         newRect.position({ x: newX, y: newY });\r\n\r\n         layer.draw();\r\n\r\n         dashedLine7.destroy();\r\n         dashedLine8.destroy();\r\n\r\n         const circleX1A = newCircle.x();\r\n         const circleY1A = newCircle.y();\r\n\r\n         const circleX2A = circle2.x();\r\n         const circleY2A = circle2.y();\r\n\r\n         // 四角の真ん中の座標を計算\r\n         const midRectX1A = newRect.x() + newRect.width() / 2;\r\n         const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n         const polygon = new Konva.Line({\r\n          points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n          stroke: 'white', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'white', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n        newCircle.destroy();\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n\r\n        while (document.querySelector(\".div23\").lastChild) {\r\n          document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n         }\r\n\r\n\r\n\r\n       };\r\n\r\n     });\r\n    };\r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceRightCheckTriangleModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceRightLengthModule.js":
/*!**************************************************!*\
  !*** ./Public/App/src/SpaceRightLengthModule.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function rightLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3){\r\n\r\n  if(Number.isNaN(size2Num)){\r\n\r\n    const sizeFormError3 = document.createElement(\"p\");\r\n    sizeFormError3.classList.add(\"size-form-error3\");\r\n    div6.append(sizeFormError3);\r\n    document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n   } else {\r\n     console.log(\"A\");\r\n\r\n\r\n  // 長さを格納する変数\r\n  let length2 = size2Num; \r\n\r\n  circle1.destroy();\r\n  midRect.destroy();\r\n  dashedLine5.destroy();\r\n\r\n  // 図形の上辺の右端から指定した距離の位置を計算して新しい右の丸い点のX座標を設定\r\n  const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n\r\n  // 右の丸い点の座標を更新\r\n  circle2.x(newRightCircleX);\r\n  layer.draw();\r\n\r\n  \r\n    // 丸い点の座標を取得\r\n    const x = circle2.x();\r\n    const y = circle2.y();\r\n\r\n    // 破線を作成\r\n    const dashedLine6 = new Konva.Line({\r\n      points: [x, y, x - length, y], // 例としてX座標から100ピクセル右に破線を表示\r\n      stroke: 'red',\r\n      strokeWidth: 2,\r\n      lineCap: 'round',\r\n      dash: [5, 10],\r\n    });\r\n\r\n    // 新しい丸い点を作成\r\n    const newCircle = new Konva.Circle({\r\n      x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n      y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n      radius: 5,\r\n      fill: 'red',\r\n    });\r\n\r\n    const x2 = newCircle.x();\r\n    const y2 = newCircle.y();\r\n\r\n    const newRectX = (x + x2) / 2;\r\n    const newRectY = (y + y2) / 2;\r\n    const newRect = new Konva.Rect({\r\n      x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n      y: newRectY - 5,\r\n      width: 10,\r\n      height: 10,\r\n      fill: 'red',\r\n    });\r\n\r\n    layer.add(dashedLine6);\r\n    layer.add(newCircle); \r\n    layer.add(newRect);\r\n    layer.draw();\r\n\r\n  \r\n\r\n const paturnText = document.createElement('p');\r\n paturnText.classList.add(\"paturn-text\");\r\n\r\n const check1 = document.createElement('input');\r\n check1.type = \"checkbox\";\r\n check1.classList.add(\"check1\");\r\n check1.name = \"check\";\r\n\r\n const check2 = document.createElement('input');\r\n check2.type = \"checkbox\";\r\n check2.classList.add(\"check2\");\r\n check2.name = \"check\";\r\n\r\n const paturn1 = document.createElement('img');\r\n paturn1.src = \"/images/paturn1.png\";\r\n paturn1.classList.add(\"paturn1\");\r\n\r\n const paturn2 = document.createElement('img');\r\n paturn2.src = \"/images/paturn2.png\";\r\n paturn2.classList.add(\"paturn2\");\r\n\r\n const rectAngleSizeForm28 = document.createElement('input');\r\n rectAngleSizeForm28.type = \"text\";\r\n rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n rectAngleSizeForm28.placeholder = \"上方向に伸ばす長さを入力\";\r\n\r\n const rectAngleSizeForm29 = document.createElement('input');\r\n rectAngleSizeForm29.type = \"text\";\r\n rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n rectAngleSizeForm29.placeholder = \"下方向に縮める長さを入力\";\r\n\r\n const rectAngleConfirm11 = document.createElement('button');\r\n rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n rectAngleConfirm11.append(\"決定\");\r\n\r\n const div22 = document.createElement(\"div\");\r\n div22.classList.add(\"div22\");\r\n\r\n const div21 = document.createElement(\"div\");\r\n div21.classList.add(\"div21\");\r\n\r\n const note13 = document.createElement(\"p\");\r\n note13.classList.add(\"note13\");\r\n\r\n div22.append(note13);\r\n div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n div21.append(div22);\r\n spacecenterInner.append(div21);\r\n\r\n\r\n\r\n document.querySelector(\".note13\").textContent = \"上方向または下方向のどちらかを入力してください\";\r\n document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n const check = document.querySelectorAll(\"[name=check\");\r\n for(let i = 0; i < 2; i++){\r\n   check[i].addEventListener(\"click\",function(){\r\n     const currentItem = this;\r\n     if(currentItem.checked){\r\n       check[0].checked = false;\r\n       check[1].checked = false;\r\n       currentItem.checked = true;\r\n     };\r\n   });\r\n };\r\n\r\n document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",handleConfirm11);\r\n\r\n document.querySelector(\".rectAngle-confirm3\").removeEventListener(\"click\",handleConfirm3);\r\n\r\n\r\n\r\n while (document.querySelector(\".div5\").lastChild) {\r\n   document.querySelector(\".div5\").removeChild(document.querySelector(\".div5\").lastChild);\r\n   console.log(\"while\");\r\n  }\r\n\r\n  document.querySelector(\".div5\").parentNode.removeChild(document.querySelector(\".div5\"));\r\n\r\n\r\n\r\n\r\n \r\n function handleConfirm11(){\r\n   \r\n\r\n   if(check[0].checked){\r\n\r\n    const  rightCheckTriangle  = __webpack_require__(/*! src/SpaceRightCheckTriangleModule */ \"./Public/App/src/SpaceRightCheckTriangleModule.js\");\r\n    const rightCheckTriangle2 = () =>{\r\n\r\n      rightCheckTriangle(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3,check,dashedLine6,newCircle,newRect,handleConfirm11)\r\n\r\n    };\r\n\r\n    rightCheckTriangle2();\r\n\r\n\r\n   }else if(check[1].checked){\r\n\r\n     const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n     const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n     const size4Y = Number.parseFloat(size4);\r\n     const size5Y = Number.parseFloat(size5);\r\n     const size4Num = size4Y /1.06;\r\n     const size5Num = size5Y /1.06;\r\n     \r\n\r\n     if(size4 !== \"\" && size5 === \"\"){\r\n\r\n       //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n       \r\n\r\n       if(Number.isNaN(size4Num)){\r\n         const sizeFormError5 = document.createElement(\"p\");\r\n         sizeFormError5.classList.add(\"size-form-error5\");\r\n         div22.append(sizeFormError5);\r\n         document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n        } else {\r\n\r\n       dashedLine6.destroy();\r\n\r\n       // 上に移動させる距離を指定\r\n       const offsetY = -size4Num;\r\n\r\n       // 現在の midRect の座標を取得\r\n       const currentX = newRect.x();\r\n       const currentY = newRect.y();\r\n\r\n       const circleX1 = newCircle.x();\r\n       const circleY1 = newCircle.y();\r\n\r\n       const circleX2 = circle2.x();\r\n       const circleY2 = circle2.y();\r\n\r\n       // 新しい座標を計算して設定\r\n       const newX = currentX;\r\n       const newY = currentY + offsetY;\r\n\r\n       // midRect の座標を更新\r\n       newRect.position({ x: newX, y: newY });\r\n\r\n       //丸い点と四角が垂直に交わる座標\r\n       const intersectionX1 = newCircle.x(); \r\n       const intersectionY1 = newRect.y()+5;\r\n\r\n       //もう一方の丸い点と四角が垂直に交わる座標\r\n       const intersectionX2 = circle2.x(); \r\n       const intersectionY2 = newRect.y()+5;\r\n\r\n       // 四角の真ん中の座標を計算\r\n       const midRectX1 = newRect.x() + newRect.width() / 2;\r\n       const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n       const polygon = new Konva.Line({\r\n         points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n         stroke: 'blue', // 線の色\r\n         strokeWidth: 2, // 線の太さ\r\n         closed: true, // 閉じた形状として描画\r\n         fill: 'blue', // 塗りつぶし色（透明）\r\n       });\r\n       \r\n       layer.add(polygon);\r\n\r\n       // レイヤーを再描画\r\n       layer.draw();\r\n\r\n       circle2.destroy();\r\n       newRect.destroy();\r\n       newCircle.destroy();\r\n       \r\n\r\n\r\n        \r\n        \r\n\r\n     \r\n        dots.length = 0 ;\r\n\r\n        document.querySelector(\".rectAngle-confirm11\").removeEventListener(\"click\",handleConfirm11); \r\n        stage.off(\"click\",handleClick2);\r\n\r\n        stage.on(\"click\",handleClick2);\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n         document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         console.log(\"while2\");\r\n        };\r\n\r\n        document.querySelector(\".div21\").parentNode.removeChild(document.querySelector(\".div21\"));\r\n\r\n\r\n     \r\n       \r\n\r\n        \r\n\r\n       };\r\n\r\n\r\n     }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n       //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n        if(Number.isNaN(size5Num)){\r\n         const sizeFormError6 = document.createElement(\"p\");\r\n         sizeFormError6.classList.add(\"size-form-error6\");\r\n         div22.append(sizeFormError6);\r\n         document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n        } \r\n\r\n       dashedLine6.destroy();\r\n\r\n       // 上に移動させる距離を指定\r\n       const offsetY = size5Num;\r\n\r\n       // 現在の midRect の座標を取得\r\n       const currentX = newRect.x();\r\n       const currentY = newRect.y();\r\n\r\n       const circleX1 = newCircle.x();\r\n       const circleY1 = newCircle.y();\r\n\r\n       const circleX2 = circle2.x();\r\n       const circleY2 = circle2.y();\r\n\r\n       // 新しい座標を計算して設定\r\n       const newX = currentX;\r\n       const newY = currentY + offsetY;\r\n\r\n       // midRect の座標を更新\r\n       newRect.position({ x: newX, y: newY });\r\n\r\n       //丸い点と四角が垂直に交わる座標\r\n       const intersectionX1 = newCircle.x(); \r\n       const intersectionY1 = newRect.y()+5;\r\n\r\n       //もう一方の丸い点と四角が垂直に交わる座標\r\n       const intersectionX2 = circle2.x(); \r\n       const intersectionY2 = newRect.y()+5;\r\n\r\n       // 四角の真ん中の座標を計算\r\n       const midRectX1 = newRect.x() + newRect.width() / 2;\r\n       const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n       const polygon = new Konva.Line({\r\n         points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n         stroke: 'white', // 線の色\r\n         strokeWidth: 2, // 線の太さ\r\n         closed: true, // 閉じた形状として描画\r\n         fill: 'white', // 塗りつぶし色（透明）\r\n       });\r\n       \r\n       layer.add(polygon);\r\n\r\n       // レイヤーを再描画\r\n       layer.draw();\r\n\r\n       circle2.destroy();\r\n       newRect.destroy();\r\n       newCircle.destroy();\r\n\r\n       while (document.querySelector(\".div21\").lastChild) {\r\n         document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n        }\r\n\r\n     };\r\n\r\n\r\n\r\n   }else{\r\n\r\n     const sizeFormError7 = document.createElement(\"p\");\r\n     sizeFormError7.classList.add(\"size-form-error7\");\r\n     div22.append(sizeFormError7);\r\n     document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n   }\r\n  \r\n };\r\n\r\n\r\n\r\n};\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceRightLengthModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceSideTwoPointsModule.js":
/*!****************************************************!*\
  !*** ./Public/App/src/SpaceSideTwoPointsModule.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function sideTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2){\r\n  stage.off(\"click\",handleClick2);\r\n        \r\n        \r\n\r\n  const rectAngleSizeForm3 = document.createElement('input');\r\n  rectAngleSizeForm3.type = \"text\";\r\n  rectAngleSizeForm3.classList.add(\"rectAngle-SizeForm3\");\r\n  rectAngleSizeForm3.placeholder = \"対象箇所の長さをcm単位で入力\";\r\n\r\n  const rectAngleConfirm2 = document.createElement('button');\r\n  rectAngleConfirm2.classList.add(\"rectAngle-confirm2\");\r\n  rectAngleConfirm2.append(\"決定\");\r\n  const div4 = document.createElement(\"div\");\r\n  div4.classList.add(\"div4\");\r\n  const div3 = document.createElement(\"div\");\r\n  div3.classList.add(\"div3\");\r\n\r\n  div4.append(rectAngleSizeForm3,rectAngleConfirm2);\r\n  div3.append(div4);\r\n  spacecenterInner.append(div3);\r\n\r\n\r\n  document.querySelector(\".rectAngle-confirm2\").addEventListener(\"click\",handleConfirm2);\r\n  function handleConfirm2(){\r\n\r\n\r\n\r\n    const size1 =document.querySelector(\".rectAngle-SizeForm3\").value;\r\n    const sizeY = Number.parseFloat(size1);\r\n    const size1Num = sizeY /1.06;\r\n    console.log(size1Num)\r\n    \r\n    \r\n\r\n    if(Number.isNaN(size1Num)){\r\n     const sizeFormError2 = document.createElement(\"p\");\r\n     sizeFormError2.classList.add(\"size-form-error2\");\r\n     div4.append(sizeFormError2);\r\n     document.querySelector(\".size-form-error2\").textContent = \"※数値のみ入力してください※\";\r\n\r\n    } else {\r\n\r\n\r\n   // 長さを格納する変数\r\n   let length = size1Num; \r\n   \r\n   dots[0].destroy();\r\n   dots[1].destroy();\r\n   dashedLine.destroy();\r\n  \r\n\r\n  if( midRect.y() <= rectangle.y()){\r\n   \r\n    const  topTwoPoints  = __webpack_require__(/*! src/SpaceTopTwoPointsModule */ \"./Public/App/src/SpaceTopTwoPointsModule.js\");\r\n    const topTwoPoints2 = () =>{\r\n\r\n      topTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length)\r\n\r\n    };\r\n\r\n    topTwoPoints2();\r\n\r\n} else if( midRect.x() + midRect.width() >= rectangle.x() + rectangle.width()){\r\n\r\n  const rectAngleSizeForm6 = document.createElement('input');\r\n  rectAngleSizeForm6.type = \"text\";\r\n  rectAngleSizeForm6.classList.add(\"rectAngle-SizeForm6\");\r\n  rectAngleSizeForm6.placeholder = \"上端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm7 = document.createElement('input');\r\n  rectAngleSizeForm7.type = \"text\";\r\n  rectAngleSizeForm7.classList.add(\"rectAngle-SizeForm7\");\r\n  rectAngleSizeForm7.placeholder = \"下端からの長さを入力\";\r\n\r\n  const rectAngleConfirm4 = document.createElement('button');\r\n  rectAngleConfirm4.classList.add(\"rectAngle-confirm4\");\r\n  rectAngleConfirm4.append(\"決定\");\r\n\r\n  const div8 = document.createElement(\"div\");\r\n  div8.classList.add(\"div8\");\r\n\r\n  const div7 = document.createElement(\"div\");\r\n  div7.classList.add(\"div7\");\r\n\r\n  const note2 = document.createElement(\"p\");\r\n  note2.classList.add(\"note2\");\r\n\r\n  div8.append(note2);\r\n  div8.append(rectAngleSizeForm6,rectAngleSizeForm7,rectAngleConfirm4);\r\n\r\n  div7.append(div8);\r\n  spacecenterInner.append(div7);\r\n  \r\n  document.querySelector(\".note2\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n\r\n   // 四角の中心座標を取得\r\n  const midRectX = midRect.x() + midRect.width() / 2;\r\n  const midRectY = midRect.y() + midRect.height() / 2;\r\n\r\n   // 縦破線を描画する座標を計算\r\n   const dashedLineX1 = midRectX;\r\n   const dashedLineY1 = midRectY - length / 2;\r\n   const dashedLineX2 = midRectX;\r\n   const dashedLineY2 = midRectY + length / 2;\r\n\r\n  // 破線を作成\r\n  const dashedLine5 = new Konva.Line({\r\n    points: [dashedLineX1, dashedLineY1, dashedLineX2, dashedLineY2],\r\n    stroke: 'red',\r\n    strokeWidth: 2,\r\n    dash: [5, 10], // 破線のパターンを指定（length変数の値を使用）\r\n  });\r\n\r\n  // 丸い点を作成\r\n  const circle1 = new Konva.Circle({\r\n    x: dashedLineX1,\r\n    y: dashedLineY1,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  const circle2 = new Konva.Circle({\r\n    x: dashedLineX2,\r\n    y: dashedLineY2,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  // レイヤーに追加\r\n  const layer = new Konva.Layer();\r\n  layer.add(dashedLine5, circle1, circle2, midRect);\r\n  stage.add(layer);\r\n\r\n  document.querySelector(\".rectAngle-confirm4\").addEventListener(\"click\",function(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm6\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm7\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    \r\n    \r\n    if(size2 !== \"\" && size3 === \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    }\r\n      console.log(\"A\");\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num; \r\n\r\n   circle1.destroy();\r\n   midRect.destroy();\r\n   dashedLine5.destroy();\r\n\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.y() + length2;\r\n\r\n   // 右の丸い点の座標を更新\r\n   circle2.y(newRightCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x = circle2.x();\r\n     const y = circle2.y();\r\n\r\n     // 破線を作成\r\n     const dashedLine6 = new Konva.Line({\r\n       points: [x, y, x , y + length], // 例としてX座標から100ピクセル右に破線を表示\r\n       stroke: 'red',\r\n       strokeWidth: 2,\r\n       lineCap: 'round',\r\n       dash: [5, 10],\r\n     });\r\n\r\n     // 新しい丸い点を作成\r\n     const newCircle = new Konva.Circle({\r\n       x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n       y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n       radius: 5,\r\n       fill: 'red',\r\n     });\r\n\r\n     const x2 = newCircle.x();\r\n     const y2 = newCircle.y();\r\n\r\n     const newRectX = (x + x2) / 2;\r\n     const newRectY = (y + y2) / 2;\r\n     const newRect = new Konva.Rect({\r\n       x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n       y: newRectY - 5,\r\n       width: 10,\r\n       height: 10,\r\n       fill: 'red',\r\n     });\r\n\r\n     layer.add(dashedLine6);\r\n     layer.add(newCircle); \r\n     layer.add(newRect);\r\n     layer.draw();\r\n  \r\n\r\n   while (document.querySelector(\".div7\").lastChild) {\r\n    document.querySelector(\".div7\").removeChild(document.querySelector(\".div7\").lastChild);\r\n   }\r\n\r\n  const paturnText = document.createElement('p');\r\n  paturnText.classList.add(\"paturn-text\");\r\n\r\n  const check1 = document.createElement('input');\r\n  check1.type = \"checkbox\";\r\n  check1.classList.add(\"check1\");\r\n  check1.name = \"check\";\r\n\r\n  const check2 = document.createElement('input');\r\n  check2.type = \"checkbox\";\r\n  check2.classList.add(\"check2\");\r\n  check2.name = \"check\";\r\n\r\n  const paturn1 = document.createElement('img');\r\n  paturn1.src = \"/images/paturn1.png\";\r\n  paturn1.classList.add(\"paturn1\");\r\n\r\n  const paturn2 = document.createElement('img');\r\n  paturn2.src = \"/images/paturn2.png\";\r\n  paturn2.classList.add(\"paturn2\");\r\n\r\n  const rectAngleSizeForm28 = document.createElement('input');\r\n  rectAngleSizeForm28.type = \"text\";\r\n  rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n  rectAngleSizeForm28.placeholder = \"右方向に伸ばす長さを入力\";\r\n\r\n  const rectAngleSizeForm29 = document.createElement('input');\r\n  rectAngleSizeForm29.type = \"text\";\r\n  rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n  rectAngleSizeForm29.placeholder = \"左方向に縮める長さを入力\";\r\n\r\n  const rectAngleConfirm11 = document.createElement('button');\r\n  rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n  rectAngleConfirm11.append(\"決定\");\r\n\r\n  const div22 = document.createElement(\"div\");\r\n  div22.classList.add(\"div22\");\r\n\r\n  const div21 = document.createElement(\"div\");\r\n  div21.classList.add(\"div21\");\r\n\r\n  const note13 = document.createElement(\"p\");\r\n  note13.classList.add(\"note13\");\r\n\r\n  div22.append(note13);\r\n  div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n  div21.append(div22);\r\n  spacecenterInner.append(div21);\r\n\r\n  document.querySelector(\".note13\").textContent = \"右方向または左方向のどちらかを入力してください\";\r\n  document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n  const check = document.querySelectorAll(\"[name=check\");\r\n  for(let i = 0; i < 2; i++){\r\n    check[i].addEventListener(\"click\",function(){\r\n      const currentItem = this;\r\n      if(currentItem.checked){\r\n        check[0].checked = false;\r\n        check[1].checked = false;\r\n        currentItem.checked = true;\r\n      };\r\n    });\r\n  };\r\n\r\n  document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",function(){\r\n\r\n    if(check[0].checked){\r\n\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      \r\n\r\n      if(size4 !== \"\" && size5 === \"\"){\r\n\r\n        //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n        if(Number.isNaN(size4Num)){\r\n          const sizeFormError5 = document.createElement(\"p\");\r\n          sizeFormError5.classList.add(\"size-form-error5\");\r\n          div22.append(sizeFormError5);\r\n          document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n         }\r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 右に移動させる距離を指定\r\n        const offsetX = size4Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle2.x();\r\n        const circleY2 = circle2.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n        dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n        layer.add(dashedLine7);\r\n        layer.add(dashedLine8);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n         const rectAngleSizeForm30 = document.createElement('input');\r\n         rectAngleSizeForm30.type = \"text\";\r\n         rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n         rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n \r\n         const rectAngleSizeForm31 = document.createElement('input');\r\n         rectAngleSizeForm31.type = \"text\";\r\n         rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n         rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n   \r\n         const rectAngleConfirm12 = document.createElement('button');\r\n         rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n         rectAngleConfirm12.append(\"決定\");\r\n\r\n         const rectAngleConfirm13 = document.createElement('button');\r\n         rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n         rectAngleConfirm13.append(\"完了\");\r\n \r\n         const div24 = document.createElement(\"div\");\r\n         div24.classList.add(\"div24\");\r\n \r\n         const div23 = document.createElement(\"div\");\r\n         div23.classList.add(\"div23\");\r\n \r\n         const note14 = document.createElement(\"p\");\r\n         note14.classList.add(\"note14\");\r\n \r\n         div24.append(note14);\r\n         div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n \r\n         div23.append(div24);\r\n         spacecenterInner.append(div23);\r\n \r\n         document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n         document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",function(){\r\n\r\n          const polygon = new Konva.Line({\r\n            points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n            stroke: 'blue', // 線の色\r\n            strokeWidth: 2, // 線の太さ\r\n            closed: true, // 閉じた形状として描画\r\n            fill: 'blue', // 塗りつぶし色（透明）\r\n          });\r\n          \r\n          layer.add(polygon);\r\n\r\n          circle2.destroy();\r\n          newRect.destroy();\r\n          newCircle.destroy();\r\n\r\n          while (document.querySelector(\".div23\").lastChild) {\r\n            document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n           }\r\n\r\n         });\r\n\r\n         document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",function(){\r\n\r\n          \r\n           const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n           const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n           const size6Y = Number.parseFloat(size6);\r\n           const size7Y = Number.parseFloat(size7);\r\n           const size6Num = size6Y /1.06;\r\n           const size7Num = size7Y /1.06;\r\n\r\n           if(size6 !== \"\" && size7 === \"\"){\r\n\r\n            if(Number.isNaN(size6Num)){\r\n              const sizeFormError8 = document.createElement(\"p\");\r\n              sizeFormError8.classList.add(\"size-form-error8\");\r\n              div24.append(sizeFormError8);\r\n              document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n      \r\n             const offsetX = -size6Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle2.x();\r\n             const circleY2A = circle2.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'blue', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'blue', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle2.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n            if(Number.isNaN(size7Num)){\r\n              const sizeFormError9 = document.createElement(\"p\");\r\n              sizeFormError9.classList.add(\"size-form-error9\");\r\n              div24.append(sizeFormError9);\r\n              document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n\r\n             const offsetX = size7Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle2.x();\r\n             const circleY2A = circle2.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'blue', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'blue', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle2.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           };\r\n\r\n         });\r\n\r\n\r\n\r\n      }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n        //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n         if(Number.isNaN(size5Num)){\r\n          const sizeFormError6 = document.createElement(\"p\");\r\n          sizeFormError6.classList.add(\"size-form-error6\");\r\n          div22.append(sizeFormError6);\r\n          document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n         };\r\n\r\n         dashedLine6.destroy();\r\n\r\n        // 左に移動させる距離を指定\r\n        const offsetX = -size5Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle2.x();\r\n        const circleY2 = circle2.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n        dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n        layer.add(dashedLine7);\r\n        layer.add(dashedLine8);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n         const rectAngleSizeForm30 = document.createElement('input');\r\n         rectAngleSizeForm30.type = \"text\";\r\n         rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n         rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n \r\n         const rectAngleSizeForm31 = document.createElement('input');\r\n         rectAngleSizeForm31.type = \"text\";\r\n         rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n         rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n   \r\n         const rectAngleConfirm12 = document.createElement('button');\r\n         rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n         rectAngleConfirm12.append(\"決定\");\r\n\r\n         const rectAngleConfirm13 = document.createElement('button');\r\n         rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n         rectAngleConfirm13.append(\"完了\");\r\n \r\n         const div24 = document.createElement(\"div\");\r\n         div24.classList.add(\"div24\");\r\n \r\n         const div23 = document.createElement(\"div\");\r\n         div23.classList.add(\"div23\");\r\n \r\n         const note14 = document.createElement(\"p\");\r\n         note14.classList.add(\"note14\");\r\n \r\n         div24.append(note14);\r\n         div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n \r\n         div23.append(div24);\r\n         spacecenterInner.append(div23);\r\n \r\n         document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n         document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",function(){\r\n\r\n          const polygon = new Konva.Line({\r\n            points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n            stroke: 'white', // 線の色\r\n            strokeWidth: 2, // 線の太さ\r\n            closed: true, // 閉じた形状として描画\r\n            fill: 'white', // 塗りつぶし色（透明）\r\n          });\r\n          \r\n          layer.add(polygon);\r\n\r\n          circle2.destroy();\r\n          newRect.destroy();\r\n          newCircle.destroy();\r\n\r\n          while (document.querySelector(\".div23\").lastChild) {\r\n            document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n           }\r\n\r\n         });\r\n\r\n         document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",function(){\r\n\r\n          \r\n           const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n           const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n           const size6Y = Number.parseFloat(size6);\r\n           const size7Y = Number.parseFloat(size7);\r\n           const size6Num = size6Y /1.06;\r\n           const size7Num = size7Y /1.06;\r\n\r\n           if(size6 !== \"\" && size7 === \"\"){\r\n\r\n            if(Number.isNaN(size6Num)){\r\n              const sizeFormError8 = document.createElement(\"p\");\r\n              sizeFormError8.classList.add(\"size-form-error8\");\r\n              div24.append(sizeFormError8);\r\n              document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n      \r\n             const offsetX = -size6Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle2.x();\r\n             const circleY2A = circle2.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'white', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'white', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle2.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n            if(Number.isNaN(size7Num)){\r\n              const sizeFormError9 = document.createElement(\"p\");\r\n              sizeFormError9.classList.add(\"size-form-error9\");\r\n              div24.append(sizeFormError9);\r\n              document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n\r\n             const offsetX = size7Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle2.x();\r\n             const circleY2A = circle2.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'white', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'white', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle2.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           };\r\n\r\n         });\r\n\r\n      };\r\n\r\n\r\n\r\n    }else if(check[1].checked){\r\n\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      \r\n\r\n      if(size4 !== \"\" && size5 === \"\"){\r\n\r\n        //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n        if(Number.isNaN(size4Num)){\r\n          const sizeFormError5 = document.createElement(\"p\");\r\n          sizeFormError5.classList.add(\"size-form-error5\");\r\n          div22.append(sizeFormError5);\r\n          document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n         }\r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 右に移動させる距離を指定\r\n        const offsetX = size4Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle2.x();\r\n        const circleY2 = circle2.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        //丸い点と四角が垂直に交わる座標\r\n        const intersectionY1 = newCircle.y(); \r\n        const intersectionX1 = newRect.x()+5;\r\n\r\n        //もう一方の丸い点と四角が垂直に交わる座標\r\n        const intersectionY2 = circle2.y(); \r\n        const intersectionX2 = newRect.x()+5;\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        const polygon = new Konva.Line({\r\n          points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n          stroke: 'blue', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'blue', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n        newCircle.destroy();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n\r\n\r\n      }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n        //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n         if(Number.isNaN(size5Num)){\r\n          const sizeFormError6 = document.createElement(\"p\");\r\n          sizeFormError6.classList.add(\"size-form-error6\");\r\n          div22.append(sizeFormError6);\r\n          document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n         } \r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 左に移動させる距離を指定\r\n        const offsetX = -size5Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle2.x();\r\n        const circleY2 = circle2.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        //丸い点と四角が垂直に交わる座標\r\n        const intersectionY1 = newCircle.y(); \r\n        const intersectionX1 = newRect.x()+5;\r\n\r\n        //もう一方の丸い点と四角が垂直に交わる座標\r\n        const intersectionY2 = circle2.y(); \r\n        const intersectionX2 = newRect.x()+5;\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        const polygon = new Konva.Line({\r\n          points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n          stroke: 'white', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'white', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n        newCircle.destroy();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n      };\r\n\r\n\r\n\r\n    }else{\r\n\r\n      const sizeFormError7 = document.createElement(\"p\");\r\n      sizeFormError7.classList.add(\"size-form-error7\");\r\n      div22.append(sizeFormError7);\r\n      document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n    }\r\n\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n    } else if(size3 !== \"\" && size2 === \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";\r\n       } \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num; \r\n\r\n   circle2.destroy();\r\n   midRect.destroy();\r\n   dashedLine5.destroy();\r\n\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.y() + rectangle.height() - length2;\r\n\r\n   // 右の丸い点の座標を更新\r\n   circle1.y(newRightCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x = circle1.x();\r\n     const y = circle1.y();\r\n\r\n     // 破線を作成\r\n     const dashedLine6 = new Konva.Line({\r\n       points: [x, y, x , y - length], // 例としてX座標から100ピクセル右に破線を表示\r\n       stroke: 'red',\r\n       strokeWidth: 2,\r\n       lineCap: 'round',\r\n       dash: [5, 10],\r\n     });\r\n\r\n     // 新しい丸い点を作成\r\n     const newCircle = new Konva.Circle({\r\n       x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n       y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n       radius: 5,\r\n       fill: 'red',\r\n     });\r\n\r\n     const x2 = newCircle.x();\r\n     const y2 = newCircle.y();\r\n\r\n     const newRectX = (x + x2) / 2;\r\n     const newRectY = (y + y2) / 2;\r\n     const newRect = new Konva.Rect({\r\n       x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n       y: newRectY - 5,\r\n       width: 10,\r\n       height: 10,\r\n       fill: 'red',\r\n     });\r\n\r\n     layer.add(dashedLine6);\r\n     layer.add(newCircle); \r\n     layer.add(newRect);\r\n     layer.draw();\r\n  \r\n\r\n   while (document.querySelector(\".div7\").lastChild) {\r\n    document.querySelector(\".div7\").removeChild(document.querySelector(\".div7\").lastChild);\r\n   }\r\n\r\n  const paturnText = document.createElement('p');\r\n  paturnText.classList.add(\"paturn-text\");\r\n\r\n  const check1 = document.createElement('input');\r\n  check1.type = \"checkbox\";\r\n  check1.classList.add(\"check1\");\r\n  check1.name = \"check\";\r\n\r\n  const check2 = document.createElement('input');\r\n  check2.type = \"checkbox\";\r\n  check2.classList.add(\"check2\");\r\n  check2.name = \"check\";\r\n\r\n  const paturn1 = document.createElement('img');\r\n  paturn1.src = \"/images/paturn1.png\";\r\n  paturn1.classList.add(\"paturn1\");\r\n\r\n  const paturn2 = document.createElement('img');\r\n  paturn2.src = \"/images/paturn2.png\";\r\n  paturn2.classList.add(\"paturn2\");\r\n\r\n  const rectAngleSizeForm28 = document.createElement('input');\r\n  rectAngleSizeForm28.type = \"text\";\r\n  rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n  rectAngleSizeForm28.placeholder = \"右方向に伸ばす長さを入力\";\r\n\r\n  const rectAngleSizeForm29 = document.createElement('input');\r\n  rectAngleSizeForm29.type = \"text\";\r\n  rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n  rectAngleSizeForm29.placeholder = \"左方向に縮める長さを入力\";\r\n\r\n  const rectAngleConfirm11 = document.createElement('button');\r\n  rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n  rectAngleConfirm11.append(\"決定\");\r\n\r\n  const div22 = document.createElement(\"div\");\r\n  div22.classList.add(\"div22\");\r\n\r\n  const div21 = document.createElement(\"div\");\r\n  div21.classList.add(\"div21\");\r\n\r\n  const note13 = document.createElement(\"p\");\r\n  note13.classList.add(\"note13\");\r\n\r\n  div22.append(note13);\r\n  div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n  div21.append(div22);\r\n  spacecenterInner.append(div21);\r\n\r\n  document.querySelector(\".note13\").textContent = \"右方向または左方向のどちらかを入力してください\";\r\n  document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n  const check = document.querySelectorAll(\"[name=check\");\r\n  for(let i = 0; i < 2; i++){\r\n    check[i].addEventListener(\"click\",function(){\r\n      const currentItem = this;\r\n      if(currentItem.checked){\r\n        check[0].checked = false;\r\n        check[1].checked = false;\r\n        currentItem.checked = true;\r\n      };\r\n    });\r\n  };\r\n\r\n  document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",function(){\r\n\r\n    if(check[0].checked){\r\n\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      \r\n\r\n      if(size4 !== \"\" && size5 === \"\"){\r\n\r\n        //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n        if(Number.isNaN(size4Num)){\r\n          const sizeFormError5 = document.createElement(\"p\");\r\n          sizeFormError5.classList.add(\"size-form-error5\");\r\n          div22.append(sizeFormError5);\r\n          document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n         }\r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 右に移動させる距離を指定\r\n        const offsetX = size4Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n        dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n        layer.add(dashedLine7);\r\n        layer.add(dashedLine8);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n         const rectAngleSizeForm30 = document.createElement('input');\r\n         rectAngleSizeForm30.type = \"text\";\r\n         rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n         rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n \r\n         const rectAngleSizeForm31 = document.createElement('input');\r\n         rectAngleSizeForm31.type = \"text\";\r\n         rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n         rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n   \r\n         const rectAngleConfirm12 = document.createElement('button');\r\n         rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n         rectAngleConfirm12.append(\"決定\");\r\n\r\n         const rectAngleConfirm13 = document.createElement('button');\r\n         rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n         rectAngleConfirm13.append(\"完了\");\r\n \r\n         const div24 = document.createElement(\"div\");\r\n         div24.classList.add(\"div24\");\r\n \r\n         const div23 = document.createElement(\"div\");\r\n         div23.classList.add(\"div23\");\r\n \r\n         const note14 = document.createElement(\"p\");\r\n         note14.classList.add(\"note14\");\r\n \r\n         div24.append(note14);\r\n         div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n \r\n         div23.append(div24);\r\n         spacecenterInner.append(div23);\r\n \r\n         document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n         document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",function(){\r\n\r\n          const polygon = new Konva.Line({\r\n            points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n            stroke: 'blue', // 線の色\r\n            strokeWidth: 2, // 線の太さ\r\n            closed: true, // 閉じた形状として描画\r\n            fill: 'blue', // 塗りつぶし色（透明）\r\n          });\r\n          \r\n          layer.add(polygon);\r\n\r\n          circle1.destroy();\r\n          newRect.destroy();\r\n          newCircle.destroy();\r\n\r\n          while (document.querySelector(\".div23\").lastChild) {\r\n            document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n           }\r\n\r\n         });\r\n\r\n         document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",function(){\r\n\r\n          \r\n           const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n           const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n           const size6Y = Number.parseFloat(size6);\r\n           const size7Y = Number.parseFloat(size7);\r\n           const size6Num = size6Y /1.06;\r\n           const size7Num = size7Y /1.06;\r\n\r\n           if(size6 !== \"\" && size7 === \"\"){\r\n\r\n            if(Number.isNaN(size6Num)){\r\n              const sizeFormError8 = document.createElement(\"p\");\r\n              sizeFormError8.classList.add(\"size-form-error8\");\r\n              div24.append(sizeFormError8);\r\n              document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n      \r\n             const offsetX = -size6Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'blue', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'blue', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n            if(Number.isNaN(size7Num)){\r\n              const sizeFormError9 = document.createElement(\"p\");\r\n              sizeFormError9.classList.add(\"size-form-error9\");\r\n              div24.append(sizeFormError9);\r\n              document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n\r\n             const offsetX = size7Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'blue', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'blue', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           };\r\n\r\n         });\r\n\r\n\r\n\r\n      }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n        //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n         if(Number.isNaN(size5Num)){\r\n          const sizeFormError6 = document.createElement(\"p\");\r\n          sizeFormError6.classList.add(\"size-form-error6\");\r\n          div22.append(sizeFormError6);\r\n          document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n         };\r\n\r\n         dashedLine6.destroy();\r\n\r\n        // 左に移動させる距離を指定\r\n        const offsetX = -size5Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n        dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n        layer.add(dashedLine7);\r\n        layer.add(dashedLine8);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n         const rectAngleSizeForm30 = document.createElement('input');\r\n         rectAngleSizeForm30.type = \"text\";\r\n         rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n         rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n \r\n         const rectAngleSizeForm31 = document.createElement('input');\r\n         rectAngleSizeForm31.type = \"text\";\r\n         rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n         rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n   \r\n         const rectAngleConfirm12 = document.createElement('button');\r\n         rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n         rectAngleConfirm12.append(\"決定\");\r\n\r\n         const rectAngleConfirm13 = document.createElement('button');\r\n         rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n         rectAngleConfirm13.append(\"完了\");\r\n \r\n         const div24 = document.createElement(\"div\");\r\n         div24.classList.add(\"div24\");\r\n \r\n         const div23 = document.createElement(\"div\");\r\n         div23.classList.add(\"div23\");\r\n \r\n         const note14 = document.createElement(\"p\");\r\n         note14.classList.add(\"note14\");\r\n \r\n         div24.append(note14);\r\n         div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n \r\n         div23.append(div24);\r\n         spacecenterInner.append(div23);\r\n \r\n         document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n         document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",function(){\r\n\r\n          const polygon = new Konva.Line({\r\n            points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n            stroke: 'white', // 線の色\r\n            strokeWidth: 2, // 線の太さ\r\n            closed: true, // 閉じた形状として描画\r\n            fill: 'white', // 塗りつぶし色（透明）\r\n          });\r\n          \r\n          layer.add(polygon);\r\n\r\n          circle1.destroy();\r\n          newRect.destroy();\r\n          newCircle.destroy();\r\n\r\n          while (document.querySelector(\".div23\").lastChild) {\r\n            document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n           }\r\n\r\n         });\r\n\r\n         document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",function(){\r\n\r\n          \r\n           const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n           const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n           const size6Y = Number.parseFloat(size6);\r\n           const size7Y = Number.parseFloat(size7);\r\n           const size6Num = size6Y /1.06;\r\n           const size7Num = size7Y /1.06;\r\n\r\n           if(size6 !== \"\" && size7 === \"\"){\r\n\r\n            if(Number.isNaN(size6Num)){\r\n              const sizeFormError8 = document.createElement(\"p\");\r\n              sizeFormError8.classList.add(\"size-form-error8\");\r\n              div24.append(sizeFormError8);\r\n              document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n      \r\n             const offsetX = -size6Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'white', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'white', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n            if(Number.isNaN(size7Num)){\r\n              const sizeFormError9 = document.createElement(\"p\");\r\n              sizeFormError9.classList.add(\"size-form-error9\");\r\n              div24.append(sizeFormError9);\r\n              document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n\r\n             const offsetX = size7Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'white', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'white', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           };\r\n\r\n         });\r\n\r\n      };\r\n\r\n\r\n\r\n    }else if(check[1].checked){\r\n\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      \r\n\r\n      if(size4 !== \"\" && size5 === \"\"){\r\n\r\n        //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n        if(Number.isNaN(size4Num)){\r\n          const sizeFormError5 = document.createElement(\"p\");\r\n          sizeFormError5.classList.add(\"size-form-error5\");\r\n          div22.append(sizeFormError5);\r\n          document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n         }\r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 右に移動させる距離を指定\r\n        const offsetX = size4Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        //丸い点と四角が垂直に交わる座標\r\n        const intersectionY1 = newCircle.y(); \r\n        const intersectionX1 = newRect.x()+5;\r\n\r\n        //もう一方の丸い点と四角が垂直に交わる座標\r\n        const intersectionY2 = circle1.y(); \r\n        const intersectionX2 = newRect.x()+5;\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        const polygon = new Konva.Line({\r\n          points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n          stroke: 'blue', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'blue', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n        newCircle.destroy();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n\r\n\r\n      }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n        //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n         if(Number.isNaN(size5Num)){\r\n          const sizeFormError6 = document.createElement(\"p\");\r\n          sizeFormError6.classList.add(\"size-form-error6\");\r\n          div22.append(sizeFormError6);\r\n          document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n         } \r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 左に移動させる距離を指定\r\n        const offsetX = -size5Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        //丸い点と四角が垂直に交わる座標\r\n        const intersectionY1 = newCircle.y(); \r\n        const intersectionX1 = newRect.x()+5;\r\n\r\n        //もう一方の丸い点と四角が垂直に交わる座標\r\n        const intersectionY2 = circle1.y(); \r\n        const intersectionX2 = newRect.x()+5;\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        const polygon = new Konva.Line({\r\n          points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n          stroke: 'white', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'white', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n        newCircle.destroy();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n      };\r\n\r\n\r\n\r\n    }else{\r\n\r\n      const sizeFormError7 = document.createElement(\"p\");\r\n      sizeFormError7.classList.add(\"size-form-error7\");\r\n      div22.append(sizeFormError7);\r\n      document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n    }\r\n\r\n  });\r\n\r\n    };  \r\n\r\n  });\r\n\r\n} else if( midRect.x() <= rectangle.x()){\r\n\r\n  const rectAngleSizeForm8 = document.createElement('input');\r\n  rectAngleSizeForm8.type = \"text\";\r\n  rectAngleSizeForm8.classList.add(\"rectAngle-SizeForm8\");\r\n  rectAngleSizeForm8.placeholder = \"上端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm9 = document.createElement('input');\r\n  rectAngleSizeForm9.type = \"text\";\r\n  rectAngleSizeForm9.classList.add(\"rectAngle-SizeForm9\");\r\n  rectAngleSizeForm9.placeholder = \"下端からの長さを入力\";\r\n\r\n  const rectAngleConfirm5 = document.createElement('button');\r\n  rectAngleConfirm5.classList.add(\"rectAngle-confirm5\");\r\n  rectAngleConfirm5.append(\"決定\");\r\n\r\n  const div10 = document.createElement(\"div\");\r\n  div10.classList.add(\"div10\");\r\n\r\n  const div9 = document.createElement(\"div\");\r\n  div9.classList.add(\"div9\");\r\n\r\n  const note3 = document.createElement(\"p\");\r\n  note3.classList.add(\"note3\");\r\n\r\n  div10.append(note3);\r\n  div10.append(rectAngleSizeForm8,rectAngleSizeForm9,rectAngleConfirm5);\r\n\r\n  div9.append(div10);\r\n  spacecenterInner.append(div9);\r\n\r\n  document.querySelector(\".note3\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n\r\n  // 四角の中心座標を取得\r\n  const midRectX = midRect.x() + midRect.width() / 2;\r\n  const midRectY = midRect.y() + midRect.height() / 2;\r\n\r\n   // 縦破線を描画する座標を計算\r\n   const dashedLineX1 = midRectX;\r\n   const dashedLineY1 = midRectY - length / 2;\r\n   const dashedLineX2 = midRectX;\r\n   const dashedLineY2 = midRectY + length / 2;\r\n\r\n  // 破線を作成\r\n  const dashedLine5 = new Konva.Line({\r\n    points: [dashedLineX1, dashedLineY1, dashedLineX2, dashedLineY2],\r\n    stroke: 'red',\r\n    strokeWidth: 2,\r\n    dash: [5, 10], // 破線のパターンを指定（length変数の値を使用）\r\n  });\r\n\r\n  // 丸い点を作成\r\n  const circle1 = new Konva.Circle({\r\n    x: dashedLineX1,\r\n    y: dashedLineY1,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  const circle2 = new Konva.Circle({\r\n    x: dashedLineX2,\r\n    y: dashedLineY2,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  // レイヤーに追加\r\n  const layer = new Konva.Layer();\r\n  layer.add(dashedLine5, circle1, circle2, midRect);\r\n  stage.add(layer);\r\n\r\n  document.querySelector(\".rectAngle-confirm5\").addEventListener(\"click\",function(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm8\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm9\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    \r\n    \r\n    if(size2 !== \"\" && size3 === \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    }\r\n      console.log(\"A\");\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num; \r\n\r\n   circle1.destroy();\r\n   midRect.destroy();\r\n   dashedLine5.destroy();\r\n\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.y() + length2;\r\n\r\n   // 右の丸い点の座標を更新\r\n   circle2.y(newRightCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x = circle2.x();\r\n     const y = circle2.y();\r\n\r\n     // 破線を作成\r\n     const dashedLine6 = new Konva.Line({\r\n       points: [x, y, x , y + length], // 例としてX座標から100ピクセル右に破線を表示\r\n       stroke: 'red',\r\n       strokeWidth: 2,\r\n       lineCap: 'round',\r\n       dash: [5, 10],\r\n     });\r\n\r\n     // 新しい丸い点を作成\r\n     const newCircle = new Konva.Circle({\r\n       x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n       y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n       radius: 5,\r\n       fill: 'red',\r\n     });\r\n\r\n     const x2 = newCircle.x();\r\n     const y2 = newCircle.y();\r\n\r\n     const newRectX = (x + x2) / 2;\r\n     const newRectY = (y + y2) / 2;\r\n     const newRect = new Konva.Rect({\r\n       x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n       y: newRectY - 5,\r\n       width: 10,\r\n       height: 10,\r\n       fill: 'red',\r\n     });\r\n\r\n     layer.add(dashedLine6);\r\n     layer.add(newCircle); \r\n     layer.add(newRect);\r\n     layer.draw();\r\n  \r\n\r\n   while (document.querySelector(\".div9\").lastChild) {\r\n    document.querySelector(\".div9\").removeChild(document.querySelector(\".div9\").lastChild);\r\n   }\r\n\r\n  const paturnText = document.createElement('p');\r\n  paturnText.classList.add(\"paturn-text\");\r\n\r\n  const check1 = document.createElement('input');\r\n  check1.type = \"checkbox\";\r\n  check1.classList.add(\"check1\");\r\n  check1.name = \"check\";\r\n\r\n  const check2 = document.createElement('input');\r\n  check2.type = \"checkbox\";\r\n  check2.classList.add(\"check2\");\r\n  check2.name = \"check\";\r\n\r\n  const paturn1 = document.createElement('img');\r\n  paturn1.src = \"/images/paturn1.png\";\r\n  paturn1.classList.add(\"paturn1\");\r\n\r\n  const paturn2 = document.createElement('img');\r\n  paturn2.src = \"/images/paturn2.png\";\r\n  paturn2.classList.add(\"paturn2\");\r\n\r\n  const rectAngleSizeForm28 = document.createElement('input');\r\n  rectAngleSizeForm28.type = \"text\";\r\n  rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n  rectAngleSizeForm28.placeholder = \"右方向に伸ばす長さを入力\";\r\n\r\n  const rectAngleSizeForm29 = document.createElement('input');\r\n  rectAngleSizeForm29.type = \"text\";\r\n  rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n  rectAngleSizeForm29.placeholder = \"左方向に縮める長さを入力\";\r\n\r\n  const rectAngleConfirm11 = document.createElement('button');\r\n  rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n  rectAngleConfirm11.append(\"決定\");\r\n\r\n  const div22 = document.createElement(\"div\");\r\n  div22.classList.add(\"div22\");\r\n\r\n  const div21 = document.createElement(\"div\");\r\n  div21.classList.add(\"div21\");\r\n\r\n  const note13 = document.createElement(\"p\");\r\n  note13.classList.add(\"note13\");\r\n\r\n  div22.append(note13);\r\n  div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n  div21.append(div22);\r\n  spacecenterInner.append(div21);\r\n\r\n  document.querySelector(\".note13\").textContent = \"右方向または左方向のどちらかを入力してください\";\r\n  document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n  const check = document.querySelectorAll(\"[name=check\");\r\n  for(let i = 0; i < 2; i++){\r\n    check[i].addEventListener(\"click\",function(){\r\n      const currentItem = this;\r\n      if(currentItem.checked){\r\n        check[0].checked = false;\r\n        check[1].checked = false;\r\n        currentItem.checked = true;\r\n      };\r\n    });\r\n  };\r\n\r\n  document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",function(){\r\n\r\n    if(check[0].checked){\r\n\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      \r\n\r\n      if(size4 !== \"\" && size5 === \"\"){\r\n\r\n        //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n        if(Number.isNaN(size4Num)){\r\n          const sizeFormError5 = document.createElement(\"p\");\r\n          sizeFormError5.classList.add(\"size-form-error5\");\r\n          div22.append(sizeFormError5);\r\n          document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n         }\r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 右に移動させる距離を指定\r\n        const offsetX = size4Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle2.x();\r\n        const circleY2 = circle2.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n        dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n        layer.add(dashedLine7);\r\n        layer.add(dashedLine8);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n         const rectAngleSizeForm30 = document.createElement('input');\r\n         rectAngleSizeForm30.type = \"text\";\r\n         rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n         rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n \r\n         const rectAngleSizeForm31 = document.createElement('input');\r\n         rectAngleSizeForm31.type = \"text\";\r\n         rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n         rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n   \r\n         const rectAngleConfirm12 = document.createElement('button');\r\n         rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n         rectAngleConfirm12.append(\"決定\");\r\n\r\n         const rectAngleConfirm13 = document.createElement('button');\r\n         rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n         rectAngleConfirm13.append(\"完了\");\r\n \r\n         const div24 = document.createElement(\"div\");\r\n         div24.classList.add(\"div24\");\r\n \r\n         const div23 = document.createElement(\"div\");\r\n         div23.classList.add(\"div23\");\r\n \r\n         const note14 = document.createElement(\"p\");\r\n         note14.classList.add(\"note14\");\r\n \r\n         div24.append(note14);\r\n         div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n \r\n         div23.append(div24);\r\n         spacecenterInner.append(div23);\r\n \r\n         document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n         document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",function(){\r\n\r\n          const polygon = new Konva.Line({\r\n            points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n            stroke: 'white', // 線の色\r\n            strokeWidth: 2, // 線の太さ\r\n            closed: true, // 閉じた形状として描画\r\n            fill: 'white', // 塗りつぶし色（透明）\r\n          });\r\n          \r\n          layer.add(polygon);\r\n\r\n          circle2.destroy();\r\n          newRect.destroy();\r\n          newCircle.destroy();\r\n\r\n          while (document.querySelector(\".div23\").lastChild) {\r\n            document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n           }\r\n\r\n         });\r\n\r\n         document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",function(){\r\n\r\n          \r\n           const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n           const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n           const size6Y = Number.parseFloat(size6);\r\n           const size7Y = Number.parseFloat(size7);\r\n           const size6Num = size6Y /1.06;\r\n           const size7Num = size7Y /1.06;\r\n\r\n           if(size6 !== \"\" && size7 === \"\"){\r\n\r\n            if(Number.isNaN(size6Num)){\r\n              const sizeFormError8 = document.createElement(\"p\");\r\n              sizeFormError8.classList.add(\"size-form-error8\");\r\n              div24.append(sizeFormError8);\r\n              document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n      \r\n             const offsetX = -size6Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle2.x();\r\n             const circleY2A = circle2.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'white', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'white', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle2.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n            if(Number.isNaN(size7Num)){\r\n              const sizeFormError9 = document.createElement(\"p\");\r\n              sizeFormError9.classList.add(\"size-form-error9\");\r\n              div24.append(sizeFormError9);\r\n              document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n\r\n             const offsetX = size7Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle2.x();\r\n             const circleY2A = circle2.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'white', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'white', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle2.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           };\r\n\r\n         });\r\n\r\n\r\n\r\n      }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n        //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n         if(Number.isNaN(size5Num)){\r\n          const sizeFormError6 = document.createElement(\"p\");\r\n          sizeFormError6.classList.add(\"size-form-error6\");\r\n          div22.append(sizeFormError6);\r\n          document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n         };\r\n\r\n         dashedLine6.destroy();\r\n\r\n        // 左に移動させる距離を指定\r\n        const offsetX = -size5Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle2.x();\r\n        const circleY2 = circle2.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n        dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n        layer.add(dashedLine7);\r\n        layer.add(dashedLine8);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n         const rectAngleSizeForm30 = document.createElement('input');\r\n         rectAngleSizeForm30.type = \"text\";\r\n         rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n         rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n \r\n         const rectAngleSizeForm31 = document.createElement('input');\r\n         rectAngleSizeForm31.type = \"text\";\r\n         rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n         rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n   \r\n         const rectAngleConfirm12 = document.createElement('button');\r\n         rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n         rectAngleConfirm12.append(\"決定\");\r\n\r\n         const rectAngleConfirm13 = document.createElement('button');\r\n         rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n         rectAngleConfirm13.append(\"完了\");\r\n \r\n         const div24 = document.createElement(\"div\");\r\n         div24.classList.add(\"div24\");\r\n \r\n         const div23 = document.createElement(\"div\");\r\n         div23.classList.add(\"div23\");\r\n \r\n         const note14 = document.createElement(\"p\");\r\n         note14.classList.add(\"note14\");\r\n \r\n         div24.append(note14);\r\n         div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n \r\n         div23.append(div24);\r\n         spacecenterInner.append(div23);\r\n \r\n         document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n         document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",function(){\r\n\r\n          const polygon = new Konva.Line({\r\n            points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n            stroke: 'blue', // 線の色\r\n            strokeWidth: 2, // 線の太さ\r\n            closed: true, // 閉じた形状として描画\r\n            fill: 'blue', // 塗りつぶし色（透明）\r\n          });\r\n          \r\n          layer.add(polygon);\r\n\r\n          circle2.destroy();\r\n          newRect.destroy();\r\n          newCircle.destroy();\r\n\r\n          while (document.querySelector(\".div23\").lastChild) {\r\n            document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n           }\r\n\r\n         });\r\n\r\n         document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",function(){\r\n\r\n          \r\n           const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n           const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n           const size6Y = Number.parseFloat(size6);\r\n           const size7Y = Number.parseFloat(size7);\r\n           const size6Num = size6Y /1.06;\r\n           const size7Num = size7Y /1.06;\r\n\r\n           if(size6 !== \"\" && size7 === \"\"){\r\n\r\n            if(Number.isNaN(size6Num)){\r\n              const sizeFormError8 = document.createElement(\"p\");\r\n              sizeFormError8.classList.add(\"size-form-error8\");\r\n              div24.append(sizeFormError8);\r\n              document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n      \r\n             const offsetX = -size6Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle2.x();\r\n             const circleY2A = circle2.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'blue', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'blue', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle2.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n            if(Number.isNaN(size7Num)){\r\n              const sizeFormError9 = document.createElement(\"p\");\r\n              sizeFormError9.classList.add(\"size-form-error9\");\r\n              div24.append(sizeFormError9);\r\n              document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n\r\n             const offsetX = size7Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle2.x();\r\n             const circleY2A = circle2.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'blue', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'blue', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle2.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           };\r\n\r\n         });\r\n\r\n      };\r\n\r\n\r\n\r\n    }else if(check[1].checked){\r\n\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      \r\n\r\n      if(size4 !== \"\" && size5 === \"\"){\r\n\r\n        //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n        if(Number.isNaN(size4Num)){\r\n          const sizeFormError5 = document.createElement(\"p\");\r\n          sizeFormError5.classList.add(\"size-form-error5\");\r\n          div22.append(sizeFormError5);\r\n          document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n         }\r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 右に移動させる距離を指定\r\n        const offsetX = size4Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle2.x();\r\n        const circleY2 = circle2.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        //丸い点と四角が垂直に交わる座標\r\n        const intersectionY1 = newCircle.y(); \r\n        const intersectionX1 = newRect.x()+5;\r\n\r\n        //もう一方の丸い点と四角が垂直に交わる座標\r\n        const intersectionY2 = circle2.y(); \r\n        const intersectionX2 = newRect.x()+5;\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        const polygon = new Konva.Line({\r\n          points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n          stroke: 'white', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'white', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n        newCircle.destroy();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n\r\n\r\n      }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n        //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n         if(Number.isNaN(size5Num)){\r\n          const sizeFormError6 = document.createElement(\"p\");\r\n          sizeFormError6.classList.add(\"size-form-error6\");\r\n          div22.append(sizeFormError6);\r\n          document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n         } \r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 左に移動させる距離を指定\r\n        const offsetX = -size5Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle2.x();\r\n        const circleY2 = circle2.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        //丸い点と四角が垂直に交わる座標\r\n        const intersectionY1 = newCircle.y(); \r\n        const intersectionX1 = newRect.x()+5;\r\n\r\n        //もう一方の丸い点と四角が垂直に交わる座標\r\n        const intersectionY2 = circle2.y(); \r\n        const intersectionX2 = newRect.x()+5;\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        const polygon = new Konva.Line({\r\n          points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n          stroke: 'blue', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'blue', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n        newCircle.destroy();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n      };\r\n\r\n\r\n\r\n    }else{\r\n\r\n      const sizeFormError7 = document.createElement(\"p\");\r\n      sizeFormError7.classList.add(\"size-form-error7\");\r\n      div22.append(sizeFormError7);\r\n      document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n    }\r\n\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n    } else if(size3 !== \"\" && size2 === \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";\r\n       } \r\n\r\n   // 長さを格納する変数\r\n   let length2 = size3Num; \r\n\r\n   circle2.destroy();\r\n   midRect.destroy();\r\n   dashedLine5.destroy();\r\n\r\n   // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.y() + rectangle.height() - length2;\r\n\r\n   // 右の丸い点の座標を更新\r\n   circle1.y(newRightCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x = circle1.x();\r\n     const y = circle1.y();\r\n\r\n     // 破線を作成\r\n     const dashedLine6 = new Konva.Line({\r\n       points: [x, y, x , y - length], // 例としてX座標から100ピクセル右に破線を表示\r\n       stroke: 'red',\r\n       strokeWidth: 2,\r\n       lineCap: 'round',\r\n       dash: [5, 10],\r\n     });\r\n\r\n     // 新しい丸い点を作成\r\n     const newCircle = new Konva.Circle({\r\n       x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n       y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n       radius: 5,\r\n       fill: 'red',\r\n     });\r\n\r\n     const x2 = newCircle.x();\r\n     const y2 = newCircle.y();\r\n\r\n     const newRectX = (x + x2) / 2;\r\n     const newRectY = (y + y2) / 2;\r\n     const newRect = new Konva.Rect({\r\n       x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n       y: newRectY - 5,\r\n       width: 10,\r\n       height: 10,\r\n       fill: 'red',\r\n     });\r\n\r\n     layer.add(dashedLine6);\r\n     layer.add(newCircle); \r\n     layer.add(newRect);\r\n     layer.draw();\r\n  \r\n\r\n   while (document.querySelector(\".div9\").lastChild) {\r\n    document.querySelector(\".div9\").removeChild(document.querySelector(\".div9\").lastChild);\r\n   }\r\n\r\n  const paturnText = document.createElement('p');\r\n  paturnText.classList.add(\"paturn-text\");\r\n\r\n  const check1 = document.createElement('input');\r\n  check1.type = \"checkbox\";\r\n  check1.classList.add(\"check1\");\r\n  check1.name = \"check\";\r\n\r\n  const check2 = document.createElement('input');\r\n  check2.type = \"checkbox\";\r\n  check2.classList.add(\"check2\");\r\n  check2.name = \"check\";\r\n\r\n  const paturn1 = document.createElement('img');\r\n  paturn1.src = \"/images/paturn1.png\";\r\n  paturn1.classList.add(\"paturn1\");\r\n\r\n  const paturn2 = document.createElement('img');\r\n  paturn2.src = \"/images/paturn2.png\";\r\n  paturn2.classList.add(\"paturn2\");\r\n\r\n  const rectAngleSizeForm28 = document.createElement('input');\r\n  rectAngleSizeForm28.type = \"text\";\r\n  rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n  rectAngleSizeForm28.placeholder = \"右方向に伸ばす長さを入力\";\r\n\r\n  const rectAngleSizeForm29 = document.createElement('input');\r\n  rectAngleSizeForm29.type = \"text\";\r\n  rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n  rectAngleSizeForm29.placeholder = \"左方向に縮める長さを入力\";\r\n\r\n  const rectAngleConfirm11 = document.createElement('button');\r\n  rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n  rectAngleConfirm11.append(\"決定\");\r\n\r\n  const div22 = document.createElement(\"div\");\r\n  div22.classList.add(\"div22\");\r\n\r\n  const div21 = document.createElement(\"div\");\r\n  div21.classList.add(\"div21\");\r\n\r\n  const note13 = document.createElement(\"p\");\r\n  note13.classList.add(\"note13\");\r\n\r\n  div22.append(note13);\r\n  div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n  div21.append(div22);\r\n  spacecenterInner.append(div21);\r\n\r\n  document.querySelector(\".note13\").textContent = \"右方向または左方向のどちらかを入力してください\";\r\n  document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n  const check = document.querySelectorAll(\"[name=check\");\r\n  for(let i = 0; i < 2; i++){\r\n    check[i].addEventListener(\"click\",function(){\r\n      const currentItem = this;\r\n      if(currentItem.checked){\r\n        check[0].checked = false;\r\n        check[1].checked = false;\r\n        currentItem.checked = true;\r\n      };\r\n    });\r\n  };\r\n\r\n  document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",function(){\r\n\r\n    if(check[0].checked){\r\n\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      \r\n\r\n      if(size4 !== \"\" && size5 === \"\"){\r\n\r\n        //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n        if(Number.isNaN(size4Num)){\r\n          const sizeFormError5 = document.createElement(\"p\");\r\n          sizeFormError5.classList.add(\"size-form-error5\");\r\n          div22.append(sizeFormError5);\r\n          document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n         }\r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 右に移動させる距離を指定\r\n        const offsetX = size4Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n        dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n        layer.add(dashedLine7);\r\n        layer.add(dashedLine8);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n         const rectAngleSizeForm30 = document.createElement('input');\r\n         rectAngleSizeForm30.type = \"text\";\r\n         rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n         rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n \r\n         const rectAngleSizeForm31 = document.createElement('input');\r\n         rectAngleSizeForm31.type = \"text\";\r\n         rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n         rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n   \r\n         const rectAngleConfirm12 = document.createElement('button');\r\n         rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n         rectAngleConfirm12.append(\"決定\");\r\n\r\n         const rectAngleConfirm13 = document.createElement('button');\r\n         rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n         rectAngleConfirm13.append(\"完了\");\r\n \r\n         const div24 = document.createElement(\"div\");\r\n         div24.classList.add(\"div24\");\r\n \r\n         const div23 = document.createElement(\"div\");\r\n         div23.classList.add(\"div23\");\r\n \r\n         const note14 = document.createElement(\"p\");\r\n         note14.classList.add(\"note14\");\r\n \r\n         div24.append(note14);\r\n         div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n \r\n         div23.append(div24);\r\n         spacecenterInner.append(div23);\r\n \r\n         document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n         document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",function(){\r\n\r\n          const polygon = new Konva.Line({\r\n            points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n            stroke: 'white', // 線の色\r\n            strokeWidth: 2, // 線の太さ\r\n            closed: true, // 閉じた形状として描画\r\n            fill: 'white', // 塗りつぶし色（透明）\r\n          });\r\n          \r\n          layer.add(polygon);\r\n\r\n          circle1.destroy();\r\n          newRect.destroy();\r\n          newCircle.destroy();\r\n\r\n          while (document.querySelector(\".div23\").lastChild) {\r\n            document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n           }\r\n\r\n         });\r\n\r\n         document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",function(){\r\n\r\n          \r\n           const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n           const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n           const size6Y = Number.parseFloat(size6);\r\n           const size7Y = Number.parseFloat(size7);\r\n           const size6Num = size6Y /1.06;\r\n           const size7Num = size7Y /1.06;\r\n\r\n           if(size6 !== \"\" && size7 === \"\"){\r\n\r\n            if(Number.isNaN(size6Num)){\r\n              const sizeFormError8 = document.createElement(\"p\");\r\n              sizeFormError8.classList.add(\"size-form-error8\");\r\n              div24.append(sizeFormError8);\r\n              document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n      \r\n             const offsetX = -size6Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'white', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'white', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n            if(Number.isNaN(size7Num)){\r\n              const sizeFormError9 = document.createElement(\"p\");\r\n              sizeFormError9.classList.add(\"size-form-error9\");\r\n              div24.append(sizeFormError9);\r\n              document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n\r\n             const offsetX = size7Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'white', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'white', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           };\r\n\r\n         });\r\n\r\n\r\n\r\n      }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n        //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n         if(Number.isNaN(size5Num)){\r\n          const sizeFormError6 = document.createElement(\"p\");\r\n          sizeFormError6.classList.add(\"size-form-error6\");\r\n          div22.append(sizeFormError6);\r\n          document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n         };\r\n\r\n         dashedLine6.destroy();\r\n\r\n        // 左に移動させる距離を指定\r\n        const offsetX = -size5Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n        dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n        layer.add(dashedLine7);\r\n        layer.add(dashedLine8);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n         const rectAngleSizeForm30 = document.createElement('input');\r\n         rectAngleSizeForm30.type = \"text\";\r\n         rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n         rectAngleSizeForm30.placeholder = \"四角を上方向に動かす場合はその長さを入力\";\r\n \r\n         const rectAngleSizeForm31 = document.createElement('input');\r\n         rectAngleSizeForm31.type = \"text\";\r\n         rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n         rectAngleSizeForm31.placeholder = \"四角を下方向に動かす場合はその長さを入力\";\r\n   \r\n         const rectAngleConfirm12 = document.createElement('button');\r\n         rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n         rectAngleConfirm12.append(\"決定\");\r\n\r\n         const rectAngleConfirm13 = document.createElement('button');\r\n         rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n         rectAngleConfirm13.append(\"完了\");\r\n \r\n         const div24 = document.createElement(\"div\");\r\n         div24.classList.add(\"div24\");\r\n \r\n         const div23 = document.createElement(\"div\");\r\n         div23.classList.add(\"div23\");\r\n \r\n         const note14 = document.createElement(\"p\");\r\n         note14.classList.add(\"note14\");\r\n \r\n         div24.append(note14);\r\n         div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n \r\n         div23.append(div24);\r\n         spacecenterInner.append(div23);\r\n \r\n         document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n         document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",function(){\r\n\r\n          const polygon = new Konva.Line({\r\n            points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n            stroke: 'blue', // 線の色\r\n            strokeWidth: 2, // 線の太さ\r\n            closed: true, // 閉じた形状として描画\r\n            fill: 'blue', // 塗りつぶし色（透明）\r\n          });\r\n          \r\n          layer.add(polygon);\r\n\r\n          circle1.destroy();\r\n          newRect.destroy();\r\n          newCircle.destroy();\r\n\r\n          while (document.querySelector(\".div23\").lastChild) {\r\n            document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n           }\r\n\r\n         });\r\n\r\n         document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",function(){\r\n\r\n          \r\n           const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n           const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n           const size6Y = Number.parseFloat(size6);\r\n           const size7Y = Number.parseFloat(size7);\r\n           const size6Num = size6Y /1.06;\r\n           const size7Num = size7Y /1.06;\r\n\r\n           if(size6 !== \"\" && size7 === \"\"){\r\n\r\n            if(Number.isNaN(size6Num)){\r\n              const sizeFormError8 = document.createElement(\"p\");\r\n              sizeFormError8.classList.add(\"size-form-error8\");\r\n              div24.append(sizeFormError8);\r\n              document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n      \r\n             const offsetX = -size6Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'blue', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'blue', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n            if(Number.isNaN(size7Num)){\r\n              const sizeFormError9 = document.createElement(\"p\");\r\n              sizeFormError9.classList.add(\"size-form-error9\");\r\n              div24.append(sizeFormError9);\r\n              document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n\r\n             const offsetX = size7Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX;\r\n             const newY = currentY + offsetX;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'blue', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'blue', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           };\r\n\r\n         });\r\n\r\n      };\r\n\r\n\r\n\r\n    }else if(check[1].checked){\r\n\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      \r\n\r\n      if(size4 !== \"\" && size5 === \"\"){\r\n\r\n        //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n        if(Number.isNaN(size4Num)){\r\n          const sizeFormError5 = document.createElement(\"p\");\r\n          sizeFormError5.classList.add(\"size-form-error5\");\r\n          div22.append(sizeFormError5);\r\n          document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n         }\r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 右に移動させる距離を指定\r\n        const offsetX = size4Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        //丸い点と四角が垂直に交わる座標\r\n        const intersectionY1 = newCircle.y(); \r\n        const intersectionX1 = newRect.x()+5;\r\n\r\n        //もう一方の丸い点と四角が垂直に交わる座標\r\n        const intersectionY2 = circle1.y(); \r\n        const intersectionX2 = newRect.x()+5;\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        const polygon = new Konva.Line({\r\n          points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n          stroke: 'white', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'white', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n        newCircle.destroy();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n\r\n\r\n      }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n        //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n         if(Number.isNaN(size5Num)){\r\n          const sizeFormError6 = document.createElement(\"p\");\r\n          sizeFormError6.classList.add(\"size-form-error6\");\r\n          div22.append(sizeFormError6);\r\n          document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n         } \r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 左に移動させる距離を指定\r\n        const offsetX = -size5Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX + offsetX;\r\n        const newY = currentY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        //丸い点と四角が垂直に交わる座標\r\n        const intersectionY1 = newCircle.y(); \r\n        const intersectionX1 = newRect.x()+5;\r\n\r\n        //もう一方の丸い点と四角が垂直に交わる座標\r\n        const intersectionY2 = circle1.y(); \r\n        const intersectionX2 = newRect.x()+5;\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        const polygon = new Konva.Line({\r\n          points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n          stroke: 'blue', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'blue', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n        newCircle.destroy();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n      };\r\n\r\n\r\n\r\n    }else{\r\n\r\n      const sizeFormError7 = document.createElement(\"p\");\r\n      sizeFormError7.classList.add(\"size-form-error7\");\r\n      div22.append(sizeFormError7);\r\n      document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n    }\r\n\r\n  });\r\n\r\n    };  \r\n\r\n  });\r\n\r\n\r\n} else if( midRect.y() + midRect.height() >= rectangle.y() + rectangle.height()){\r\n\r\n  const rectAngleSizeForm10 = document.createElement('input');\r\n  rectAngleSizeForm10.type = \"text\";\r\n  rectAngleSizeForm10.classList.add(\"rectAngle-SizeForm10\");\r\n  rectAngleSizeForm10.placeholder = \"右端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm11 = document.createElement('input');\r\n  rectAngleSizeForm11.type = \"text\";\r\n  rectAngleSizeForm11.classList.add(\"rectAngle-SizeForm11\");\r\n  rectAngleSizeForm11.placeholder = \"左端からの長さを入力\";\r\n\r\n  const rectAngleConfirm6 = document.createElement('button');\r\n  rectAngleConfirm6.classList.add(\"rectAngle-confirm6\");\r\n  rectAngleConfirm6.append(\"決定\");\r\n\r\n  const div12 = document.createElement(\"div\");\r\n  div12.classList.add(\"div12\");\r\n\r\n  const div11 = document.createElement(\"div\");\r\n  div11.classList.add(\"div11\");\r\n\r\n  const note4 = document.createElement(\"p\");\r\n  note4.classList.add(\"note4\");\r\n\r\n  div12.append(note4);\r\n  div12.append(rectAngleSizeForm10,rectAngleSizeForm11,rectAngleConfirm6);\r\n\r\n  div11.append(div12);\r\n  spacecenterInner.append(div11);\r\n\r\n  document.querySelector(\".note4\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n\r\n  // 四角の中心座標を取得\r\n  const midRectX = midRect.x() + midRect.width() / 2;\r\n  const midRectY = midRect.y() + midRect.height() / 2;\r\n\r\n  // 横破線を描画する座標を計算\r\n  const dashedLineX1 = midRectX - length / 2;\r\n  const dashedLineY1 = midRectY;\r\n  const dashedLineX2 = midRectX + length / 2;\r\n  const dashedLineY2 = midRectY;\r\n\r\n  // 破線を作成\r\n  const dashedLine5 = new Konva.Line({\r\n    points: [dashedLineX1, dashedLineY1, dashedLineX2, dashedLineY2],\r\n    stroke: 'red',\r\n    strokeWidth: 2,\r\n    dash: [5, 10], // 破線のパターンを指定（length変数の値を使用）\r\n  });\r\n\r\n  // 丸い点を作成\r\n  const circle1 = new Konva.Circle({\r\n    x: dashedLineX1,\r\n    y: dashedLineY1,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  const circle2 = new Konva.Circle({\r\n    x: dashedLineX2,\r\n    y: dashedLineY2,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  // レイヤーに追加\r\n  const layer = new Konva.Layer();\r\n  layer.add(dashedLine5, circle1, circle2, midRect);\r\n  stage.add(layer);\r\n\r\n  document.querySelector(\".rectAngle-confirm6\").addEventListener(\"click\",function(){\r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm10\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm11\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    \r\n    \r\n    if(size2 !== \"\" && size3 === \"\"){\r\n\r\n    if(Number.isNaN(size2Num)){\r\n\r\n     const sizeFormError3 = document.createElement(\"p\");\r\n     sizeFormError3.classList.add(\"size-form-error3\");\r\n     div6.append(sizeFormError3);\r\n     document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n    }\r\n      console.log(\"A\");\r\n\r\n   // 長さを格納する変数\r\n   let length2 = size2Num; \r\n\r\n   circle1.destroy();\r\n   midRect.destroy();\r\n   dashedLine5.destroy();\r\n\r\n   // 図形の上辺の右端から指定した距離の位置を計算して新しい右の丸い点のX座標を設定\r\n   const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n\r\n   // 右の丸い点の座標を更新\r\n   circle2.x(newRightCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x = circle2.x();\r\n     const y = circle2.y();\r\n\r\n     // 破線を作成\r\n     const dashedLine6 = new Konva.Line({\r\n       points: [x, y, x - length, y], // 例としてX座標から100ピクセル右に破線を表示\r\n       stroke: 'red',\r\n       strokeWidth: 2,\r\n       lineCap: 'round',\r\n       dash: [5, 10],\r\n     });\r\n\r\n     // 新しい丸い点を作成\r\n     const newCircle = new Konva.Circle({\r\n       x: dashedLine6.points()[2], // 破線の一番左端のX座標を取得\r\n       y: dashedLine6.points()[3], // 破線の一番左端のY座標を取得\r\n       radius: 5,\r\n       fill: 'red',\r\n     });\r\n\r\n     const x2 = newCircle.x();\r\n     const y2 = newCircle.y();\r\n\r\n     const newRectX = (x + x2) / 2;\r\n     const newRectY = (y + y2) / 2;\r\n     const newRect = new Konva.Rect({\r\n       x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n       y: newRectY - 5,\r\n       width: 10,\r\n       height: 10,\r\n       fill: 'red',\r\n     });\r\n\r\n     layer.add(dashedLine6);\r\n     layer.add(newCircle); \r\n     layer.add(newRect);\r\n     layer.draw();\r\n  \r\n\r\n   while (document.querySelector(\".div11\").lastChild) {\r\n    document.querySelector(\".div11\").removeChild(document.querySelector(\".div11\").lastChild);\r\n   }\r\n\r\n  const paturnText = document.createElement('p');\r\n  paturnText.classList.add(\"paturn-text\");\r\n\r\n  const check1 = document.createElement('input');\r\n  check1.type = \"checkbox\";\r\n  check1.classList.add(\"check1\");\r\n  check1.name = \"check\";\r\n\r\n  const check2 = document.createElement('input');\r\n  check2.type = \"checkbox\";\r\n  check2.classList.add(\"check2\");\r\n  check2.name = \"check\";\r\n\r\n  const paturn1 = document.createElement('img');\r\n  paturn1.src = \"/images/paturn1.png\";\r\n  paturn1.classList.add(\"paturn1\");\r\n\r\n  const paturn2 = document.createElement('img');\r\n  paturn2.src = \"/images/paturn2.png\";\r\n  paturn2.classList.add(\"paturn2\");\r\n\r\n  const rectAngleSizeForm28 = document.createElement('input');\r\n  rectAngleSizeForm28.type = \"text\";\r\n  rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n  rectAngleSizeForm28.placeholder = \"上方向に伸ばす長さを入力\";\r\n\r\n  const rectAngleSizeForm29 = document.createElement('input');\r\n  rectAngleSizeForm29.type = \"text\";\r\n  rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n  rectAngleSizeForm29.placeholder = \"下方向に縮める長さを入力\";\r\n\r\n  const rectAngleConfirm11 = document.createElement('button');\r\n  rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n  rectAngleConfirm11.append(\"決定\");\r\n\r\n  const div22 = document.createElement(\"div\");\r\n  div22.classList.add(\"div22\");\r\n\r\n  const div21 = document.createElement(\"div\");\r\n  div21.classList.add(\"div21\");\r\n\r\n  const note13 = document.createElement(\"p\");\r\n  note13.classList.add(\"note13\");\r\n\r\n  div22.append(note13);\r\n  div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n  div21.append(div22);\r\n  spacecenterInner.append(div21);\r\n\r\n  document.querySelector(\".note13\").textContent = \"上方向または下方向のどちらかを入力してください\";\r\n  document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n  const check = document.querySelectorAll(\"[name=check\");\r\n  for(let i = 0; i < 2; i++){\r\n    check[i].addEventListener(\"click\",function(){\r\n      const currentItem = this;\r\n      if(currentItem.checked){\r\n        check[0].checked = false;\r\n        check[1].checked = false;\r\n        currentItem.checked = true;\r\n      };\r\n    });\r\n  };\r\n\r\n  document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",function(){\r\n\r\n    if(check[0].checked){\r\n\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      \r\n\r\n      if(size4 !== \"\" && size5 === \"\"){\r\n\r\n        //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n        if(Number.isNaN(size4Num)){\r\n          const sizeFormError5 = document.createElement(\"p\");\r\n          sizeFormError5.classList.add(\"size-form-error5\");\r\n          div22.append(sizeFormError5);\r\n          document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n         }\r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 上に移動させる距離を指定\r\n        const offsetY = -size4Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle2.x();\r\n        const circleY2 = circle2.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX;\r\n        const newY = currentY + offsetY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n        dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n        layer.add(dashedLine7);\r\n        layer.add(dashedLine8);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n         const rectAngleSizeForm30 = document.createElement('input');\r\n         rectAngleSizeForm30.type = \"text\";\r\n         rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n         rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n \r\n         const rectAngleSizeForm31 = document.createElement('input');\r\n         rectAngleSizeForm31.type = \"text\";\r\n         rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n         rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n   \r\n         const rectAngleConfirm12 = document.createElement('button');\r\n         rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n         rectAngleConfirm12.append(\"決定\");\r\n\r\n         const rectAngleConfirm13 = document.createElement('button');\r\n         rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n         rectAngleConfirm13.append(\"完了\");\r\n \r\n         const div24 = document.createElement(\"div\");\r\n         div24.classList.add(\"div24\");\r\n \r\n         const div23 = document.createElement(\"div\");\r\n         div23.classList.add(\"div23\");\r\n \r\n         const note14 = document.createElement(\"p\");\r\n         note14.classList.add(\"note14\");\r\n \r\n         div24.append(note14);\r\n         div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n \r\n         div23.append(div24);\r\n         spacecenterInner.append(div23);\r\n \r\n         document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n         document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",function(){\r\n\r\n          const polygon = new Konva.Line({\r\n            points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n            stroke: 'white', // 線の色\r\n            strokeWidth: 2, // 線の太さ\r\n            closed: true, // 閉じた形状として描画\r\n            fill: 'white', // 塗りつぶし色（透明）\r\n          });\r\n          \r\n          layer.add(polygon);\r\n\r\n          circle2.destroy();\r\n          newRect.destroy();\r\n          newCircle.destroy();\r\n\r\n          while (document.querySelector(\".div23\").lastChild) {\r\n            document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n           }\r\n\r\n         });\r\n\r\n         document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",function(){\r\n\r\n          \r\n           const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n           const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n           const size6Y = Number.parseFloat(size6);\r\n           const size7Y = Number.parseFloat(size7);\r\n           const size6Num = size6Y /1.06;\r\n           const size7Num = size7Y /1.06;\r\n\r\n           if(size6 !== \"\" && size7 === \"\"){\r\n\r\n            if(Number.isNaN(size6Num)){\r\n              const sizeFormError8 = document.createElement(\"p\");\r\n              sizeFormError8.classList.add(\"size-form-error8\");\r\n              div24.append(sizeFormError8);\r\n              document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n      \r\n             const offsetX = size6Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX + offsetX;\r\n             const newY = currentY;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle2.x();\r\n             const circleY2A = circle2.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'white', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'white', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle2.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n            if(Number.isNaN(size7Num)){\r\n              const sizeFormError9 = document.createElement(\"p\");\r\n              sizeFormError9.classList.add(\"size-form-error9\");\r\n              div24.append(sizeFormError9);\r\n              document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n\r\n             const offsetX = size7Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX - offsetX;\r\n             const newY = currentY;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle2.x();\r\n             const circleY2A = circle2.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'white', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'white', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle2.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           };\r\n\r\n         });\r\n\r\n\r\n\r\n      }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n        //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n         if(Number.isNaN(size5Num)){\r\n          const sizeFormError6 = document.createElement(\"p\");\r\n          sizeFormError6.classList.add(\"size-form-error6\");\r\n          div22.append(sizeFormError6);\r\n          document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n         };\r\n\r\n         dashedLine6.destroy();\r\n\r\n        // 下に移動させる距離を指定\r\n        const offsetY = size5Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle2.x();\r\n        const circleY2 = circle2.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX;\r\n        const newY = currentY + offsetY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n        dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n        layer.add(dashedLine7);\r\n        layer.add(dashedLine8);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n         const rectAngleSizeForm30 = document.createElement('input');\r\n         rectAngleSizeForm30.type = \"text\";\r\n         rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n         rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n \r\n         const rectAngleSizeForm31 = document.createElement('input');\r\n         rectAngleSizeForm31.type = \"text\";\r\n         rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n         rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n   \r\n         const rectAngleConfirm12 = document.createElement('button');\r\n         rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n         rectAngleConfirm12.append(\"決定\");\r\n\r\n         const rectAngleConfirm13 = document.createElement('button');\r\n         rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n         rectAngleConfirm13.append(\"完了\");\r\n \r\n         const div24 = document.createElement(\"div\");\r\n         div24.classList.add(\"div24\");\r\n \r\n         const div23 = document.createElement(\"div\");\r\n         div23.classList.add(\"div23\");\r\n \r\n         const note14 = document.createElement(\"p\");\r\n         note14.classList.add(\"note14\");\r\n \r\n         div24.append(note14);\r\n         div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n \r\n         div23.append(div24);\r\n         spacecenterInner.append(div23);\r\n \r\n         document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n         document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",function(){\r\n\r\n          const polygon = new Konva.Line({\r\n            points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n            stroke: 'blue', // 線の色\r\n            strokeWidth: 2, // 線の太さ\r\n            closed: true, // 閉じた形状として描画\r\n            fill: 'blue', // 塗りつぶし色（透明）\r\n          });\r\n          \r\n          layer.add(polygon);\r\n\r\n          circle2.destroy();\r\n          newRect.destroy();\r\n          newCircle.destroy();\r\n\r\n          while (document.querySelector(\".div23\").lastChild) {\r\n            document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n           }\r\n\r\n         });\r\n\r\n         document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",function(){\r\n\r\n          \r\n           const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n           const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n           const size6Y = Number.parseFloat(size6);\r\n           const size7Y = Number.parseFloat(size7);\r\n           const size6Num = size6Y /1.06;\r\n           const size7Num = size7Y /1.06;\r\n\r\n           if(size6 !== \"\" && size7 === \"\"){\r\n\r\n            if(Number.isNaN(size6Num)){\r\n              const sizeFormError8 = document.createElement(\"p\");\r\n              sizeFormError8.classList.add(\"size-form-error8\");\r\n              div24.append(sizeFormError8);\r\n              document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n      \r\n             const offsetX = size6Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX + offsetX;\r\n             const newY = currentY;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle2.x();\r\n             const circleY2A = circle2.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'blue', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'blue', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle2.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n            if(Number.isNaN(size7Num)){\r\n              const sizeFormError9 = document.createElement(\"p\");\r\n              sizeFormError9.classList.add(\"size-form-error9\");\r\n              div24.append(sizeFormError9);\r\n              document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n\r\n             const offsetX = size7Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX - offsetX;\r\n             const newY = currentY;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle2.x();\r\n             const circleY2A = circle2.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'blue', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'blue', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle2.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           };\r\n\r\n         });\r\n\r\n      };\r\n\r\n\r\n\r\n    }else if(check[1].checked){\r\n\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      \r\n\r\n      if(size4 !== \"\" && size5 === \"\"){\r\n\r\n        //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n        if(Number.isNaN(size4Num)){\r\n          const sizeFormError5 = document.createElement(\"p\");\r\n          sizeFormError5.classList.add(\"size-form-error5\");\r\n          div22.append(sizeFormError5);\r\n          document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n         }\r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 上に移動させる距離を指定\r\n        const offsetY = -size4Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle2.x();\r\n        const circleY2 = circle2.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX;\r\n        const newY = currentY + offsetY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        //丸い点と四角が垂直に交わる座標\r\n        const intersectionX1 = newCircle.x(); \r\n        const intersectionY1 = newRect.y()+5;\r\n\r\n        //もう一方の丸い点と四角が垂直に交わる座標\r\n        const intersectionX2 = circle2.x(); \r\n        const intersectionY2 = newRect.y()+5;\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        const polygon = new Konva.Line({\r\n          points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n          stroke: 'white', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'white', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n        newCircle.destroy();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n\r\n\r\n      }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n        //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n         if(Number.isNaN(size5Num)){\r\n          const sizeFormError6 = document.createElement(\"p\");\r\n          sizeFormError6.classList.add(\"size-form-error6\");\r\n          div22.append(sizeFormError6);\r\n          document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n         } \r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 上に移動させる距離を指定\r\n        const offsetY = size5Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle2.x();\r\n        const circleY2 = circle2.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX;\r\n        const newY = currentY + offsetY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        //丸い点と四角が垂直に交わる座標\r\n        const intersectionX1 = newCircle.x(); \r\n        const intersectionY1 = newRect.y()+5;\r\n\r\n        //もう一方の丸い点と四角が垂直に交わる座標\r\n        const intersectionX2 = circle2.x(); \r\n        const intersectionY2 = newRect.y()+5;\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        const polygon = new Konva.Line({\r\n          points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n          stroke: 'blue', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'blue', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        circle2.destroy();\r\n        newRect.destroy();\r\n        newCircle.destroy();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n      };\r\n\r\n\r\n\r\n    }else{\r\n\r\n      const sizeFormError7 = document.createElement(\"p\");\r\n      sizeFormError7.classList.add(\"size-form-error7\");\r\n      div22.append(sizeFormError7);\r\n      document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n    }\r\n\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n    } else if(size3 !== \"\" && size2 === \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";\r\n       } \r\n\r\n        // 長さを格納する変数\r\n   let length2 = size3Num; \r\n\r\n   circle2.destroy();\r\n   midRect.destroy();\r\n   dashedLine5.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n\r\n   // 左の丸い点の座標を更新\r\n   circle1.x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x = circle1.x();\r\n     const y = circle1.y();\r\n\r\n     // 破線を作成\r\n     const dashedLine6 = new Konva.Line({\r\n       points: [x, y, x + length, y], // 例としてX座標から100ピクセル右に破線を表示\r\n       stroke: 'red',\r\n       strokeWidth: 2,\r\n       lineCap: 'round',\r\n       dash: [5, 10],\r\n     });\r\n\r\n     // 新しい丸い点を作成\r\n     const newCircle = new Konva.Circle({\r\n       x: dashedLine6.points()[2], // 破線の一番右端のX座標を取得\r\n       y: dashedLine6.points()[3], // 破線の一番右端のY座標を取得\r\n       radius: 5,\r\n       fill: 'red',\r\n     });\r\n\r\n\r\n     const x2 = newCircle.x();\r\n     const y2 = newCircle.y();\r\n\r\n     const newRectX = (x + x2) / 2;\r\n     const newRectY = (y + y2) / 2;\r\n     const newRect = new Konva.Rect({\r\n       x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n       y: newRectY - 5,\r\n       width: 10,\r\n       height: 10,\r\n       fill: 'red',\r\n     });\r\n\r\n     layer.add(dashedLine6);\r\n     layer.add(newCircle); \r\n     layer.add(newRect);\r\n     layer.draw();\r\n  \r\n\r\n   while (document.querySelector(\".div11\").lastChild) {\r\n    document.querySelector(\".div11\").removeChild(document.querySelector(\".div11\").lastChild);\r\n   }\r\n\r\n  const paturnText = document.createElement('p');\r\n  paturnText.classList.add(\"paturn-text\");\r\n\r\n  const check1 = document.createElement('input');\r\n  check1.type = \"checkbox\";\r\n  check1.classList.add(\"check1\");\r\n  check1.name = \"check\";\r\n\r\n  const check2 = document.createElement('input');\r\n  check2.type = \"checkbox\";\r\n  check2.classList.add(\"check2\");\r\n  check2.name = \"check\";\r\n\r\n  const paturn1 = document.createElement('img');\r\n  paturn1.src = \"/images/paturn1.png\";\r\n  paturn1.classList.add(\"paturn1\");\r\n\r\n  const paturn2 = document.createElement('img');\r\n  paturn2.src = \"/images/paturn2.png\";\r\n  paturn2.classList.add(\"paturn2\");\r\n\r\n  const rectAngleSizeForm28 = document.createElement('input');\r\n  rectAngleSizeForm28.type = \"text\";\r\n  rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n  rectAngleSizeForm28.placeholder = \"上方向に伸ばす長さを入力\";\r\n\r\n  const rectAngleSizeForm29 = document.createElement('input');\r\n  rectAngleSizeForm29.type = \"text\";\r\n  rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n  rectAngleSizeForm29.placeholder = \"下方向に縮める長さを入力\";\r\n\r\n  const rectAngleConfirm11 = document.createElement('button');\r\n  rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n  rectAngleConfirm11.append(\"決定\");\r\n\r\n  const div22 = document.createElement(\"div\");\r\n  div22.classList.add(\"div22\");\r\n\r\n  const div21 = document.createElement(\"div\");\r\n  div21.classList.add(\"div21\");\r\n\r\n  const note13 = document.createElement(\"p\");\r\n  note13.classList.add(\"note13\");\r\n\r\n  div22.append(note13);\r\n  div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n  div21.append(div22);\r\n  spacecenterInner.append(div21);\r\n\r\n  document.querySelector(\".note13\").textContent = \"上方向または下方向のどちらかを入力してください\";\r\n  document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n  const check = document.querySelectorAll(\"[name=check\");\r\n  for(let i = 0; i < 2; i++){\r\n    check[i].addEventListener(\"click\",function(){\r\n      const currentItem = this;\r\n      if(currentItem.checked){\r\n        check[0].checked = false;\r\n        check[1].checked = false;\r\n        currentItem.checked = true;\r\n      };\r\n    });\r\n  };\r\n\r\n  document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",function(){\r\n\r\n    if(check[0].checked){\r\n\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      \r\n\r\n      if(size4 !== \"\" && size5 === \"\"){\r\n\r\n        //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n        if(Number.isNaN(size4Num)){\r\n          const sizeFormError5 = document.createElement(\"p\");\r\n          sizeFormError5.classList.add(\"size-form-error5\");\r\n          div22.append(sizeFormError5);\r\n          document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n         }\r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 上に移動させる距離を指定\r\n        const offsetY = -size4Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX;\r\n        const newY = currentY + offsetY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n        dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n        layer.add(dashedLine7);\r\n        layer.add(dashedLine8);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n         const rectAngleSizeForm30 = document.createElement('input');\r\n         rectAngleSizeForm30.type = \"text\";\r\n         rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n         rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n \r\n         const rectAngleSizeForm31 = document.createElement('input');\r\n         rectAngleSizeForm31.type = \"text\";\r\n         rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n         rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n   \r\n         const rectAngleConfirm12 = document.createElement('button');\r\n         rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n         rectAngleConfirm12.append(\"決定\");\r\n\r\n         const rectAngleConfirm13 = document.createElement('button');\r\n         rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n         rectAngleConfirm13.append(\"完了\");\r\n \r\n         const div24 = document.createElement(\"div\");\r\n         div24.classList.add(\"div24\");\r\n \r\n         const div23 = document.createElement(\"div\");\r\n         div23.classList.add(\"div23\");\r\n \r\n         const note14 = document.createElement(\"p\");\r\n         note14.classList.add(\"note14\");\r\n \r\n         div24.append(note14);\r\n         div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n \r\n         div23.append(div24);\r\n         spacecenterInner.append(div23);\r\n \r\n         document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n         document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",function(){\r\n\r\n          const polygon = new Konva.Line({\r\n            points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n            stroke: 'white', // 線の色\r\n            strokeWidth: 2, // 線の太さ\r\n            closed: true, // 閉じた形状として描画\r\n            fill: 'white', // 塗りつぶし色（透明）\r\n          });\r\n          \r\n          layer.add(polygon);\r\n\r\n          circle1.destroy();\r\n          newRect.destroy();\r\n          newCircle.destroy();\r\n\r\n          while (document.querySelector(\".div23\").lastChild) {\r\n            document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n           }\r\n\r\n         });\r\n\r\n         document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",function(){\r\n\r\n          \r\n           const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n           const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n           const size6Y = Number.parseFloat(size6);\r\n           const size7Y = Number.parseFloat(size7);\r\n           const size6Num = size6Y /1.06;\r\n           const size7Num = size7Y /1.06;\r\n\r\n           if(size6 !== \"\" && size7 === \"\"){\r\n\r\n            if(Number.isNaN(size6Num)){\r\n              const sizeFormError8 = document.createElement(\"p\");\r\n              sizeFormError8.classList.add(\"size-form-error8\");\r\n              div24.append(sizeFormError8);\r\n              document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n      \r\n             const offsetX = size6Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX + offsetX;\r\n             const newY = currentY;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'white', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'white', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n            if(Number.isNaN(size7Num)){\r\n              const sizeFormError9 = document.createElement(\"p\");\r\n              sizeFormError9.classList.add(\"size-form-error9\");\r\n              div24.append(sizeFormError9);\r\n              document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n\r\n             const offsetX = size7Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX - offsetX;\r\n             const newY = currentY;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'white', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'white', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           };\r\n\r\n         });\r\n\r\n\r\n\r\n      }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n        //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n         if(Number.isNaN(size5Num)){\r\n          const sizeFormError6 = document.createElement(\"p\");\r\n          sizeFormError6.classList.add(\"size-form-error6\");\r\n          div22.append(sizeFormError6);\r\n          document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n         };\r\n\r\n         dashedLine6.destroy();\r\n\r\n        // 下に移動させる距離を指定\r\n        const offsetY = size5Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX;\r\n        const newY = currentY + offsetY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n        dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n        layer.add(dashedLine7);\r\n        layer.add(dashedLine8);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n         const rectAngleSizeForm30 = document.createElement('input');\r\n         rectAngleSizeForm30.type = \"text\";\r\n         rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n         rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n \r\n         const rectAngleSizeForm31 = document.createElement('input');\r\n         rectAngleSizeForm31.type = \"text\";\r\n         rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n         rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n   \r\n         const rectAngleConfirm12 = document.createElement('button');\r\n         rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n         rectAngleConfirm12.append(\"決定\");\r\n\r\n         const rectAngleConfirm13 = document.createElement('button');\r\n         rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n         rectAngleConfirm13.append(\"完了\");\r\n \r\n         const div24 = document.createElement(\"div\");\r\n         div24.classList.add(\"div24\");\r\n \r\n         const div23 = document.createElement(\"div\");\r\n         div23.classList.add(\"div23\");\r\n \r\n         const note14 = document.createElement(\"p\");\r\n         note14.classList.add(\"note14\");\r\n \r\n         div24.append(note14);\r\n         div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n \r\n         div23.append(div24);\r\n         spacecenterInner.append(div23);\r\n \r\n         document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n         document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",function(){\r\n\r\n          const polygon = new Konva.Line({\r\n            points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n            stroke: 'blue', // 線の色\r\n            strokeWidth: 2, // 線の太さ\r\n            closed: true, // 閉じた形状として描画\r\n            fill: 'blue', // 塗りつぶし色（透明）\r\n          });\r\n          \r\n          layer.add(polygon);\r\n\r\n          circle1.destroy();\r\n          newRect.destroy();\r\n          newCircle.destroy();\r\n\r\n          while (document.querySelector(\".div23\").lastChild) {\r\n            document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n           }\r\n\r\n         });\r\n\r\n         document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",function(){\r\n\r\n          \r\n           const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n           const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n           const size6Y = Number.parseFloat(size6);\r\n           const size7Y = Number.parseFloat(size7);\r\n           const size6Num = size6Y /1.06;\r\n           const size7Num = size7Y /1.06;\r\n\r\n           if(size6 !== \"\" && size7 === \"\"){\r\n\r\n            if(Number.isNaN(size6Num)){\r\n              const sizeFormError8 = document.createElement(\"p\");\r\n              sizeFormError8.classList.add(\"size-form-error8\");\r\n              div24.append(sizeFormError8);\r\n              document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n      \r\n             const offsetX = size6Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX + offsetX;\r\n             const newY = currentY;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'blue', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'blue', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n            if(Number.isNaN(size7Num)){\r\n              const sizeFormError9 = document.createElement(\"p\");\r\n              sizeFormError9.classList.add(\"size-form-error9\");\r\n              div24.append(sizeFormError9);\r\n              document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n\r\n             const offsetX = size7Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX - offsetX;\r\n             const newY = currentY;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'blue', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'blue', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           };\r\n\r\n         });\r\n\r\n      };\r\n\r\n\r\n\r\n    }else if(check[1].checked){\r\n\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      \r\n\r\n      if(size4 !== \"\" && size5 === \"\"){\r\n\r\n        //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n        if(Number.isNaN(size4Num)){\r\n          const sizeFormError5 = document.createElement(\"p\");\r\n          sizeFormError5.classList.add(\"size-form-error5\");\r\n          div22.append(sizeFormError5);\r\n          document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n         }\r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 上に移動させる距離を指定\r\n        const offsetY = -size4Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX;\r\n        const newY = currentY + offsetY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        //丸い点と四角が垂直に交わる座標\r\n        const intersectionX1 = newCircle.x(); \r\n        const intersectionY1 = newRect.y()+5;\r\n\r\n        //もう一方の丸い点と四角が垂直に交わる座標\r\n        const intersectionX2 = circle1.x(); \r\n        const intersectionY2 = newRect.y()+5;\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        const polygon = new Konva.Line({\r\n          points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n          stroke: 'white', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'white', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n        newCircle.destroy();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n\r\n\r\n      }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n        //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n         if(Number.isNaN(size5Num)){\r\n          const sizeFormError6 = document.createElement(\"p\");\r\n          sizeFormError6.classList.add(\"size-form-error6\");\r\n          div22.append(sizeFormError6);\r\n          document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n         } \r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 上に移動させる距離を指定\r\n        const offsetY = size5Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX;\r\n        const newY = currentY + offsetY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        //丸い点と四角が垂直に交わる座標\r\n        const intersectionX1 = newCircle.x(); \r\n        const intersectionY1 = newRect.y()+5;\r\n\r\n        //もう一方の丸い点と四角が垂直に交わる座標\r\n        const intersectionX2 = circle1.x(); \r\n        const intersectionY2 = newRect.y()+5;\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        const polygon = new Konva.Line({\r\n          points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n          stroke: 'blue', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'blue', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n        newCircle.destroy();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n      };\r\n\r\n\r\n\r\n    }else{\r\n\r\n      const sizeFormError7 = document.createElement(\"p\");\r\n      sizeFormError7.classList.add(\"size-form-error7\");\r\n      div22.append(sizeFormError7);\r\n      document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n    }\r\n\r\n  });\r\n\r\n    };  \r\n\r\n  });\r\n\r\n\r\n  \r\n}\r\n\r\n   \r\n    }\r\n \r\n   \r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceSideTwoPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceSquareClickModule.js":
/*!**************************************************!*\
  !*** ./Public/App/src/SpaceSquareClickModule.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nmodule.exports = function handleClick(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2){\r\n    \r\n  const pointerPos = stage.getPointerPosition();\r\n  const x = pointerPos.x;\r\n  const y = pointerPos.y;\r\n\r\n  // 図形の上辺、左辺、下辺、右辺上でのみ丸い点を追加\r\n  const border = isMouseOnBorder(rectangle, x, y);\r\n  if (border) {\r\n    // クリックした位置に丸い点を追加\r\n    let centerX, centerY;\r\n    switch (border) {\r\n      case 'top':\r\n        centerX = x;\r\n        centerY = rectangle.y();\r\n        break;\r\n      case 'left':\r\n        centerX = rectangle.x();\r\n        centerY = y;\r\n        break;\r\n      case 'bottom':\r\n        centerX = x;\r\n        centerY = rectangle.y() + rectangle.height();\r\n        break;\r\n      case 'right':\r\n        centerX = rectangle.x() + rectangle.width();\r\n        centerY = y;\r\n        break;\r\n    }\r\n\r\n    const dot = new Konva.Circle({\r\n      x: centerX,\r\n      y: centerY,\r\n      radius: 5,\r\n      fill: 'red', // 適宜調整\r\n      draggable: false,\r\n    });\r\n\r\n    // 丸い点が２つを超えたら古い順に削除\r\n    if (dots.length >= 2) {\r\n      const removedDot = dots.shift();\r\n      removedDot.destroy();\r\n    }\r\n\r\n    dots.push(dot);\r\n    layer.add(dot);\r\n    layer.batchDraw(); // レイヤーを再描画する必要があります\r\n\r\n    // 2つの丸い点の間に破線（実線）を描画\r\n    if (dots.length === 2) {\r\n      const startDot = dots[0];\r\n      const endDot = dots[1];\r\n      const startX = startDot.x();\r\n      const startY = startDot.y();\r\n      const endX = endDot.x();\r\n      const endY = endDot.y();\r\n\r\n      if (dashedLine) {\r\n        dashedLine.destroy(); // 既存の破線があれば削除\r\n      }\r\n\r\n      dashedLine = drawDashedLine(startX, startY, endX, endY);\r\n      layer.add(dashedLine);\r\n      layer.batchDraw();\r\n      isDashedLineVisible = true;\r\n\r\n      // 破線の真ん中に四角を表示\r\n      if (midRect) {\r\n        midRect.destroy(); // 既存の四角があれば削除\r\n      }\r\n\r\n      const midX = (startX + endX) / 2;\r\n      const midY = (startY + endY) / 2;\r\n\r\n      midRect = new Konva.Rect({\r\n        x: midX - 5,\r\n        y: midY - 5,\r\n        width: 10,\r\n        height: 10,\r\n        fill: 'red', // 適宜調整\r\n        draggable: false,\r\n      });\r\n\r\n      layer.add(midRect);\r\n    }\r\n  }\r\n \r\n  \r\n  \r\n  \r\n\r\n  if( dots.filter(dot => dot.y() === rectangle.y()).length === 2 ||\r\n      dots.filter(dot => dot.y() === rectangle.y() + rectangle.height()).length === 2 ||\r\n      dots.filter(dot => dot.x() === rectangle.x() + rectangle.width()).length === 2 ||\r\n      dots.filter(dot => dot.x() === rectangle.x()).length === 2 ) {\r\n        \r\n\r\n        \r\n        const  sideTwoPoints  = __webpack_require__(/*! src/SpaceSideTwoPointsModule */ \"./Public/App/src/SpaceSideTwoPointsModule.js\");\r\n\r\n        const sideTwoPoints2 = () =>{\r\n    \r\n          sideTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2)\r\n    \r\n        };\r\n\r\n        sideTwoPoints2();\r\n\r\n\r\n\r\n  } else if(dots.length === 2 && dots[0].y() === rectangle.y() && dots[1].x() === rectangle.x() + rectangle.width() ||\r\n            dots.length === 2 && dots[0].x() === rectangle.x() + rectangle.width() && dots[1].y() === rectangle.y()){\r\n\r\n    const rectAngleSizeForm12 = document.createElement('input');\r\n    rectAngleSizeForm12.type = \"text\";\r\n    rectAngleSizeForm12.classList.add(\"rectAngle-SizeForm12\");\r\n    rectAngleSizeForm12.placeholder = \"上辺丸点の左端からの長さを入力\";\r\n\r\n    const rectAngleSizeForm13 = document.createElement('input');\r\n    rectAngleSizeForm13.type = \"text\";\r\n    rectAngleSizeForm13.classList.add(\"rectAngle-SizeForm13\");\r\n    rectAngleSizeForm13.placeholder = \"上辺丸点の右端からの長さを入力\";\r\n\r\n    const rectAngleSizeForm14 = document.createElement('input');\r\n    rectAngleSizeForm14.type = \"text\";\r\n    rectAngleSizeForm14.classList.add(\"rectAngle-SizeForm14\");\r\n    rectAngleSizeForm14.placeholder = \"右辺丸点の上端からの長さを入力\";\r\n\r\n    const rectAngleSizeForm15 = document.createElement('input');\r\n    rectAngleSizeForm15.type = \"text\";\r\n    rectAngleSizeForm15.classList.add(\"rectAngle-SizeForm15\");\r\n    rectAngleSizeForm15.placeholder = \"右辺丸点の下端からの長さを入力\";\r\n\r\n    const rectAngleConfirm7 = document.createElement('button');\r\n    rectAngleConfirm7.classList.add(\"rectAngle-confirm7\");\r\n    rectAngleConfirm7.append(\"決定\");\r\n\r\n    const div14 = document.createElement(\"div\");\r\n    div14.classList.add(\"div14\");\r\n\r\n    const div13 = document.createElement(\"div\");\r\n    div13.classList.add(\"div13\");\r\n\r\n    const note5 = document.createElement(\"p\");\r\n    note5.classList.add(\"note5\");\r\n\r\n    const note6 = document.createElement(\"p\");\r\n    note6.classList.add(\"note6\");\r\n\r\n    div14.append(note5,note6);\r\n    div14.append(rectAngleSizeForm12,rectAngleSizeForm13,rectAngleSizeForm14,rectAngleSizeForm15,rectAngleConfirm7);\r\n\r\n    div13.append(div14);\r\n    spacecenterInner.append(div13);\r\n\r\n    document.querySelector(\".note5\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n    document.querySelector(\".note6\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n\r\n    document.querySelector(\".rectAngle-confirm7\").addEventListener(\"click\",function(){\r\n\r\n      const size2 =document.querySelector(\".rectAngle-SizeForm12\").value;\r\n      const size3 =document.querySelector(\".rectAngle-SizeForm13\").value;\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm14\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm15\").value;\r\n      const size2Y = Number.parseFloat(size2);\r\n      const size3Y = Number.parseFloat(size3);\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size2Num = size2Y /1.06;\r\n      const size3Num = size3Y /1.06;\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      console.log(size2Num)\r\n      console.log(size3Num)\r\n      console.log(size4Num)\r\n      console.log(size5Num)\r\n      \r\n      if (dots[0].y() === rectangle.y() && dots[1].x() === rectangle.x() + rectangle.width()) {\r\n      \r\n      if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n      if(Number.isNaN(size4Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length2;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div13\").lastChild) {\r\n      document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n     }\r\n\r\n\r\n\r\n\r\n    }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length2;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div13\").lastChild) {\r\n      document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size4Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div13\").lastChild) {\r\n      document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div13\").lastChild) {\r\n      document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n     }\r\n\r\n\r\n\r\n    };\r\n\r\n  }else if (dots[0].x() === rectangle.x() + rectangle.width() && dots[1].y() === rectangle.y()) {\r\n\r\n    if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n      if(Number.isNaN(size4Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length2;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div13\").lastChild) {\r\n      document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n     }\r\n\r\n\r\n\r\n\r\n    }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length2;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div13\").lastChild) {\r\n      document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size4Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div13\").lastChild) {\r\n      document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div13\").lastChild) {\r\n      document.querySelector(\".div13\").removeChild(document.querySelector(\".div13\").lastChild);\r\n     }\r\n\r\n\r\n\r\n    };\r\n\r\n  }\r\n\r\n    });\r\n\r\n\r\n  } else if(dots.length === 2 && dots[0].y() === rectangle.y() && dots[1].x() === rectangle.x() ||\r\n            dots.length === 2 && dots[0].x() === rectangle.x() && dots[1].y() === rectangle.y()){\r\n\r\n    const rectAngleSizeForm16 = document.createElement('input');\r\n    rectAngleSizeForm16.type = \"text\";\r\n    rectAngleSizeForm16.classList.add(\"rectAngle-SizeForm16\");\r\n    rectAngleSizeForm16.placeholder = \"上辺丸点の左端からの長さを入力\";\r\n\r\n    const rectAngleSizeForm17 = document.createElement('input');\r\n    rectAngleSizeForm17.type = \"text\";\r\n    rectAngleSizeForm17.classList.add(\"rectAngle-SizeForm17\");\r\n    rectAngleSizeForm17.placeholder = \"上辺丸点の右端からの長さを入力\";\r\n\r\n    const rectAngleSizeForm18 = document.createElement('input');\r\n    rectAngleSizeForm18.type = \"text\";\r\n    rectAngleSizeForm18.classList.add(\"rectAngle-SizeForm18\");\r\n    rectAngleSizeForm18.placeholder = \"左辺丸点の上端からの長さを入力\";\r\n\r\n    const rectAngleSizeForm19 = document.createElement('input');\r\n    rectAngleSizeForm19.type = \"text\";\r\n    rectAngleSizeForm19.classList.add(\"rectAngle-SizeForm19\");\r\n    rectAngleSizeForm19.placeholder = \"左辺丸点の下端からの長さを入力\";\r\n\r\n    const rectAngleConfirm8 = document.createElement('button');\r\n    rectAngleConfirm8.classList.add(\"rectAngle-confirm8\");\r\n    rectAngleConfirm8.append(\"決定\");\r\n\r\n    const div16 = document.createElement(\"div\");\r\n    div16.classList.add(\"div16\");\r\n\r\n    const div15 = document.createElement(\"div\");\r\n    div15.classList.add(\"div15\");\r\n\r\n    const note7 = document.createElement(\"p\");\r\n    note7.classList.add(\"note7\");\r\n\r\n    const note8 = document.createElement(\"p\");\r\n    note8.classList.add(\"note8\");\r\n\r\n    div16.append(note7,note8);\r\n    div16.append(rectAngleSizeForm16,rectAngleSizeForm17,rectAngleSizeForm18,rectAngleSizeForm19,rectAngleConfirm8);\r\n\r\n    div15.append(div16);\r\n    spacecenterInner.append(div15);\r\n\r\n    document.querySelector(\".note7\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n    document.querySelector(\".note8\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n\r\n    document.querySelector(\".rectAngle-confirm8\").addEventListener(\"click\",function(){\r\n\r\n      const size2 =document.querySelector(\".rectAngle-SizeForm16\").value;\r\n      const size3 =document.querySelector(\".rectAngle-SizeForm17\").value;\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm18\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm19\").value;\r\n      const size2Y = Number.parseFloat(size2);\r\n      const size3Y = Number.parseFloat(size3);\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size2Num = size2Y /1.06;\r\n      const size3Num = size3Y /1.06;\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      console.log(size2Num)\r\n      console.log(size3Num)\r\n      console.log(size4Num)\r\n      console.log(size5Num)\r\n      \r\n      if (dots[0].y() === rectangle.y() && dots[1].x() === rectangle.x()) {\r\n      \r\n      if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n      if(Number.isNaN(size4Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length2;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div15\").lastChild) {\r\n      document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n     }\r\n\r\n\r\n\r\n\r\n    }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length2;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div15\").lastChild) {\r\n      document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size4Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div15\").lastChild) {\r\n      document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div15\").lastChild) {\r\n      document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n     }\r\n\r\n\r\n\r\n    };\r\n\r\n  }else if (dots[0].x() === rectangle.x() && dots[1].y() === rectangle.y()) {\r\n\r\n    if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n      if(Number.isNaN(size4Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length2;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div15\").lastChild) {\r\n      document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n     }\r\n\r\n\r\n\r\n\r\n    }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length2;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div15\").lastChild) {\r\n      document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size4Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div15\").lastChild) {\r\n      document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div15\").lastChild) {\r\n      document.querySelector(\".div15\").removeChild(document.querySelector(\".div15\").lastChild);\r\n     }\r\n\r\n\r\n\r\n    };\r\n\r\n  }\r\n\r\n    });\r\n\r\n  } else if(dots.length === 2 && dots[0].x() === rectangle.x() + rectangle.width() && dots[1].y() === rectangle.y() + rectangle.height() ||\r\n            dots.length === 2 && dots[0].y() === rectangle.y() + rectangle.height() && dots[1].x() === rectangle.x() + rectangle.width()){\r\n\r\n    const rectAngleSizeForm20 = document.createElement('input');\r\n    rectAngleSizeForm20.type = \"text\";\r\n    rectAngleSizeForm20.classList.add(\"rectAngle-SizeForm20\");\r\n    rectAngleSizeForm20.placeholder = \"右辺丸点の上端からの長さを入力\";\r\n\r\n    const rectAngleSizeForm21 = document.createElement('input');\r\n    rectAngleSizeForm21.type = \"text\";\r\n    rectAngleSizeForm21.classList.add(\"rectAngle-SizeForm21\");\r\n    rectAngleSizeForm21.placeholder = \"右辺丸点の下端からの長さを入力\";\r\n\r\n    const rectAngleSizeForm22 = document.createElement('input');\r\n    rectAngleSizeForm22.type = \"text\";\r\n    rectAngleSizeForm22.classList.add(\"rectAngle-SizeForm22\");\r\n    rectAngleSizeForm22.placeholder = \"下辺丸点の右端からの長さを入力\";\r\n\r\n    const rectAngleSizeForm23 = document.createElement('input');\r\n    rectAngleSizeForm23.type = \"text\";\r\n    rectAngleSizeForm23.classList.add(\"rectAngle-SizeForm23\");\r\n    rectAngleSizeForm23.placeholder = \"下辺丸点の左端からの長さを入力\";\r\n\r\n    const rectAngleConfirm9 = document.createElement('button');\r\n    rectAngleConfirm9.classList.add(\"rectAngle-confirm9\");\r\n    rectAngleConfirm9.append(\"決定\");\r\n\r\n    const div18 = document.createElement(\"div\");\r\n    div18.classList.add(\"div18\");\r\n\r\n    const div17 = document.createElement(\"div\");\r\n    div17.classList.add(\"div17\");\r\n\r\n    const note9 = document.createElement(\"p\");\r\n    note9.classList.add(\"note9\");\r\n\r\n    const note10 = document.createElement(\"p\");\r\n    note10.classList.add(\"note10\");\r\n\r\n    div18.append(note9,note10);\r\n    div18.append(rectAngleSizeForm20,rectAngleSizeForm21,rectAngleSizeForm22,rectAngleSizeForm23,rectAngleConfirm9);\r\n\r\n    div17.append(div18);\r\n    spacecenterInner.append(div17);\r\n\r\n    document.querySelector(\".note9\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n    document.querySelector(\".note10\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n\r\n    document.querySelector(\".rectAngle-confirm9\").addEventListener(\"click\",function(){\r\n\r\n      const size2 =document.querySelector(\".rectAngle-SizeForm20\").value;\r\n      const size3 =document.querySelector(\".rectAngle-SizeForm21\").value;\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm22\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm23\").value;\r\n      const size2Y = Number.parseFloat(size2);\r\n      const size3Y = Number.parseFloat(size3);\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size2Num = size2Y /1.06;\r\n      const size3Num = size3Y /1.06;\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      console.log(size2Num)\r\n      console.log(size3Num)\r\n      console.log(size4Num)\r\n      console.log(size5Num)\r\n      \r\n      if (dots[0].y() === rectangle.y() + rectangle.height() && dots[1].x() === rectangle.x() + rectangle.width()) {\r\n      \r\n      if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n      if(Number.isNaN(size4Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n     \r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length3;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length2;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div17\").lastChild) {\r\n      document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n     }\r\n\r\n\r\n\r\n\r\n    }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length3;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length2;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div17\").lastChild) {\r\n      document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size4Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length3;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length2;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div17\").lastChild) {\r\n      document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length3;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length2;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div17\").lastChild) {\r\n      document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n     }\r\n\r\n\r\n\r\n    };\r\n\r\n  }else if (dots[0].x() === rectangle.x() + rectangle.width() && dots[1].y() === rectangle.y() + rectangle.height()) {\r\n\r\n    if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n      if(Number.isNaN(size4Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n     \r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length3;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length2;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div17\").lastChild) {\r\n      document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n     }\r\n\r\n\r\n\r\n\r\n    }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length3;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length2;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div17\").lastChild) {\r\n      document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size4Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length3;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length2;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div17\").lastChild) {\r\n      document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length3;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length2;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div17\").lastChild) {\r\n      document.querySelector(\".div17\").removeChild(document.querySelector(\".div17\").lastChild);\r\n     }\r\n\r\n\r\n\r\n    };\r\n\r\n  }\r\n\r\n    });\r\n    \r\n  } else if(dots.length === 2 && dots[0].y() === rectangle.y() + rectangle.height() && dots[1].x() === rectangle.x() ||\r\n            dots.length === 2 && dots[0].x() === rectangle.x() && dots[1].y() === rectangle.y() + rectangle.height()){\r\n\r\n    const rectAngleSizeForm24 = document.createElement('input');\r\n    rectAngleSizeForm24.type = \"text\";\r\n    rectAngleSizeForm24.classList.add(\"rectAngle-SizeForm24\");\r\n    rectAngleSizeForm24.placeholder = \"下辺丸点の右端からの長さを入力\";\r\n\r\n    const rectAngleSizeForm25 = document.createElement('input');\r\n    rectAngleSizeForm25.type = \"text\";\r\n    rectAngleSizeForm25.classList.add(\"rectAngle-SizeForm25\");\r\n    rectAngleSizeForm25.placeholder = \"下辺丸点の左端からの長さを入力\";\r\n\r\n    const rectAngleSizeForm26 = document.createElement('input');\r\n    rectAngleSizeForm26.type = \"text\";\r\n    rectAngleSizeForm26.classList.add(\"rectAngle-SizeForm26\");\r\n    rectAngleSizeForm26.placeholder = \"左辺丸点の上端からの長さを入力\";\r\n\r\n    const rectAngleSizeForm27 = document.createElement('input');\r\n    rectAngleSizeForm27.type = \"text\";\r\n    rectAngleSizeForm27.classList.add(\"rectAngle-SizeForm27\");\r\n    rectAngleSizeForm27.placeholder = \"左辺丸点の下端からの長さを入力\";\r\n\r\n    const rectAngleConfirm10 = document.createElement('button');\r\n    rectAngleConfirm10.classList.add(\"rectAngle-confirm10\");\r\n    rectAngleConfirm10.append(\"決定\");\r\n\r\n    const div20 = document.createElement(\"div\");\r\n    div20.classList.add(\"div20\");\r\n\r\n    const div19 = document.createElement(\"div\");\r\n    div19.classList.add(\"div19\");\r\n\r\n    const note11 = document.createElement(\"p\");\r\n    note11.classList.add(\"note11\");\r\n\r\n    const note12 = document.createElement(\"p\");\r\n    note12.classList.add(\"note12\");\r\n\r\n    div20.append(note11,note12);\r\n    div20.append(rectAngleSizeForm24,rectAngleSizeForm25,rectAngleSizeForm26,rectAngleSizeForm27,rectAngleConfirm10);\r\n\r\n    div19.append(div20);\r\n    spacecenterInner.append(div19);\r\n\r\n    document.querySelector(\".note11\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n    document.querySelector(\".note12\").textContent = \"※上端または下端のどちらかを入力してください※\";\r\n\r\n    document.querySelector(\".rectAngle-confirm10\").addEventListener(\"click\",function(){\r\n\r\n      const size2 =document.querySelector(\".rectAngle-SizeForm24\").value;\r\n      const size3 =document.querySelector(\".rectAngle-SizeForm25\").value;\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm26\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm27\").value;\r\n      const size2Y = Number.parseFloat(size2);\r\n      const size3Y = Number.parseFloat(size3);\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size2Num = size2Y /1.06;\r\n      const size3Num = size3Y /1.06;\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      console.log(size2Num)\r\n      console.log(size3Num)\r\n      console.log(size4Num)\r\n      console.log(size5Num)\r\n      \r\n      if (dots[0].y() === rectangle.y() + rectangle.height() && dots[1].x() === rectangle.x()) {\r\n      \r\n      if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n      if(Number.isNaN(size4Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n     \r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length2;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div19\").lastChild) {\r\n      document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n     }\r\n\r\n\r\n\r\n\r\n    }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length2;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div19\").lastChild) {\r\n      document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size4Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div19\").lastChild) {\r\n      document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[0].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[1].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[1].x(); \r\n       const intersectionY1 = dots[0].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div19\").lastChild) {\r\n      document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n     }\r\n\r\n\r\n\r\n    };\r\n\r\n  }else if (dots[0].x() === rectangle.x() && dots[1].y() === rectangle.y() + rectangle.height()) {\r\n\r\n    if(size2 !== \"\" && size3 === \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n      if(Number.isNaN(size4Num)){\r\n\r\n       const sizeFormError3 = document.createElement(\"p\");\r\n       sizeFormError3.classList.add(\"size-form-error3\");\r\n       div6.append(sizeFormError3);\r\n       document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n      }\r\n        console.log(\"A\");\r\n\r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n     \r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length2;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div19\").lastChild) {\r\n      document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n     }\r\n\r\n\r\n\r\n\r\n    }else if(size2 !== \"\" && size3 === \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size2Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size2Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newLeftCircleX = rectangle.x() + length2;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newLeftCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div19\").lastChild) {\r\n      document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 !== \"\" && size5 === \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size4Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size4Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n     // 図形の右辺の上端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newTopCircleX = rectangle.y() + length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newTopCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div19\").lastChild) {\r\n      document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n     }\r\n\r\n    }else if(size2 === \"\" && size3 !== \"\" && size4 === \"\" && size5 !== \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n\r\n       if(Number.isNaN(size5Num)){\r\n\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError3);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";  \r\n       }\r\n         console.log(\"A\");\r\n \r\n     // 長さを格納する変数\r\n     let length2 = size3Num;\r\n     let length3 = size5Num;  \r\n\r\n     midRect.destroy();\r\n     dashedLine.destroy();\r\n\r\n     // 図形の上辺の右端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n     const newRightCircleX = rectangle.x() + rectangle.width() - length2;\r\n     // 図形の右辺の下端から指定した距離の位置を計算して新しい上の丸い点のX座標を設定\r\n     const newBottomCircleX = rectangle.y() + rectangle.height() - length3;\r\n\r\n     // 左の丸い点の座標を更新\r\n     dots[1].x(newRightCircleX);\r\n     layer.draw();\r\n\r\n     // 右の丸い点の座標を更新\r\n     dots[0].y(newBottomCircleX);\r\n     layer.draw();\r\n\r\n     \r\n       // 丸い点の座標を取得\r\n       const x1 = dots[0].x();\r\n       const y1 = dots[0].y();\r\n\r\n       // 丸い点の座標を取得\r\n       const x2 = dots[1].x();\r\n       const y2 = dots[1].y();\r\n\r\n       const intersectionX1 = dots[0].x(); \r\n       const intersectionY1 = dots[1].y();\r\n\r\n\r\n\r\n       const polygon = new Konva.Line({\r\n        points: [x1,y1,intersectionX1,intersectionY1,x2,y2],\r\n        stroke: 'white', // 線の色\r\n        strokeWidth: 2, // 線の太さ\r\n        closed: true, // 閉じた形状として描画\r\n        fill: 'white', // 塗りつぶし色（透明）\r\n      });\r\n      \r\n       layer.add(polygon);\r\n       dots[0].destroy();\r\n       dots[1].destroy();\r\n       layer.draw();\r\n\r\n    \r\n     while (document.querySelector(\".div19\").lastChild) {\r\n      document.querySelector(\".div19\").removeChild(document.querySelector(\".div19\").lastChild);\r\n     }\r\n\r\n\r\n\r\n    };\r\n\r\n  }\r\n\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceSquareClickModule.js?");

/***/ }),

/***/ "./Public/App/src/SpaceTopTwoPointsModule.js":
/*!***************************************************!*\
  !*** ./Public/App/src/SpaceTopTwoPointsModule.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = function topTwoPoints(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length){\r\n\r\n  const rectAngleSizeForm4 = document.createElement('input');\r\n  rectAngleSizeForm4.type = \"text\";\r\n  rectAngleSizeForm4.classList.add(\"rectAngle-SizeForm4\");\r\n  rectAngleSizeForm4.placeholder = \"右端からの長さを入力\";\r\n\r\n  const rectAngleSizeForm5 = document.createElement('input');\r\n  rectAngleSizeForm5.type = \"text\";\r\n  rectAngleSizeForm5.classList.add(\"rectAngle-SizeForm5\");\r\n  rectAngleSizeForm5.placeholder = \"左端からの長さを入力\";\r\n\r\n  const rectAngleConfirm3 = document.createElement('button');\r\n  rectAngleConfirm3.classList.add(\"rectAngle-confirm3\");\r\n  rectAngleConfirm3.append(\"決定\");\r\n\r\n  const div6 = document.createElement(\"div\");\r\n  div6.classList.add(\"div6\");\r\n\r\n  const div5 = document.createElement(\"div\");\r\n  div5.classList.add(\"div5\");\r\n\r\n  const note1 = document.createElement(\"p\");\r\n  note1.classList.add(\"note1\");\r\n\r\n  div6.append(note1);\r\n  div6.append(rectAngleSizeForm4,rectAngleSizeForm5,rectAngleConfirm3);\r\n\r\n  div5.append(div6);\r\n  spacecenterInner.append(div5);\r\n\r\n  console.log(div5);\r\n\r\n  document.querySelector(\".note1\").textContent = \"※右端または左端のどちらかを入力してください※\";\r\n\r\n  // 四角の中心座標を取得\r\n  const midRectX = midRect.x() + midRect.width() / 2;\r\n  const midRectY = midRect.y() + midRect.height() / 2;\r\n\r\n  // 横破線を描画する座標を計算\r\n  const dashedLineX1 = midRectX - length / 2;\r\n  const dashedLineY1 = midRectY;\r\n  const dashedLineX2 = midRectX + length / 2;\r\n  const dashedLineY2 = midRectY;\r\n\r\n  // 破線を作成\r\n  const dashedLine5 = new Konva.Line({\r\n    points: [dashedLineX1, dashedLineY1, dashedLineX2, dashedLineY2],\r\n    stroke: 'red',\r\n    strokeWidth: 2,\r\n    dash: [5, 10], // 破線のパターンを指定（length変数の値を使用）\r\n  });\r\n\r\n  // 丸い点を作成\r\n  const circle1 = new Konva.Circle({\r\n    x: dashedLineX1,\r\n    y: dashedLineY1,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  const circle2 = new Konva.Circle({\r\n    x: dashedLineX2,\r\n    y: dashedLineY2,\r\n    radius: 5,\r\n    fill: 'red',\r\n  });\r\n\r\n  // レイヤーに追加\r\n  \r\n  layer.add(dashedLine5, circle1, circle2, midRect);\r\n  stage.add(layer);\r\n\r\n  document.querySelector(\".rectAngle-confirm3\").addEventListener(\"click\",handleConfirm3);\r\n\r\n  document.querySelector(\".rectAngle-confirm2\").removeEventListener(\"click\",handleConfirm2);\r\n      \r\n  while (document.querySelector(\".div3\").lastChild) {\r\n    document.querySelector(\".div3\").removeChild(document.querySelector(\".div3\").lastChild);\r\n    console.log(\"while0\");\r\n\r\n   }\r\n\r\n   document.querySelector(\".div3\").parentNode.removeChild(document.querySelector(\".div3\"));\r\n   \r\n\r\n  function handleConfirm3(){\r\n    \r\n    \r\n\r\n    const size2 =document.querySelector(\".rectAngle-SizeForm4\").value;\r\n    const size3 =document.querySelector(\".rectAngle-SizeForm5\").value;\r\n    const size2Y = Number.parseFloat(size2);\r\n    const size3Y = Number.parseFloat(size3);\r\n    const size2Num = size2Y /1.06;\r\n    const size3Num = size3Y /1.06;\r\n    console.log(size2Num)\r\n    console.log(size3Num)\r\n    \r\n    \r\n    if(size2 !== \"\" && size3 === \"\"){\r\n\r\n      const  rightLength  = __webpack_require__(/*! src/SpaceRightLengthModule */ \"./Public/App/src/SpaceRightLengthModule.js\");\r\n      const rightLength2 = () =>{\r\n  \r\n        rightLength(stage,dots,rectangle,isMouseOnBorder,layer,dashedLine,drawDashedLine,midRect,spacecenterInner,handleClick2,handleConfirm2,length,size2Num,dashedLine5, circle1, circle2,handleConfirm3)\r\n  \r\n      };\r\n  \r\n      rightLength2();\r\n\r\n    } else if(size3 !== \"\" && size2 === \"\"){\r\n\r\n      if(Number.isNaN(size3Num)){\r\n        const sizeFormError3 = document.createElement(\"p\");\r\n        sizeFormError3.classList.add(\"size-form-error3\");\r\n        div6.append(sizeFormError);\r\n        document.querySelector(\".size-form-error3\").textContent = \"※数値のみ入力してください※\";\r\n       } \r\n\r\n        // 長さを格納する変数\r\n   let length2 = size3Num; \r\n\r\n   circle2.destroy();\r\n   midRect.destroy();\r\n   dashedLine5.destroy();\r\n\r\n   // 図形の上辺の左端から指定した距離の位置を計算して新しい左の丸い点のX座標を設定\r\n   const newLeftCircleX = rectangle.x() + length2;\r\n\r\n   // 左の丸い点の座標を更新\r\n   circle1.x(newLeftCircleX);\r\n   layer.draw();\r\n\r\n   \r\n     // 丸い点の座標を取得\r\n     const x = circle1.x();\r\n     const y = circle1.y();\r\n\r\n     // 破線を作成\r\n     const dashedLine6 = new Konva.Line({\r\n       points: [x, y, x + length, y], // 例としてX座標から100ピクセル右に破線を表示\r\n       stroke: 'red',\r\n       strokeWidth: 2,\r\n       lineCap: 'round',\r\n       dash: [5, 10],\r\n     });\r\n\r\n     // 新しい丸い点を作成\r\n     const newCircle = new Konva.Circle({\r\n       x: dashedLine6.points()[2], // 破線の一番右端のX座標を取得\r\n       y: dashedLine6.points()[3], // 破線の一番右端のY座標を取得\r\n       radius: 5,\r\n       fill: 'red',\r\n     });\r\n\r\n\r\n     const x2 = newCircle.x();\r\n     const y2 = newCircle.y();\r\n\r\n     const newRectX = (x + x2) / 2;\r\n     const newRectY = (y + y2) / 2;\r\n     const newRect = new Konva.Rect({\r\n       x: newRectX - 5, // 四角の幅と高さを考慮して調整\r\n       y: newRectY - 5,\r\n       width: 10,\r\n       height: 10,\r\n       fill: 'red',\r\n     });\r\n\r\n     layer.add(dashedLine6);\r\n     layer.add(newCircle); \r\n     layer.add(newRect);\r\n     layer.draw();\r\n  \r\n\r\n   while (document.querySelector(\".div5\").lastChild) {\r\n    document.querySelector(\".div5\").removeChild(document.querySelector(\".div5\").lastChild);\r\n   }\r\n\r\n  const paturnText = document.createElement('p');\r\n  paturnText.classList.add(\"paturn-text\");\r\n\r\n  const check1 = document.createElement('input');\r\n  check1.type = \"checkbox\";\r\n  check1.classList.add(\"check1\");\r\n  check1.name = \"check\";\r\n\r\n  const check2 = document.createElement('input');\r\n  check2.type = \"checkbox\";\r\n  check2.classList.add(\"check2\");\r\n  check2.name = \"check\";\r\n\r\n  const paturn1 = document.createElement('img');\r\n  paturn1.src = \"/images/paturn1.png\";\r\n  paturn1.classList.add(\"paturn1\");\r\n\r\n  const paturn2 = document.createElement('img');\r\n  paturn2.src = \"/images/paturn2.png\";\r\n  paturn2.classList.add(\"paturn2\");\r\n\r\n  const rectAngleSizeForm28 = document.createElement('input');\r\n  rectAngleSizeForm28.type = \"text\";\r\n  rectAngleSizeForm28.classList.add(\"rectAngle-SizeForm28\");\r\n  rectAngleSizeForm28.placeholder = \"上方向に伸ばす長さを入力\";\r\n\r\n  const rectAngleSizeForm29 = document.createElement('input');\r\n  rectAngleSizeForm29.type = \"text\";\r\n  rectAngleSizeForm29.classList.add(\"rectAngle-SizeForm29\");\r\n  rectAngleSizeForm29.placeholder = \"下方向に縮める長さを入力\";\r\n\r\n  const rectAngleConfirm11 = document.createElement('button');\r\n  rectAngleConfirm11.classList.add(\"rectAngle-confirm11\");\r\n  rectAngleConfirm11.append(\"決定\");\r\n\r\n  const div22 = document.createElement(\"div\");\r\n  div22.classList.add(\"div22\");\r\n\r\n  const div21 = document.createElement(\"div\");\r\n  div21.classList.add(\"div21\");\r\n\r\n  const note13 = document.createElement(\"p\");\r\n  note13.classList.add(\"note13\");\r\n\r\n  div22.append(note13);\r\n  div22.append(paturnText,check1,paturn1,check2,paturn2,rectAngleSizeForm28,rectAngleSizeForm29,rectAngleConfirm11);\r\n\r\n  div21.append(div22);\r\n  spacecenterInner.append(div21);\r\n\r\n  document.querySelector(\".note13\").textContent = \"上方向または下方向のどちらかを入力してください\";\r\n  document.querySelector(\".paturn-text\").textContent = \"伸縮パターンを選択後、長さを入力してください\";\r\n\r\n  const check = document.querySelectorAll(\"[name=check\");\r\n  for(let i = 0; i < 2; i++){\r\n    check[i].addEventListener(\"click\",function(){\r\n      const currentItem = this;\r\n      if(currentItem.checked){\r\n        check[0].checked = false;\r\n        check[1].checked = false;\r\n        currentItem.checked = true;\r\n      };\r\n    });\r\n  };\r\n\r\n  document.querySelector(\".rectAngle-confirm11\").addEventListener(\"click\",function(){\r\n\r\n    if(check[0].checked){\r\n\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      \r\n\r\n      if(size4 !== \"\" && size5 === \"\"){\r\n\r\n        //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を青色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を青色にする\r\n\r\n        if(Number.isNaN(size4Num)){\r\n          const sizeFormError5 = document.createElement(\"p\");\r\n          sizeFormError5.classList.add(\"size-form-error5\");\r\n          div22.append(sizeFormError5);\r\n          document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n         }\r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 上に移動させる距離を指定\r\n        const offsetY = -size4Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX;\r\n        const newY = currentY + offsetY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n        dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n        layer.add(dashedLine7);\r\n        layer.add(dashedLine8);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n         const rectAngleSizeForm30 = document.createElement('input');\r\n         rectAngleSizeForm30.type = \"text\";\r\n         rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n         rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n \r\n         const rectAngleSizeForm31 = document.createElement('input');\r\n         rectAngleSizeForm31.type = \"text\";\r\n         rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n         rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n   \r\n         const rectAngleConfirm12 = document.createElement('button');\r\n         rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n         rectAngleConfirm12.append(\"決定\");\r\n\r\n         const rectAngleConfirm13 = document.createElement('button');\r\n         rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n         rectAngleConfirm13.append(\"完了\");\r\n \r\n         const div24 = document.createElement(\"div\");\r\n         div24.classList.add(\"div24\");\r\n \r\n         const div23 = document.createElement(\"div\");\r\n         div23.classList.add(\"div23\");\r\n \r\n         const note14 = document.createElement(\"p\");\r\n         note14.classList.add(\"note14\");\r\n \r\n         div24.append(note14);\r\n         div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n \r\n         div23.append(div24);\r\n         spacecenterInner.append(div23);\r\n \r\n         document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n         document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",function(){\r\n\r\n          const polygon = new Konva.Line({\r\n            points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n            stroke: 'blue', // 線の色\r\n            strokeWidth: 2, // 線の太さ\r\n            closed: true, // 閉じた形状として描画\r\n            fill: 'blue', // 塗りつぶし色（透明）\r\n          });\r\n          \r\n          layer.add(polygon);\r\n\r\n          circle1.destroy();\r\n          newRect.destroy();\r\n          newCircle.destroy();\r\n\r\n          while (document.querySelector(\".div23\").lastChild) {\r\n            document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n           }\r\n\r\n         });\r\n\r\n         document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",function(){\r\n\r\n          \r\n           const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n           const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n           const size6Y = Number.parseFloat(size6);\r\n           const size7Y = Number.parseFloat(size7);\r\n           const size6Num = size6Y /1.06;\r\n           const size7Num = size7Y /1.06;\r\n\r\n           if(size6 !== \"\" && size7 === \"\"){\r\n\r\n            if(Number.isNaN(size6Num)){\r\n              const sizeFormError8 = document.createElement(\"p\");\r\n              sizeFormError8.classList.add(\"size-form-error8\");\r\n              div24.append(sizeFormError8);\r\n              document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n      \r\n             const offsetX = size6Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX + offsetX;\r\n             const newY = currentY;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'blue', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'blue', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n            if(Number.isNaN(size7Num)){\r\n              const sizeFormError9 = document.createElement(\"p\");\r\n              sizeFormError9.classList.add(\"size-form-error9\");\r\n              div24.append(sizeFormError9);\r\n              document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n\r\n             const offsetX = size7Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX - offsetX;\r\n             const newY = currentY;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'blue', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'blue', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           };\r\n\r\n         });\r\n\r\n\r\n\r\n      }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n        //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、２つの丸い点と四角を破線で繋ぐ。そしてwhileでフォームを消し、新たなフォームを作成する。新フォームで完了を押せば２つの丸い点の座標と四角の座標の内側（破線の内側）を白色にする。四角を右、左方向にずらすの２つのフォームをif文で２パターン化し（右方向を入力して決定を押すパターンとその逆）入力した数値の長さだけ四角を移動させ、破線の内側の色を白色にする\r\n\r\n         if(Number.isNaN(size5Num)){\r\n          const sizeFormError6 = document.createElement(\"p\");\r\n          sizeFormError6.classList.add(\"size-form-error6\");\r\n          div22.append(sizeFormError6);\r\n          document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n         };\r\n\r\n         dashedLine6.destroy();\r\n\r\n        // 下に移動させる距離を指定\r\n        const offsetY = size5Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX;\r\n        const newY = currentY + offsetY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        dashedLine7 = drawDashedLine(circleX1,circleY1,midRectX1,midRectY1);\r\n        dashedLine8 = drawDashedLine(midRectX1,midRectY1,circleX2,circleY2);\r\n        layer.add(dashedLine7);\r\n        layer.add(dashedLine8);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n         const rectAngleSizeForm30 = document.createElement('input');\r\n         rectAngleSizeForm30.type = \"text\";\r\n         rectAngleSizeForm30.classList.add(\"rectAngle-SizeForm30\");\r\n         rectAngleSizeForm30.placeholder = \"四角を右方向に動かす場合はその長さを入力\";\r\n \r\n         const rectAngleSizeForm31 = document.createElement('input');\r\n         rectAngleSizeForm31.type = \"text\";\r\n         rectAngleSizeForm31.classList.add(\"rectAngle-SizeForm31\");\r\n         rectAngleSizeForm31.placeholder = \"四角を左方向に動かす場合はその長さを入力\";\r\n   \r\n         const rectAngleConfirm12 = document.createElement('button');\r\n         rectAngleConfirm12.classList.add(\"rectAngle-confirm12\");\r\n         rectAngleConfirm12.append(\"決定\");\r\n\r\n         const rectAngleConfirm13 = document.createElement('button');\r\n         rectAngleConfirm13.classList.add(\"rectAngle-confirm13\");\r\n         rectAngleConfirm13.append(\"完了\");\r\n \r\n         const div24 = document.createElement(\"div\");\r\n         div24.classList.add(\"div24\");\r\n \r\n         const div23 = document.createElement(\"div\");\r\n         div23.classList.add(\"div23\");\r\n \r\n         const note14 = document.createElement(\"p\");\r\n         note14.classList.add(\"note14\");\r\n \r\n         div24.append(note14);\r\n         div24.append(rectAngleSizeForm30,rectAngleSizeForm31,rectAngleConfirm12,rectAngleConfirm13);\r\n \r\n         div23.append(div24);\r\n         spacecenterInner.append(div23);\r\n \r\n         document.querySelector(\".note14\").textContent = \"上記不要の場合はこちら\";\r\n\r\n\r\n         document.querySelector(\".rectAngle-confirm13\").addEventListener(\"click\",function(){\r\n\r\n          const polygon = new Konva.Line({\r\n            points: [circleX1, circleY1,  midRectX1, midRectY1, circleX2, circleY2],\r\n            stroke: 'white', // 線の色\r\n            strokeWidth: 2, // 線の太さ\r\n            closed: true, // 閉じた形状として描画\r\n            fill: 'white', // 塗りつぶし色（透明）\r\n          });\r\n          \r\n          layer.add(polygon);\r\n\r\n          circle1.destroy();\r\n          newRect.destroy();\r\n          newCircle.destroy();\r\n\r\n          while (document.querySelector(\".div23\").lastChild) {\r\n            document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n           }\r\n\r\n         });\r\n\r\n         document.querySelector(\".rectAngle-confirm12\").addEventListener(\"click\",function(){\r\n\r\n          \r\n           const size6 =document.querySelector(\".rectAngle-SizeForm30\").value;\r\n           const size7 =document.querySelector(\".rectAngle-SizeForm31\").value;\r\n           const size6Y = Number.parseFloat(size6);\r\n           const size7Y = Number.parseFloat(size7);\r\n           const size6Num = size6Y /1.06;\r\n           const size7Num = size7Y /1.06;\r\n\r\n           if(size6 !== \"\" && size7 === \"\"){\r\n\r\n            if(Number.isNaN(size6Num)){\r\n              const sizeFormError8 = document.createElement(\"p\");\r\n              sizeFormError8.classList.add(\"size-form-error8\");\r\n              div24.append(sizeFormError8);\r\n              document.querySelector(\".size-form-error8\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n      \r\n             const offsetX = size6Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX + offsetX;\r\n             const newY = currentY;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'white', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'white', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           } else if(size7 !== \"\" && size6 === \"\"){\r\n\r\n            if(Number.isNaN(size7Num)){\r\n              const sizeFormError9 = document.createElement(\"p\");\r\n              sizeFormError9.classList.add(\"size-form-error9\");\r\n              div24.append(sizeFormError9);\r\n              document.querySelector(\".size-form-error9\").textContent = \"※数値のみ入力してください※\";\r\n             } \r\n\r\n             const offsetX = size7Num;\r\n             const currentX = newRect.x();\r\n             const currentY = newRect.y();\r\n             const newX = currentX - offsetX;\r\n             const newY = currentY;\r\n\r\n             newRect.position({ x: newX, y: newY });\r\n\r\n             layer.draw();\r\n\r\n             dashedLine7.destroy();\r\n             dashedLine8.destroy();\r\n\r\n             const circleX1A = newCircle.x();\r\n             const circleY1A = newCircle.y();\r\n\r\n             const circleX2A = circle1.x();\r\n             const circleY2A = circle1.y();\r\n\r\n             // 四角の真ん中の座標を計算\r\n             const midRectX1A = newRect.x() + newRect.width() / 2;\r\n             const midRectY1A = newRect.y() + newRect.height() / 2;\r\n\r\n             const polygon = new Konva.Line({\r\n              points: [circleX1A, circleY1A, midRectX1A, midRectY1A, circleX2A, circleY2A],\r\n              stroke: 'white', // 線の色\r\n              strokeWidth: 2, // 線の太さ\r\n              closed: true, // 閉じた形状として描画\r\n              fill: 'white', // 塗りつぶし色（透明）\r\n            });\r\n            \r\n            layer.add(polygon);\r\n            newCircle.destroy();\r\n            circle1.destroy();\r\n            newRect.destroy();\r\n\r\n            while (document.querySelector(\".div23\").lastChild) {\r\n              document.querySelector(\".div23\").removeChild(document.querySelector(\".div23\").lastChild);\r\n             }\r\n\r\n\r\n\r\n           };\r\n\r\n         });\r\n\r\n      };\r\n\r\n\r\n\r\n    }else if(check[1].checked){\r\n\r\n      const size4 =document.querySelector(\".rectAngle-SizeForm28\").value;\r\n      const size5 =document.querySelector(\".rectAngle-SizeForm29\").value;\r\n      const size4Y = Number.parseFloat(size4);\r\n      const size5Y = Number.parseFloat(size5);\r\n      const size4Num = size4Y /1.06;\r\n      const size5Num = size5Y /1.06;\r\n      \r\n\r\n      if(size4 !== \"\" && size5 === \"\"){\r\n\r\n        //size4Num取得して上に伸ばす処理、現在表示されている四角を、図形の上方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を青色にする。その後whileでフォームを消す\r\n\r\n        if(Number.isNaN(size4Num)){\r\n          const sizeFormError5 = document.createElement(\"p\");\r\n          sizeFormError5.classList.add(\"size-form-error5\");\r\n          div22.append(sizeFormError5);\r\n          document.querySelector(\".size-form-error5\").textContent = \"※数値のみ入力してください※\";\r\n         }\r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 上に移動させる距離を指定\r\n        const offsetY = -size4Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX;\r\n        const newY = currentY + offsetY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        //丸い点と四角が垂直に交わる座標\r\n        const intersectionX1 = newCircle.x(); \r\n        const intersectionY1 = newRect.y()+5;\r\n\r\n        //もう一方の丸い点と四角が垂直に交わる座標\r\n        const intersectionX2 = circle1.x(); \r\n        const intersectionY2 = newRect.y()+5;\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        const polygon = new Konva.Line({\r\n          points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n          stroke: 'blue', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'blue', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n        newCircle.destroy();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n\r\n\r\n      }else if(size5 !== \"\" && size4 === \"\"){\r\n\r\n        //size5Num取得して下に縮める処理、現在表示されている四角を、図形の下方向に入力された数値の長さの座標の位置に移動させ、更に、四角と丸い点が垂直に交わる座標位置を２箇所取得し、丸い点の座標、交わる箇所の座標、四角の座標の内側を白色にする。その後whileでフォームを消す\r\n\r\n         if(Number.isNaN(size5Num)){\r\n          const sizeFormError6 = document.createElement(\"p\");\r\n          sizeFormError6.classList.add(\"size-form-error6\");\r\n          div22.append(sizeFormError6);\r\n          document.querySelector(\".size-form-error6\").textContent = \"※数値のみ入力してください※\";\r\n         } \r\n\r\n        dashedLine6.destroy();\r\n\r\n        // 上に移動させる距離を指定\r\n        const offsetY = size5Num;\r\n\r\n        // 現在の midRect の座標を取得\r\n        const currentX = newRect.x();\r\n        const currentY = newRect.y();\r\n\r\n        const circleX1 = newCircle.x();\r\n        const circleY1 = newCircle.y();\r\n\r\n        const circleX2 = circle1.x();\r\n        const circleY2 = circle1.y();\r\n\r\n        // 新しい座標を計算して設定\r\n        const newX = currentX;\r\n        const newY = currentY + offsetY;\r\n\r\n        // midRect の座標を更新\r\n        newRect.position({ x: newX, y: newY });\r\n\r\n        //丸い点と四角が垂直に交わる座標\r\n        const intersectionX1 = newCircle.x(); \r\n        const intersectionY1 = newRect.y()+5;\r\n\r\n        //もう一方の丸い点と四角が垂直に交わる座標\r\n        const intersectionX2 = circle1.x(); \r\n        const intersectionY2 = newRect.y()+5;\r\n\r\n        // 四角の真ん中の座標を計算\r\n        const midRectX1 = newRect.x() + newRect.width() / 2;\r\n        const midRectY1 = newRect.y() + newRect.height() / 2;\r\n\r\n        const polygon = new Konva.Line({\r\n          points: [circleX1, circleY1, intersectionX1, intersectionY1, midRectX1, midRectY1, intersectionX2, intersectionY2, circleX2, circleY2],\r\n          stroke: 'white', // 線の色\r\n          strokeWidth: 2, // 線の太さ\r\n          closed: true, // 閉じた形状として描画\r\n          fill: 'white', // 塗りつぶし色（透明）\r\n        });\r\n        \r\n        layer.add(polygon);\r\n\r\n        // レイヤーを再描画\r\n        layer.draw();\r\n\r\n        circle1.destroy();\r\n        newRect.destroy();\r\n        newCircle.destroy();\r\n\r\n        while (document.querySelector(\".div21\").lastChild) {\r\n          document.querySelector(\".div21\").removeChild(document.querySelector(\".div21\").lastChild);\r\n         }\r\n\r\n      };\r\n\r\n\r\n\r\n    }else{\r\n\r\n      const sizeFormError7 = document.createElement(\"p\");\r\n      sizeFormError7.classList.add(\"size-form-error7\");\r\n      div22.append(sizeFormError7);\r\n      document.querySelector(\".size-form-error7\").textContent = \"※伸縮パターンにチェックを入れてください※\";\r\n\r\n    }\r\n\r\n  });\r\n\r\n    };  \r\n    \r\n  };\r\n};\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/SpaceTopTwoPointsModule.js?");

/***/ }),

/***/ "./Public/App/src/index.js":
/*!*********************************!*\
  !*** ./Public/App/src/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const contentHome = document.querySelector('#content-home');\r\nconst contentSpace = document.querySelector('#content-space');\r\nconst contentFurniture = document.querySelector('#content-furniture');\r\nconst contentHelp = document.querySelector('#content-help');\r\nconst contentPrint = document.querySelector('#content-print');\r\nconst contentPhoto = document.querySelector('#content-photo');\r\nconst contentInquiry = document.querySelector('#content-inquiry');\r\n\r\n\r\n// クッキーからユーザー名を取得\r\nconst username = getCookie('username');\r\n\r\n// Display the username on the page\r\nif (username) {\r\n  const userName = document.querySelector('.user-name');\r\n  userName.textContent = `${username}`;\r\n}\r\n\r\n// クッキーを取得する関数\r\nfunction getCookie(name) {\r\n  const value = `; ${document.cookie}`;\r\n  const parts = value.split(`; ${name}=`);\r\n  if (parts.length === 2) return parts.pop().split(';').shift();\r\n}\r\n\r\n// ログアウトボタンをクリックしたときの処理\r\nconst logoutButton = document.querySelector('#logout-button');\r\nlogoutButton.addEventListener('click', () => {\r\n  // サーバーにログアウトリクエストを送信\r\n  fetch('/logout', {\r\n    method: 'POST',\r\n    credentials: 'same-origin', // クッキーをサーバーに送信するための設定\r\n  })\r\n    .then((response) => {\r\n      if (response.ok) {\r\n        // ログアウトに成功した場合はログイン画面にリダイレクト\r\n        window.location.href = '/index.html'; \r\n      } else {\r\n        console.error('Logout failed');\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during logout:', error);\r\n    });\r\n});\r\n\r\n\r\n\r\n// モーダルメニューのコンテンツを非表示にする関数\r\nfunction hideModalContent() {\r\n  contentPrint.style.display = 'none';\r\n  contentPhoto.style.display = 'none';\r\n  contentInquiry.style.display = 'none';\r\n}\r\n\r\n// すべてのコンテンツを非表示にする関数\r\nfunction hideAllContent() {\r\n  contentHome.style.display = 'none';\r\n  contentSpace.style.display = 'none';\r\n  contentFurniture.style.display = 'none';\r\n  contentHelp.style.display = 'none';\r\n  hideModalContent();\r\n  // content-print, content-photo, content-inquiryも非表示にする\r\n  contentPrint.style.display = 'none';\r\n  contentPhoto.style.display = 'none';\r\n  contentInquiry.style.display = 'none';\r\n}\r\n\r\n// ロード時にcontent-homeのみを表示\r\nhideAllContent();\r\ncontentHome.style.display = 'block';\r\n\r\nfunction changeBackgroundColor(color) {\r\n  document.body.style.backgroundColor = color;\r\n}\r\n\r\n// タブ切り替えのイベントリスナーを設定\r\nconst tabs = document.querySelectorAll('.tab');\r\ntabs.forEach(tab => {\r\n  \r\n   // すべてのタブからactiveクラスを削除\r\n tabs.forEach(t => t.classList.remove('active'));\r\n const homeTab = document.querySelector('[data-target=\"content-home\"]');\r\n homeTab.classList.add('active');\r\n\r\n  tab.addEventListener('click', () => {\r\n\r\n     // クリックされたタブのdata-color属性から背景色を取得\r\n    const color = tab.getAttribute('data-color');\r\n    // 背景色を変更する関数を呼び出す\r\n    changeBackgroundColor(color);\r\n    \r\n\r\n    // すべてのタブの色を元に戻す\r\n    tabs.forEach(t => t.classList.remove('active'));\r\n\r\n    // クリックされたタブに色を付ける\r\n    tab.classList.add('active');\r\n\r\n    // クリックされたタブに対応するコンテンツを取得\r\n    const targetContent = tab.getAttribute('data-target');\r\n    const content = document.querySelector(`#${targetContent}`);\r\n\r\n    // タブが既にアクティブ（表示中）の場合は何もしない\r\n    if (content.style.display === 'block') {\r\n      return;\r\n    }\r\n    \r\n\r\n    // すべてのコンテンツを非表示にする\r\n    hideAllContent();\r\n\r\n    // クリックされたタブに対応するコンテンツを表示する\r\n    content.style.display = 'block';\r\n  });\r\n});\r\n\r\n// 設定タブのドロップダウンメニューの表示・非表示を切り替える\r\nconst dropdownTab = document.querySelector('.tab-dropdown');\r\nconst dropdownMenu = document.querySelector('.dropdown-menu');\r\nlet dropdownOpen = false; // ドロップダウンメニューが開いているかのフラグ\r\n\r\n\r\n// ドロップダウンメニューをクリックしてもメニューが開かないようにする\r\ndropdownTab.addEventListener('click', (event) => {\r\n\r\n  event.stopPropagation(); // クリックイベントが親要素に伝搬しないようにする\r\n  dropdownMenu.style.display = dropdownOpen ? 'none' : 'flex'; // displayをflexに変更\r\n  dropdownOpen = !dropdownOpen;\r\n  \r\n});\r\n\r\n// ドロップダウンメニュー以外の場所をクリックしたらメニューを閉じる\r\ndocument.addEventListener('click', (event) => {\r\n  if (!dropdownTab.contains(event.target) && !dropdownMenu.contains(event.target)) {\r\n    dropdownMenu.style.display = 'none';\r\n    dropdownOpen = false;\r\n  }\r\n});\r\n\r\n// ドロップダウンメニューの中の各メニューのクリックイベントを設定\r\nconst dropdownItems = document.querySelectorAll('.dropdown-item');\r\ndropdownItems.forEach(item => {\r\n  item.addEventListener('click', () => {\r\n    \r\n    // クリックされたドロップダウンメニューに対応するコンテンツを表示する\r\n    const targetContent = item.getAttribute('data-target');\r\n    const color = item.getAttribute('data-color');\r\n    const content = document.querySelector(`#${targetContent}`);\r\n    \r\n\r\n    // すでに表示されているコンテンツの場合は非表示にしない\r\n    if (content.style.display !== 'block') {\r\n      // すべてのコンテンツを非表示にする\r\n      hideAllContent();\r\n      changeBackgroundColor(color);\r\n\r\n      // クリックされたコンテンツを表示する\r\n      content.style.display = 'block';\r\n    }\r\n\r\n\r\n    \r\n\r\n    // ドロップダウンメニューを非表示にする\r\n    dropdownMenu.style.display = 'none';\r\n    dropdownOpen = false;\r\n  });\r\n\r\n  // ドロップダウンメニューの文字をクリックしたらドロップダウンメニューを閉じる\r\n  item.addEventListener('click', (event) => {\r\n    event.stopPropagation(); // クリックイベントが親要素に伝搬しないようにする\r\n    dropdownMenu.style.display = 'none';\r\n    dropdownOpen = false;\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const spaceCreate  = __webpack_require__(/*! src/SpaceCreateModule */ \"./Public/App/src/SpaceCreateModule.js\");\r\n\r\n  // 新規作成ボタンがクリックされたときの処理\r\n  const spaceCreateBtn = document.querySelector('.space-createbtn');\r\n  spaceCreateBtn.addEventListener('click', spaceCreate);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://decorhelperweb/./Public/App/src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./Public/App/src/index.js");
/******/ 	
/******/ })()
;